'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3053
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("IntegratedSales_Ds"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class IntegratedSales_Ds
    Inherits Global.System.Data.DataSet
    
    Private tableIntegratedSales_Show As IntegratedSales_ShowDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("IntegratedSales_Show")) Is Nothing) Then
                MyBase.Tables.Add(New IntegratedSales_ShowDataTable(ds.Tables("IntegratedSales_Show")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IntegratedSales_Show() As IntegratedSales_ShowDataTable
        Get
            Return Me.tableIntegratedSales_Show
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As IntegratedSales_Ds = CType(MyBase.Clone,IntegratedSales_Ds)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("IntegratedSales_Show")) Is Nothing) Then
                MyBase.Tables.Add(New IntegratedSales_ShowDataTable(ds.Tables("IntegratedSales_Show")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableIntegratedSales_Show = CType(MyBase.Tables("IntegratedSales_Show"),IntegratedSales_ShowDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIntegratedSales_Show) Is Nothing) Then
                Me.tableIntegratedSales_Show.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "IntegratedSales_Ds"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/IntegratedSales_Ds.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableIntegratedSales_Show = New IntegratedSales_ShowDataTable
        MyBase.Tables.Add(Me.tableIntegratedSales_Show)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIntegratedSales_Show() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As IntegratedSales_Ds = New IntegratedSales_Ds
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub IntegratedSales_ShowRowChangeEventHandler(ByVal sender As Object, ByVal e As IntegratedSales_ShowRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IntegratedSales_ShowDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnrowid As Global.System.Data.DataColumn
        
        Private columncustomerdr As Global.System.Data.DataColumn
        
        Private columncustomercode As Global.System.Data.DataColumn
        
        Private columncustomername As Global.System.Data.DataColumn
        
        Private columnaddress1 As Global.System.Data.DataColumn
        
        Private columnaddress2 As Global.System.Data.DataColumn
        
        Private columnterritorydr As Global.System.Data.DataColumn
        
        Private columnterritory As Global.System.Data.DataColumn
        
        Private columnprovincedr As Global.System.Data.DataColumn
        
        Private columnprovince As Global.System.Data.DataColumn
        
        Private columngroupdr As Global.System.Data.DataColumn
        
        Private columngroup As Global.System.Data.DataColumn
        
        Private columnCommissionDate As Global.System.Data.DataColumn
        
        Private columnMrCode As Global.System.Data.DataColumn
        
        Private columnMrName As Global.System.Data.DataColumn
        
        Private columnSupCode As Global.System.Data.DataColumn
        
        Private columnSupName As Global.System.Data.DataColumn
        
        Private columnNsmCode As Global.System.Data.DataColumn
        
        Private columnNsmName As Global.System.Data.DataColumn
        
        Private columnDivisionCode As Global.System.Data.DataColumn
        
        Private columnDivisionDesc As Global.System.Data.DataColumn
        
        Private columnPrincipalCode As Global.System.Data.DataColumn
        
        Private columnPrincipalDesc As Global.System.Data.DataColumn
        
        Private columnItemCode As Global.System.Data.DataColumn
        
        Private columnItemDesc As Global.System.Data.DataColumn
        
        Private columnRefCode As Global.System.Data.DataColumn
        
        Private columnRefDate As Global.System.Data.DataColumn
        
        Private columnQtySold As Global.System.Data.DataColumn
        
        Private columnQtyFree As Global.System.Data.DataColumn
        
        Private columnUnitPrice As Global.System.Data.DataColumn
        
        Private columnAmountSold As Global.System.Data.DataColumn
        
        Private columnCreditedAmount As Global.System.Data.DataColumn
        
        Private columnSalesClass As Global.System.Data.DataColumn
        
        Private columnSaleType As Global.System.Data.DataColumn
        
        Private columnSubSaleType As Global.System.Data.DataColumn
        
        Private columnSubSubSaleType As Global.System.Data.DataColumn
        
        Private columnOutOfStock As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IntegratedSales_Show"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rowidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrowid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customerdrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomerdr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customercodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomercode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customernameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomername
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property address1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnaddress1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property address2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnaddress2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property territorydrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnterritorydr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property territoryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnterritory
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property provincedrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprovincedr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property provinceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprovince
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property groupdrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngroupdr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property groupColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngroup
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CommissionDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCommissionDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MrCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMrCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MrNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMrName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SupCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SupNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NsmCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNsmCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NsmNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNsmName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DivisionCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDivisionCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DivisionDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDivisionDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrincipalCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrincipalCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrincipalDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrincipalDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RefCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRefCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RefDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRefDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QtySoldColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQtySold
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QtyFreeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQtyFree
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnitPriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnitPrice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AmountSoldColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmountSold
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreditedAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreditedAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SalesClassColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSalesClass
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SaleTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSaleType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubSaleTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubSaleType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubSubSaleTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubSubSaleType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OutOfStockColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOutOfStock
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IntegratedSales_ShowRow
            Get
                Return CType(Me.Rows(index),IntegratedSales_ShowRow)
            End Get
        End Property
        
        Public Event IntegratedSales_ShowRowChanging As IntegratedSales_ShowRowChangeEventHandler
        
        Public Event IntegratedSales_ShowRowChanged As IntegratedSales_ShowRowChangeEventHandler
        
        Public Event IntegratedSales_ShowRowDeleting As IntegratedSales_ShowRowChangeEventHandler
        
        Public Event IntegratedSales_ShowRowDeleted As IntegratedSales_ShowRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIntegratedSales_ShowRow(ByVal row As IntegratedSales_ShowRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIntegratedSales_ShowRow( _
                    ByVal customerdr As Decimal,  _
                    ByVal customercode As String,  _
                    ByVal customername As String,  _
                    ByVal address1 As String,  _
                    ByVal address2 As String,  _
                    ByVal territorydr As Decimal,  _
                    ByVal territory As String,  _
                    ByVal provincedr As Decimal,  _
                    ByVal province As String,  _
                    ByVal groupdr As Decimal,  _
                    ByVal group As String,  _
                    ByVal CommissionDate As Date,  _
                    ByVal MrCode As String,  _
                    ByVal MrName As String,  _
                    ByVal SupCode As String,  _
                    ByVal SupName As String,  _
                    ByVal NsmCode As String,  _
                    ByVal NsmName As String,  _
                    ByVal DivisionCode As String,  _
                    ByVal DivisionDesc As String,  _
                    ByVal PrincipalCode As String,  _
                    ByVal PrincipalDesc As String,  _
                    ByVal ItemCode As String,  _
                    ByVal ItemDesc As String,  _
                    ByVal RefCode As String,  _
                    ByVal RefDate As Date,  _
                    ByVal QtySold As Long,  _
                    ByVal QtyFree As Long,  _
                    ByVal UnitPrice As Decimal,  _
                    ByVal AmountSold As Decimal,  _
                    ByVal CreditedAmount As Decimal,  _
                    ByVal SalesClass As String,  _
                    ByVal SaleType As String,  _
                    ByVal SubSaleType As String,  _
                    ByVal SubSubSaleType As String,  _
                    ByVal OutOfStock As Integer) As IntegratedSales_ShowRow
            Dim rowIntegratedSales_ShowRow As IntegratedSales_ShowRow = CType(Me.NewRow,IntegratedSales_ShowRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, customerdr, customercode, customername, address1, address2, territorydr, territory, provincedr, province, groupdr, group, CommissionDate, MrCode, MrName, SupCode, SupName, NsmCode, NsmName, DivisionCode, DivisionDesc, PrincipalCode, PrincipalDesc, ItemCode, ItemDesc, RefCode, RefDate, QtySold, QtyFree, UnitPrice, AmountSold, CreditedAmount, SalesClass, SaleType, SubSaleType, SubSubSaleType, OutOfStock}
            rowIntegratedSales_ShowRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIntegratedSales_ShowRow)
            Return rowIntegratedSales_ShowRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByrowid(ByVal rowid As Decimal) As IntegratedSales_ShowRow
            Return CType(Me.Rows.Find(New Object() {rowid}),IntegratedSales_ShowRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IntegratedSales_ShowDataTable = CType(MyBase.Clone,IntegratedSales_ShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IntegratedSales_ShowDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnrowid = MyBase.Columns("rowid")
            Me.columncustomerdr = MyBase.Columns("customerdr")
            Me.columncustomercode = MyBase.Columns("customercode")
            Me.columncustomername = MyBase.Columns("customername")
            Me.columnaddress1 = MyBase.Columns("address1")
            Me.columnaddress2 = MyBase.Columns("address2")
            Me.columnterritorydr = MyBase.Columns("territorydr")
            Me.columnterritory = MyBase.Columns("territory")
            Me.columnprovincedr = MyBase.Columns("provincedr")
            Me.columnprovince = MyBase.Columns("province")
            Me.columngroupdr = MyBase.Columns("groupdr")
            Me.columngroup = MyBase.Columns("group")
            Me.columnCommissionDate = MyBase.Columns("CommissionDate")
            Me.columnMrCode = MyBase.Columns("MrCode")
            Me.columnMrName = MyBase.Columns("MrName")
            Me.columnSupCode = MyBase.Columns("SupCode")
            Me.columnSupName = MyBase.Columns("SupName")
            Me.columnNsmCode = MyBase.Columns("NsmCode")
            Me.columnNsmName = MyBase.Columns("NsmName")
            Me.columnDivisionCode = MyBase.Columns("DivisionCode")
            Me.columnDivisionDesc = MyBase.Columns("DivisionDesc")
            Me.columnPrincipalCode = MyBase.Columns("PrincipalCode")
            Me.columnPrincipalDesc = MyBase.Columns("PrincipalDesc")
            Me.columnItemCode = MyBase.Columns("ItemCode")
            Me.columnItemDesc = MyBase.Columns("ItemDesc")
            Me.columnRefCode = MyBase.Columns("RefCode")
            Me.columnRefDate = MyBase.Columns("RefDate")
            Me.columnQtySold = MyBase.Columns("QtySold")
            Me.columnQtyFree = MyBase.Columns("QtyFree")
            Me.columnUnitPrice = MyBase.Columns("UnitPrice")
            Me.columnAmountSold = MyBase.Columns("AmountSold")
            Me.columnCreditedAmount = MyBase.Columns("CreditedAmount")
            Me.columnSalesClass = MyBase.Columns("SalesClass")
            Me.columnSaleType = MyBase.Columns("SaleType")
            Me.columnSubSaleType = MyBase.Columns("SubSaleType")
            Me.columnSubSubSaleType = MyBase.Columns("SubSubSaleType")
            Me.columnOutOfStock = MyBase.Columns("OutOfStock")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnrowid = New Global.System.Data.DataColumn("rowid", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrowid)
            Me.columncustomerdr = New Global.System.Data.DataColumn("customerdr", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomerdr)
            Me.columncustomercode = New Global.System.Data.DataColumn("customercode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomercode)
            Me.columncustomername = New Global.System.Data.DataColumn("customername", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomername)
            Me.columnaddress1 = New Global.System.Data.DataColumn("address1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaddress1)
            Me.columnaddress2 = New Global.System.Data.DataColumn("address2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaddress2)
            Me.columnterritorydr = New Global.System.Data.DataColumn("territorydr", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnterritorydr)
            Me.columnterritory = New Global.System.Data.DataColumn("territory", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnterritory)
            Me.columnprovincedr = New Global.System.Data.DataColumn("provincedr", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprovincedr)
            Me.columnprovince = New Global.System.Data.DataColumn("province", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprovince)
            Me.columngroupdr = New Global.System.Data.DataColumn("groupdr", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngroupdr)
            Me.columngroup = New Global.System.Data.DataColumn("group", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngroup)
            Me.columnCommissionDate = New Global.System.Data.DataColumn("CommissionDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCommissionDate)
            Me.columnMrCode = New Global.System.Data.DataColumn("MrCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMrCode)
            Me.columnMrName = New Global.System.Data.DataColumn("MrName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMrName)
            Me.columnSupCode = New Global.System.Data.DataColumn("SupCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupCode)
            Me.columnSupName = New Global.System.Data.DataColumn("SupName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupName)
            Me.columnNsmCode = New Global.System.Data.DataColumn("NsmCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNsmCode)
            Me.columnNsmName = New Global.System.Data.DataColumn("NsmName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNsmName)
            Me.columnDivisionCode = New Global.System.Data.DataColumn("DivisionCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDivisionCode)
            Me.columnDivisionDesc = New Global.System.Data.DataColumn("DivisionDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDivisionDesc)
            Me.columnPrincipalCode = New Global.System.Data.DataColumn("PrincipalCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrincipalCode)
            Me.columnPrincipalDesc = New Global.System.Data.DataColumn("PrincipalDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrincipalDesc)
            Me.columnItemCode = New Global.System.Data.DataColumn("ItemCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemCode)
            Me.columnItemDesc = New Global.System.Data.DataColumn("ItemDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemDesc)
            Me.columnRefCode = New Global.System.Data.DataColumn("RefCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRefCode)
            Me.columnRefDate = New Global.System.Data.DataColumn("RefDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRefDate)
            Me.columnQtySold = New Global.System.Data.DataColumn("QtySold", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQtySold)
            Me.columnQtyFree = New Global.System.Data.DataColumn("QtyFree", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQtyFree)
            Me.columnUnitPrice = New Global.System.Data.DataColumn("UnitPrice", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnitPrice)
            Me.columnAmountSold = New Global.System.Data.DataColumn("AmountSold", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmountSold)
            Me.columnCreditedAmount = New Global.System.Data.DataColumn("CreditedAmount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreditedAmount)
            Me.columnSalesClass = New Global.System.Data.DataColumn("SalesClass", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSalesClass)
            Me.columnSaleType = New Global.System.Data.DataColumn("SaleType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSaleType)
            Me.columnSubSaleType = New Global.System.Data.DataColumn("SubSaleType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubSaleType)
            Me.columnSubSubSaleType = New Global.System.Data.DataColumn("SubSubSaleType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubSubSaleType)
            Me.columnOutOfStock = New Global.System.Data.DataColumn("OutOfStock", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOutOfStock)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("IntegratedSales_DsKey1", New Global.System.Data.DataColumn() {Me.columnrowid}, true))
            Me.columnrowid.AutoIncrement = true
            Me.columnrowid.AllowDBNull = false
            Me.columnrowid.ReadOnly = true
            Me.columnrowid.Unique = true
            Me.columnaddress1.ReadOnly = true
            Me.columnaddress2.ReadOnly = true
            Me.columnMrCode.ReadOnly = true
            Me.columnMrName.ReadOnly = true
            Me.columnSupCode.ReadOnly = true
            Me.columnSupName.ReadOnly = true
            Me.columnNsmCode.ReadOnly = true
            Me.columnNsmName.ReadOnly = true
            Me.columnSubSaleType.ReadOnly = true
            Me.columnSubSubSaleType.ReadOnly = true
            Me.columnOutOfStock.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIntegratedSales_ShowRow() As IntegratedSales_ShowRow
            Return CType(Me.NewRow,IntegratedSales_ShowRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IntegratedSales_ShowRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IntegratedSales_ShowRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IntegratedSales_ShowRowChangedEvent) Is Nothing) Then
                RaiseEvent IntegratedSales_ShowRowChanged(Me, New IntegratedSales_ShowRowChangeEvent(CType(e.Row,IntegratedSales_ShowRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IntegratedSales_ShowRowChangingEvent) Is Nothing) Then
                RaiseEvent IntegratedSales_ShowRowChanging(Me, New IntegratedSales_ShowRowChangeEvent(CType(e.Row,IntegratedSales_ShowRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IntegratedSales_ShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent IntegratedSales_ShowRowDeleted(Me, New IntegratedSales_ShowRowChangeEvent(CType(e.Row,IntegratedSales_ShowRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IntegratedSales_ShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent IntegratedSales_ShowRowDeleting(Me, New IntegratedSales_ShowRowChangeEvent(CType(e.Row,IntegratedSales_ShowRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIntegratedSales_ShowRow(ByVal row As IntegratedSales_ShowRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As IntegratedSales_Ds = New IntegratedSales_Ds
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IntegratedSales_ShowDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IntegratedSales_ShowRow
        Inherits Global.System.Data.DataRow
        
        Private tableIntegratedSales_Show As IntegratedSales_ShowDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIntegratedSales_Show = CType(Me.Table,IntegratedSales_ShowDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property rowid() As Decimal
            Get
                Return CType(Me(Me.tableIntegratedSales_Show.rowidColumn),Decimal)
            End Get
            Set
                Me(Me.tableIntegratedSales_Show.rowidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customerdr() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableIntegratedSales_Show.customerdrColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customerdr' in table 'IntegratedSales_Show' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIntegratedSales_Show.customerdrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customercode() As String
            Get
                Try 
                    Return CType(Me(Me.tableIntegratedSales_Show.customercodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customercode' in table 'IntegratedSales_Show' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIntegratedSales_Show.customercodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customername() As String
            Get
                Try 
                    Return CType(Me(Me.tableIntegratedSales_Show.customernameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customername' in table 'IntegratedSales_Show' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIntegratedSales_Show.customernameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property address1() As String
            Get
                Try 
                    Return CType(Me(Me.tableIntegratedSales_Show.address1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'address1' in table 'IntegratedSales_Show' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIntegratedSales_Show.address1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property address2() As String
            Get
                Try 
                    Return CType(Me(Me.tableIntegratedSales_Show.address2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'address2' in table 'IntegratedSales_Show' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIntegratedSales_Show.address2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property territorydr() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableIntegratedSales_Show.territorydrColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'territorydr' in table 'IntegratedSales_Show' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIntegratedSales_Show.territorydrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property territory() As String
            Get
                Try 
                    Return CType(Me(Me.tableIntegratedSales_Show.territoryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'territory' in table 'IntegratedSales_Show' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIntegratedSales_Show.territoryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property provincedr() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableIntegratedSales_Show.provincedrColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'provincedr' in table 'IntegratedSales_Show' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIntegratedSales_Show.provincedrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property province() As String
            Get
                Try 
                    Return CType(Me(Me.tableIntegratedSales_Show.provinceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'province' in table 'IntegratedSales_Show' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIntegratedSales_Show.provinceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property groupdr() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableIntegratedSales_Show.groupdrColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'groupdr' in table 'IntegratedSales_Show' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIntegratedSales_Show.groupdrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property group() As String
            Get
                Try 
                    Return CType(Me(Me.tableIntegratedSales_Show.groupColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'group' in table 'IntegratedSales_Show' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIntegratedSales_Show.groupColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CommissionDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableIntegratedSales_Show.CommissionDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CommissionDate' in table 'IntegratedSales_Show' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIntegratedSales_Show.CommissionDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MrCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableIntegratedSales_Show.MrCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MrCode' in table 'IntegratedSales_Show' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIntegratedSales_Show.MrCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MrName() As String
            Get
                Try 
                    Return CType(Me(Me.tableIntegratedSales_Show.MrNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MrName' in table 'IntegratedSales_Show' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIntegratedSales_Show.MrNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SupCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableIntegratedSales_Show.SupCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SupCode' in table 'IntegratedSales_Show' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIntegratedSales_Show.SupCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SupName() As String
            Get
                Try 
                    Return CType(Me(Me.tableIntegratedSales_Show.SupNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SupName' in table 'IntegratedSales_Show' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIntegratedSales_Show.SupNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NsmCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableIntegratedSales_Show.NsmCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NsmCode' in table 'IntegratedSales_Show' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIntegratedSales_Show.NsmCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NsmName() As String
            Get
                Try 
                    Return CType(Me(Me.tableIntegratedSales_Show.NsmNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NsmName' in table 'IntegratedSales_Show' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIntegratedSales_Show.NsmNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DivisionCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableIntegratedSales_Show.DivisionCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DivisionCode' in table 'IntegratedSales_Show' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIntegratedSales_Show.DivisionCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DivisionDesc() As String
            Get
                Try 
                    Return CType(Me(Me.tableIntegratedSales_Show.DivisionDescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DivisionDesc' in table 'IntegratedSales_Show' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIntegratedSales_Show.DivisionDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrincipalCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableIntegratedSales_Show.PrincipalCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrincipalCode' in table 'IntegratedSales_Show' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIntegratedSales_Show.PrincipalCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrincipalDesc() As String
            Get
                Try 
                    Return CType(Me(Me.tableIntegratedSales_Show.PrincipalDescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrincipalDesc' in table 'IntegratedSales_Show' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIntegratedSales_Show.PrincipalDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableIntegratedSales_Show.ItemCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemCode' in table 'IntegratedSales_Show' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIntegratedSales_Show.ItemCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemDesc() As String
            Get
                Try 
                    Return CType(Me(Me.tableIntegratedSales_Show.ItemDescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemDesc' in table 'IntegratedSales_Show' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIntegratedSales_Show.ItemDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RefCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableIntegratedSales_Show.RefCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RefCode' in table 'IntegratedSales_Show' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIntegratedSales_Show.RefCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RefDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableIntegratedSales_Show.RefDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RefDate' in table 'IntegratedSales_Show' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIntegratedSales_Show.RefDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QtySold() As Long
            Get
                Try 
                    Return CType(Me(Me.tableIntegratedSales_Show.QtySoldColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QtySold' in table 'IntegratedSales_Show' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIntegratedSales_Show.QtySoldColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QtyFree() As Long
            Get
                Try 
                    Return CType(Me(Me.tableIntegratedSales_Show.QtyFreeColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QtyFree' in table 'IntegratedSales_Show' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIntegratedSales_Show.QtyFreeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UnitPrice() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableIntegratedSales_Show.UnitPriceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UnitPrice' in table 'IntegratedSales_Show' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIntegratedSales_Show.UnitPriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AmountSold() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableIntegratedSales_Show.AmountSoldColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AmountSold' in table 'IntegratedSales_Show' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIntegratedSales_Show.AmountSoldColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreditedAmount() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableIntegratedSales_Show.CreditedAmountColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreditedAmount' in table 'IntegratedSales_Show' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIntegratedSales_Show.CreditedAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SalesClass() As String
            Get
                Try 
                    Return CType(Me(Me.tableIntegratedSales_Show.SalesClassColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SalesClass' in table 'IntegratedSales_Show' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIntegratedSales_Show.SalesClassColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SaleType() As String
            Get
                Try 
                    Return CType(Me(Me.tableIntegratedSales_Show.SaleTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SaleType' in table 'IntegratedSales_Show' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIntegratedSales_Show.SaleTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubSaleType() As String
            Get
                Try 
                    Return CType(Me(Me.tableIntegratedSales_Show.SubSaleTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubSaleType' in table 'IntegratedSales_Show' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIntegratedSales_Show.SubSaleTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubSubSaleType() As String
            Get
                Try 
                    Return CType(Me(Me.tableIntegratedSales_Show.SubSubSaleTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubSubSaleType' in table 'IntegratedSales_Show' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIntegratedSales_Show.SubSubSaleTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OutOfStock() As Integer
            Get
                Return CType(Me(Me.tableIntegratedSales_Show.OutOfStockColumn),Integer)
            End Get
            Set
                Me(Me.tableIntegratedSales_Show.OutOfStockColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscustomerdrNull() As Boolean
            Return Me.IsNull(Me.tableIntegratedSales_Show.customerdrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcustomerdrNull()
            Me(Me.tableIntegratedSales_Show.customerdrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscustomercodeNull() As Boolean
            Return Me.IsNull(Me.tableIntegratedSales_Show.customercodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcustomercodeNull()
            Me(Me.tableIntegratedSales_Show.customercodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscustomernameNull() As Boolean
            Return Me.IsNull(Me.tableIntegratedSales_Show.customernameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcustomernameNull()
            Me(Me.tableIntegratedSales_Show.customernameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isaddress1Null() As Boolean
            Return Me.IsNull(Me.tableIntegratedSales_Show.address1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setaddress1Null()
            Me(Me.tableIntegratedSales_Show.address1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isaddress2Null() As Boolean
            Return Me.IsNull(Me.tableIntegratedSales_Show.address2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setaddress2Null()
            Me(Me.tableIntegratedSales_Show.address2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsterritorydrNull() As Boolean
            Return Me.IsNull(Me.tableIntegratedSales_Show.territorydrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetterritorydrNull()
            Me(Me.tableIntegratedSales_Show.territorydrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsterritoryNull() As Boolean
            Return Me.IsNull(Me.tableIntegratedSales_Show.territoryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetterritoryNull()
            Me(Me.tableIntegratedSales_Show.territoryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsprovincedrNull() As Boolean
            Return Me.IsNull(Me.tableIntegratedSales_Show.provincedrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetprovincedrNull()
            Me(Me.tableIntegratedSales_Show.provincedrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsprovinceNull() As Boolean
            Return Me.IsNull(Me.tableIntegratedSales_Show.provinceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetprovinceNull()
            Me(Me.tableIntegratedSales_Show.provinceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsgroupdrNull() As Boolean
            Return Me.IsNull(Me.tableIntegratedSales_Show.groupdrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetgroupdrNull()
            Me(Me.tableIntegratedSales_Show.groupdrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsgroupNull() As Boolean
            Return Me.IsNull(Me.tableIntegratedSales_Show.groupColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetgroupNull()
            Me(Me.tableIntegratedSales_Show.groupColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCommissionDateNull() As Boolean
            Return Me.IsNull(Me.tableIntegratedSales_Show.CommissionDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCommissionDateNull()
            Me(Me.tableIntegratedSales_Show.CommissionDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMrCodeNull() As Boolean
            Return Me.IsNull(Me.tableIntegratedSales_Show.MrCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMrCodeNull()
            Me(Me.tableIntegratedSales_Show.MrCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMrNameNull() As Boolean
            Return Me.IsNull(Me.tableIntegratedSales_Show.MrNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMrNameNull()
            Me(Me.tableIntegratedSales_Show.MrNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSupCodeNull() As Boolean
            Return Me.IsNull(Me.tableIntegratedSales_Show.SupCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSupCodeNull()
            Me(Me.tableIntegratedSales_Show.SupCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSupNameNull() As Boolean
            Return Me.IsNull(Me.tableIntegratedSales_Show.SupNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSupNameNull()
            Me(Me.tableIntegratedSales_Show.SupNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNsmCodeNull() As Boolean
            Return Me.IsNull(Me.tableIntegratedSales_Show.NsmCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNsmCodeNull()
            Me(Me.tableIntegratedSales_Show.NsmCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNsmNameNull() As Boolean
            Return Me.IsNull(Me.tableIntegratedSales_Show.NsmNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNsmNameNull()
            Me(Me.tableIntegratedSales_Show.NsmNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDivisionCodeNull() As Boolean
            Return Me.IsNull(Me.tableIntegratedSales_Show.DivisionCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDivisionCodeNull()
            Me(Me.tableIntegratedSales_Show.DivisionCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDivisionDescNull() As Boolean
            Return Me.IsNull(Me.tableIntegratedSales_Show.DivisionDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDivisionDescNull()
            Me(Me.tableIntegratedSales_Show.DivisionDescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrincipalCodeNull() As Boolean
            Return Me.IsNull(Me.tableIntegratedSales_Show.PrincipalCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrincipalCodeNull()
            Me(Me.tableIntegratedSales_Show.PrincipalCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrincipalDescNull() As Boolean
            Return Me.IsNull(Me.tableIntegratedSales_Show.PrincipalDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrincipalDescNull()
            Me(Me.tableIntegratedSales_Show.PrincipalDescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemCodeNull() As Boolean
            Return Me.IsNull(Me.tableIntegratedSales_Show.ItemCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemCodeNull()
            Me(Me.tableIntegratedSales_Show.ItemCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemDescNull() As Boolean
            Return Me.IsNull(Me.tableIntegratedSales_Show.ItemDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemDescNull()
            Me(Me.tableIntegratedSales_Show.ItemDescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRefCodeNull() As Boolean
            Return Me.IsNull(Me.tableIntegratedSales_Show.RefCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRefCodeNull()
            Me(Me.tableIntegratedSales_Show.RefCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRefDateNull() As Boolean
            Return Me.IsNull(Me.tableIntegratedSales_Show.RefDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRefDateNull()
            Me(Me.tableIntegratedSales_Show.RefDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQtySoldNull() As Boolean
            Return Me.IsNull(Me.tableIntegratedSales_Show.QtySoldColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQtySoldNull()
            Me(Me.tableIntegratedSales_Show.QtySoldColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQtyFreeNull() As Boolean
            Return Me.IsNull(Me.tableIntegratedSales_Show.QtyFreeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQtyFreeNull()
            Me(Me.tableIntegratedSales_Show.QtyFreeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnitPriceNull() As Boolean
            Return Me.IsNull(Me.tableIntegratedSales_Show.UnitPriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnitPriceNull()
            Me(Me.tableIntegratedSales_Show.UnitPriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAmountSoldNull() As Boolean
            Return Me.IsNull(Me.tableIntegratedSales_Show.AmountSoldColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAmountSoldNull()
            Me(Me.tableIntegratedSales_Show.AmountSoldColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreditedAmountNull() As Boolean
            Return Me.IsNull(Me.tableIntegratedSales_Show.CreditedAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreditedAmountNull()
            Me(Me.tableIntegratedSales_Show.CreditedAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSalesClassNull() As Boolean
            Return Me.IsNull(Me.tableIntegratedSales_Show.SalesClassColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSalesClassNull()
            Me(Me.tableIntegratedSales_Show.SalesClassColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSaleTypeNull() As Boolean
            Return Me.IsNull(Me.tableIntegratedSales_Show.SaleTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSaleTypeNull()
            Me(Me.tableIntegratedSales_Show.SaleTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubSaleTypeNull() As Boolean
            Return Me.IsNull(Me.tableIntegratedSales_Show.SubSaleTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubSaleTypeNull()
            Me(Me.tableIntegratedSales_Show.SubSaleTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubSubSaleTypeNull() As Boolean
            Return Me.IsNull(Me.tableIntegratedSales_Show.SubSubSaleTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubSubSaleTypeNull()
            Me(Me.tableIntegratedSales_Show.SubSubSaleTypeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IntegratedSales_ShowRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IntegratedSales_ShowRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IntegratedSales_ShowRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IntegratedSales_ShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
