'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3053
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsComIncRecover"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsComIncRecover
    Inherits Global.System.Data.DataSet
    
    Private tableMedrepCommission_Details As MedrepCommission_DetailsDataTable
    
    Private tableDsm_PmrDetails As Dsm_PmrDetailsDataTable
    
    Private tableComIncRecover As ComIncRecoverDataTable
    
    Private tableDSM_Commission As DSM_CommissionDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("MedrepCommission_Details")) Is Nothing) Then
                MyBase.Tables.Add(New MedrepCommission_DetailsDataTable(ds.Tables("MedrepCommission_Details")))
            End If
            If (Not (ds.Tables("Dsm_PmrDetails")) Is Nothing) Then
                MyBase.Tables.Add(New Dsm_PmrDetailsDataTable(ds.Tables("Dsm_PmrDetails")))
            End If
            If (Not (ds.Tables("ComIncRecover")) Is Nothing) Then
                MyBase.Tables.Add(New ComIncRecoverDataTable(ds.Tables("ComIncRecover")))
            End If
            If (Not (ds.Tables("DSM_Commission")) Is Nothing) Then
                MyBase.Tables.Add(New DSM_CommissionDataTable(ds.Tables("DSM_Commission")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MedrepCommission_Details() As MedrepCommission_DetailsDataTable
        Get
            Return Me.tableMedrepCommission_Details
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Dsm_PmrDetails() As Dsm_PmrDetailsDataTable
        Get
            Return Me.tableDsm_PmrDetails
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ComIncRecover() As ComIncRecoverDataTable
        Get
            Return Me.tableComIncRecover
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DSM_Commission() As DSM_CommissionDataTable
        Get
            Return Me.tableDSM_Commission
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsComIncRecover = CType(MyBase.Clone,dsComIncRecover)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("MedrepCommission_Details")) Is Nothing) Then
                MyBase.Tables.Add(New MedrepCommission_DetailsDataTable(ds.Tables("MedrepCommission_Details")))
            End If
            If (Not (ds.Tables("Dsm_PmrDetails")) Is Nothing) Then
                MyBase.Tables.Add(New Dsm_PmrDetailsDataTable(ds.Tables("Dsm_PmrDetails")))
            End If
            If (Not (ds.Tables("ComIncRecover")) Is Nothing) Then
                MyBase.Tables.Add(New ComIncRecoverDataTable(ds.Tables("ComIncRecover")))
            End If
            If (Not (ds.Tables("DSM_Commission")) Is Nothing) Then
                MyBase.Tables.Add(New DSM_CommissionDataTable(ds.Tables("DSM_Commission")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableMedrepCommission_Details = CType(MyBase.Tables("MedrepCommission_Details"),MedrepCommission_DetailsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMedrepCommission_Details) Is Nothing) Then
                Me.tableMedrepCommission_Details.InitVars
            End If
        End If
        Me.tableDsm_PmrDetails = CType(MyBase.Tables("Dsm_PmrDetails"),Dsm_PmrDetailsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDsm_PmrDetails) Is Nothing) Then
                Me.tableDsm_PmrDetails.InitVars
            End If
        End If
        Me.tableComIncRecover = CType(MyBase.Tables("ComIncRecover"),ComIncRecoverDataTable)
        If (initTable = true) Then
            If (Not (Me.tableComIncRecover) Is Nothing) Then
                Me.tableComIncRecover.InitVars
            End If
        End If
        Me.tableDSM_Commission = CType(MyBase.Tables("DSM_Commission"),DSM_CommissionDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDSM_Commission) Is Nothing) Then
                Me.tableDSM_Commission.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsComIncRecover"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsComIncRecover.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableMedrepCommission_Details = New MedrepCommission_DetailsDataTable
        MyBase.Tables.Add(Me.tableMedrepCommission_Details)
        Me.tableDsm_PmrDetails = New Dsm_PmrDetailsDataTable
        MyBase.Tables.Add(Me.tableDsm_PmrDetails)
        Me.tableComIncRecover = New ComIncRecoverDataTable
        MyBase.Tables.Add(Me.tableComIncRecover)
        Me.tableDSM_Commission = New DSM_CommissionDataTable
        MyBase.Tables.Add(Me.tableDSM_Commission)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMedrepCommission_Details() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDsm_PmrDetails() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeComIncRecover() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDSM_Commission() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsComIncRecover = New dsComIncRecover
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub MedrepCommission_DetailsRowChangeEventHandler(ByVal sender As Object, ByVal e As MedrepCommission_DetailsRowChangeEvent)
    
    Public Delegate Sub Dsm_PmrDetailsRowChangeEventHandler(ByVal sender As Object, ByVal e As Dsm_PmrDetailsRowChangeEvent)
    
    Public Delegate Sub ComIncRecoverRowChangeEventHandler(ByVal sender As Object, ByVal e As ComIncRecoverRowChangeEvent)
    
    Public Delegate Sub DSM_CommissionRowChangeEventHandler(ByVal sender As Object, ByVal e As DSM_CommissionRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MedrepCommission_DetailsDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCommissionDate As Global.System.Data.DataColumn
        
        Private columnMrCode As Global.System.Data.DataColumn
        
        Private columnSales As Global.System.Data.DataColumn
        
        Private columnTarget As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MedrepCommission_Details"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CommissionDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCommissionDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MrCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMrCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SalesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSales
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TargetColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTarget
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MedrepCommission_DetailsRow
            Get
                Return CType(Me.Rows(index),MedrepCommission_DetailsRow)
            End Get
        End Property
        
        Public Event MedrepCommission_DetailsRowChanging As MedrepCommission_DetailsRowChangeEventHandler
        
        Public Event MedrepCommission_DetailsRowChanged As MedrepCommission_DetailsRowChangeEventHandler
        
        Public Event MedrepCommission_DetailsRowDeleting As MedrepCommission_DetailsRowChangeEventHandler
        
        Public Event MedrepCommission_DetailsRowDeleted As MedrepCommission_DetailsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMedrepCommission_DetailsRow(ByVal row As MedrepCommission_DetailsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMedrepCommission_DetailsRow(ByVal CommissionDate As Date, ByVal MrCode As String, ByVal Sales As Decimal, ByVal Target As Decimal) As MedrepCommission_DetailsRow
            Dim rowMedrepCommission_DetailsRow As MedrepCommission_DetailsRow = CType(Me.NewRow,MedrepCommission_DetailsRow)
            Dim columnValuesArray() As Object = New Object() {CommissionDate, MrCode, Sales, Target}
            rowMedrepCommission_DetailsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMedrepCommission_DetailsRow)
            Return rowMedrepCommission_DetailsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MedrepCommission_DetailsDataTable = CType(MyBase.Clone,MedrepCommission_DetailsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MedrepCommission_DetailsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCommissionDate = MyBase.Columns("CommissionDate")
            Me.columnMrCode = MyBase.Columns("MrCode")
            Me.columnSales = MyBase.Columns("Sales")
            Me.columnTarget = MyBase.Columns("Target")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCommissionDate = New Global.System.Data.DataColumn("CommissionDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCommissionDate)
            Me.columnMrCode = New Global.System.Data.DataColumn("MrCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMrCode)
            Me.columnSales = New Global.System.Data.DataColumn("Sales", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSales)
            Me.columnTarget = New Global.System.Data.DataColumn("Target", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTarget)
            Me.columnSales.ReadOnly = true
            Me.columnTarget.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMedrepCommission_DetailsRow() As MedrepCommission_DetailsRow
            Return CType(Me.NewRow,MedrepCommission_DetailsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MedrepCommission_DetailsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MedrepCommission_DetailsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MedrepCommission_DetailsRowChangedEvent) Is Nothing) Then
                RaiseEvent MedrepCommission_DetailsRowChanged(Me, New MedrepCommission_DetailsRowChangeEvent(CType(e.Row,MedrepCommission_DetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MedrepCommission_DetailsRowChangingEvent) Is Nothing) Then
                RaiseEvent MedrepCommission_DetailsRowChanging(Me, New MedrepCommission_DetailsRowChangeEvent(CType(e.Row,MedrepCommission_DetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MedrepCommission_DetailsRowDeletedEvent) Is Nothing) Then
                RaiseEvent MedrepCommission_DetailsRowDeleted(Me, New MedrepCommission_DetailsRowChangeEvent(CType(e.Row,MedrepCommission_DetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MedrepCommission_DetailsRowDeletingEvent) Is Nothing) Then
                RaiseEvent MedrepCommission_DetailsRowDeleting(Me, New MedrepCommission_DetailsRowChangeEvent(CType(e.Row,MedrepCommission_DetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMedrepCommission_DetailsRow(ByVal row As MedrepCommission_DetailsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsComIncRecover = New dsComIncRecover
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MedrepCommission_DetailsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Dsm_PmrDetailsDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnsupcode As Global.System.Data.DataColumn
        
        Private columnmrcode As Global.System.Data.DataColumn
        
        Private columnmrname As Global.System.Data.DataColumn
        
        Private columnSales1 As Global.System.Data.DataColumn
        
        Private columnSales2 As Global.System.Data.DataColumn
        
        Private columnSales3 As Global.System.Data.DataColumn
        
        Private columnTarget1 As Global.System.Data.DataColumn
        
        Private columnTarget2 As Global.System.Data.DataColumn
        
        Private columnTarget3 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Dsm_PmrDetails"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property supcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsupcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property mrcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmrcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property mrnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmrname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Sales1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSales1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Sales2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSales2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Sales3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSales3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Target1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTarget1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Target2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTarget2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Target3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTarget3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Dsm_PmrDetailsRow
            Get
                Return CType(Me.Rows(index),Dsm_PmrDetailsRow)
            End Get
        End Property
        
        Public Event Dsm_PmrDetailsRowChanging As Dsm_PmrDetailsRowChangeEventHandler
        
        Public Event Dsm_PmrDetailsRowChanged As Dsm_PmrDetailsRowChangeEventHandler
        
        Public Event Dsm_PmrDetailsRowDeleting As Dsm_PmrDetailsRowChangeEventHandler
        
        Public Event Dsm_PmrDetailsRowDeleted As Dsm_PmrDetailsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDsm_PmrDetailsRow(ByVal row As Dsm_PmrDetailsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDsm_PmrDetailsRow(ByVal supcode As String, ByVal mrcode As String, ByVal mrname As String, ByVal Sales1 As Decimal, ByVal Sales2 As Decimal, ByVal Sales3 As Decimal, ByVal Target1 As Decimal, ByVal Target2 As Decimal, ByVal Target3 As Decimal) As Dsm_PmrDetailsRow
            Dim rowDsm_PmrDetailsRow As Dsm_PmrDetailsRow = CType(Me.NewRow,Dsm_PmrDetailsRow)
            Dim columnValuesArray() As Object = New Object() {supcode, mrcode, mrname, Sales1, Sales2, Sales3, Target1, Target2, Target3}
            rowDsm_PmrDetailsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDsm_PmrDetailsRow)
            Return rowDsm_PmrDetailsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Dsm_PmrDetailsDataTable = CType(MyBase.Clone,Dsm_PmrDetailsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Dsm_PmrDetailsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsupcode = MyBase.Columns("supcode")
            Me.columnmrcode = MyBase.Columns("mrcode")
            Me.columnmrname = MyBase.Columns("mrname")
            Me.columnSales1 = MyBase.Columns("Sales1")
            Me.columnSales2 = MyBase.Columns("Sales2")
            Me.columnSales3 = MyBase.Columns("Sales3")
            Me.columnTarget1 = MyBase.Columns("Target1")
            Me.columnTarget2 = MyBase.Columns("Target2")
            Me.columnTarget3 = MyBase.Columns("Target3")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsupcode = New Global.System.Data.DataColumn("supcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsupcode)
            Me.columnmrcode = New Global.System.Data.DataColumn("mrcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmrcode)
            Me.columnmrname = New Global.System.Data.DataColumn("mrname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmrname)
            Me.columnSales1 = New Global.System.Data.DataColumn("Sales1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSales1)
            Me.columnSales2 = New Global.System.Data.DataColumn("Sales2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSales2)
            Me.columnSales3 = New Global.System.Data.DataColumn("Sales3", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSales3)
            Me.columnTarget1 = New Global.System.Data.DataColumn("Target1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTarget1)
            Me.columnTarget2 = New Global.System.Data.DataColumn("Target2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTarget2)
            Me.columnTarget3 = New Global.System.Data.DataColumn("Target3", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTarget3)
            Me.columnSales1.ReadOnly = true
            Me.columnSales2.ReadOnly = true
            Me.columnSales3.ReadOnly = true
            Me.columnTarget1.ReadOnly = true
            Me.columnTarget2.ReadOnly = true
            Me.columnTarget3.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDsm_PmrDetailsRow() As Dsm_PmrDetailsRow
            Return CType(Me.NewRow,Dsm_PmrDetailsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Dsm_PmrDetailsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Dsm_PmrDetailsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Dsm_PmrDetailsRowChangedEvent) Is Nothing) Then
                RaiseEvent Dsm_PmrDetailsRowChanged(Me, New Dsm_PmrDetailsRowChangeEvent(CType(e.Row,Dsm_PmrDetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Dsm_PmrDetailsRowChangingEvent) Is Nothing) Then
                RaiseEvent Dsm_PmrDetailsRowChanging(Me, New Dsm_PmrDetailsRowChangeEvent(CType(e.Row,Dsm_PmrDetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Dsm_PmrDetailsRowDeletedEvent) Is Nothing) Then
                RaiseEvent Dsm_PmrDetailsRowDeleted(Me, New Dsm_PmrDetailsRowChangeEvent(CType(e.Row,Dsm_PmrDetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Dsm_PmrDetailsRowDeletingEvent) Is Nothing) Then
                RaiseEvent Dsm_PmrDetailsRowDeleting(Me, New Dsm_PmrDetailsRowChangeEvent(CType(e.Row,Dsm_PmrDetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDsm_PmrDetailsRow(ByVal row As Dsm_PmrDetailsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsComIncRecover = New dsComIncRecover
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Dsm_PmrDetailsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ComIncRecoverDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnRowid As Global.System.Data.DataColumn
        
        Private columnOriginalSales As Global.System.Data.DataColumn
        
        Private columnOriginalTarget As Global.System.Data.DataColumn
        
        Private columnAdjustedSales As Global.System.Data.DataColumn
        
        Private columnAdjustedTarget As Global.System.Data.DataColumn
        
        Private columnDivision As Global.System.Data.DataColumn
        
        Private columnDivisionPerformance As Global.System.Data.DataColumn
        
        Private columnDistrictPerformance As Global.System.Data.DataColumn
        
        Private columnBasic As Global.System.Data.DataColumn
        
        Private columnKeyProduct As Global.System.Data.DataColumn
        
        Private columnKeyProductSales As Global.System.Data.DataColumn
        
        Private columnKeyProductTarget As Global.System.Data.DataColumn
        
        Private columnSubKeyProductSales As Global.System.Data.DataColumn
        
        Private columnSubKeyProductTarget As Global.System.Data.DataColumn
        
        Private columnExcessSales As Global.System.Data.DataColumn
        
        Private columnRepCount As Global.System.Data.DataColumn
        
        Private columnQuadStorm As Global.System.Data.DataColumn
        
        Private columnCallRate As Global.System.Data.DataColumn
        
        Private columnTarget As Global.System.Data.DataColumn
        
        Private columnSupCode As Global.System.Data.DataColumn
        
        Private columnSupName As Global.System.Data.DataColumn
        
        Private columnMrCode As Global.System.Data.DataColumn
        
        Private columnMrName As Global.System.Data.DataColumn
        
        Private columnCommissionDate As Global.System.Data.DataColumn
        
        Private columnOriginalSalesR As Global.System.Data.DataColumn
        
        Private columnOriginalTargetR As Global.System.Data.DataColumn
        
        Private columnAdjustedSalesR As Global.System.Data.DataColumn
        
        Private columnAdjustedTargetR As Global.System.Data.DataColumn
        
        Private columnDivisionR As Global.System.Data.DataColumn
        
        Private columnDivisionPerformanceR As Global.System.Data.DataColumn
        
        Private columnDistrictPerformanceR As Global.System.Data.DataColumn
        
        Private columnBasicR As Global.System.Data.DataColumn
        
        Private columnKeyProductR As Global.System.Data.DataColumn
        
        Private columnKeyProductSalesR As Global.System.Data.DataColumn
        
        Private columnKeyProductTargetR As Global.System.Data.DataColumn
        
        Private columnSubKeyProductSalesR As Global.System.Data.DataColumn
        
        Private columnSubKeyProductTargetR As Global.System.Data.DataColumn
        
        Private columnExcessSalesR As Global.System.Data.DataColumn
        
        Private columnRepCountR As Global.System.Data.DataColumn
        
        Private columnQuadStormR As Global.System.Data.DataColumn
        
        Private columnCallRateR As Global.System.Data.DataColumn
        
        Private columnTargetR As Global.System.Data.DataColumn
        
        Private columnDivisionSalesR As Global.System.Data.DataColumn
        
        Private columnDivisionTargetR As Global.System.Data.DataColumn
        
        Private columnDistrictSalesR As Global.System.Data.DataColumn
        
        Private columnDistrictTargetR As Global.System.Data.DataColumn
        
        Private columnDivisionSales As Global.System.Data.DataColumn
        
        Private columnDivisionTarget As Global.System.Data.DataColumn
        
        Private columnDistrictSales As Global.System.Data.DataColumn
        
        Private columnDistrictTarget As Global.System.Data.DataColumn
        
        Private columnAbove85 As Global.System.Data.DataColumn
        
        Private columnAbove85Current As Global.System.Data.DataColumn
        
        Private columnAbove85Previous As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ComIncRecover"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RowidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OriginalSalesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOriginalSales
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OriginalTargetColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOriginalTarget
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdjustedSalesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdjustedSales
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdjustedTargetColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdjustedTarget
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DivisionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDivision
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DivisionPerformanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDivisionPerformance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DistrictPerformanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDistrictPerformance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BasicColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBasic
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KeyProductColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKeyProduct
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KeyProductSalesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKeyProductSales
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KeyProductTargetColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKeyProductTarget
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubKeyProductSalesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubKeyProductSales
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubKeyProductTargetColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubKeyProductTarget
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExcessSalesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExcessSales
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RepCountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRepCount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QuadStormColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuadStorm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CallRateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCallRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TargetColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTarget
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SupCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SupNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MrCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMrCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MrNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMrName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CommissionDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCommissionDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OriginalSalesRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOriginalSalesR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OriginalTargetRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOriginalTargetR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdjustedSalesRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdjustedSalesR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdjustedTargetRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdjustedTargetR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DivisionRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDivisionR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DivisionPerformanceRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDivisionPerformanceR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DistrictPerformanceRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDistrictPerformanceR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BasicRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBasicR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KeyProductRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKeyProductR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KeyProductSalesRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKeyProductSalesR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KeyProductTargetRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKeyProductTargetR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubKeyProductSalesRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubKeyProductSalesR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubKeyProductTargetRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubKeyProductTargetR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExcessSalesRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExcessSalesR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RepCountRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRepCountR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QuadStormRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuadStormR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CallRateRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCallRateR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TargetRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTargetR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DivisionSalesRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDivisionSalesR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DivisionTargetRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDivisionTargetR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DistrictSalesRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDistrictSalesR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DistrictTargetRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDistrictTargetR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DivisionSalesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDivisionSales
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DivisionTargetColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDivisionTarget
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DistrictSalesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDistrictSales
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DistrictTargetColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDistrictTarget
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Above85Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAbove85
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Above85CurrentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAbove85Current
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Above85PreviousColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAbove85Previous
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ComIncRecoverRow
            Get
                Return CType(Me.Rows(index),ComIncRecoverRow)
            End Get
        End Property
        
        Public Event ComIncRecoverRowChanging As ComIncRecoverRowChangeEventHandler
        
        Public Event ComIncRecoverRowChanged As ComIncRecoverRowChangeEventHandler
        
        Public Event ComIncRecoverRowDeleting As ComIncRecoverRowChangeEventHandler
        
        Public Event ComIncRecoverRowDeleted As ComIncRecoverRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddComIncRecoverRow(ByVal row As ComIncRecoverRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddComIncRecoverRow( _
                    ByVal OriginalSales As Decimal,  _
                    ByVal OriginalTarget As Decimal,  _
                    ByVal AdjustedSales As Decimal,  _
                    ByVal AdjustedTarget As Decimal,  _
                    ByVal Division As String,  _
                    ByVal DivisionPerformance As Decimal,  _
                    ByVal DistrictPerformance As Decimal,  _
                    ByVal Basic As Decimal,  _
                    ByVal KeyProduct As Decimal,  _
                    ByVal KeyProductSales As Decimal,  _
                    ByVal KeyProductTarget As Decimal,  _
                    ByVal SubKeyProductSales As Decimal,  _
                    ByVal SubKeyProductTarget As Decimal,  _
                    ByVal ExcessSales As Decimal,  _
                    ByVal RepCount As Integer,  _
                    ByVal QuadStorm As Decimal,  _
                    ByVal CallRate As Integer,  _
                    ByVal Target As Decimal,  _
                    ByVal SupCode As String,  _
                    ByVal SupName As String,  _
                    ByVal MrCode As String,  _
                    ByVal MrName As String,  _
                    ByVal CommissionDate As Date,  _
                    ByVal OriginalSalesR As Decimal,  _
                    ByVal OriginalTargetR As Decimal,  _
                    ByVal AdjustedSalesR As Decimal,  _
                    ByVal AdjustedTargetR As Decimal,  _
                    ByVal DivisionR As String,  _
                    ByVal DivisionPerformanceR As Decimal,  _
                    ByVal DistrictPerformanceR As Decimal,  _
                    ByVal BasicR As Decimal,  _
                    ByVal KeyProductR As Decimal,  _
                    ByVal KeyProductSalesR As Decimal,  _
                    ByVal KeyProductTargetR As Decimal,  _
                    ByVal SubKeyProductSalesR As Decimal,  _
                    ByVal SubKeyProductTargetR As Decimal,  _
                    ByVal ExcessSalesR As Decimal,  _
                    ByVal RepCountR As Integer,  _
                    ByVal QuadStormR As Decimal,  _
                    ByVal CallRateR As Integer,  _
                    ByVal TargetR As Decimal,  _
                    ByVal DivisionSalesR As Decimal,  _
                    ByVal DivisionTargetR As Decimal,  _
                    ByVal DistrictSalesR As Decimal,  _
                    ByVal DistrictTargetR As Decimal,  _
                    ByVal DivisionSales As Decimal,  _
                    ByVal DivisionTarget As Decimal,  _
                    ByVal DistrictSales As Decimal,  _
                    ByVal DistrictTarget As Decimal,  _
                    ByVal Above85 As Integer,  _
                    ByVal Above85Current As Integer,  _
                    ByVal Above85Previous As Integer) As ComIncRecoverRow
            Dim rowComIncRecoverRow As ComIncRecoverRow = CType(Me.NewRow,ComIncRecoverRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, OriginalSales, OriginalTarget, AdjustedSales, AdjustedTarget, Division, DivisionPerformance, DistrictPerformance, Basic, KeyProduct, KeyProductSales, KeyProductTarget, SubKeyProductSales, SubKeyProductTarget, ExcessSales, RepCount, QuadStorm, CallRate, Target, SupCode, SupName, MrCode, MrName, CommissionDate, OriginalSalesR, OriginalTargetR, AdjustedSalesR, AdjustedTargetR, DivisionR, DivisionPerformanceR, DistrictPerformanceR, BasicR, KeyProductR, KeyProductSalesR, KeyProductTargetR, SubKeyProductSalesR, SubKeyProductTargetR, ExcessSalesR, RepCountR, QuadStormR, CallRateR, TargetR, DivisionSalesR, DivisionTargetR, DistrictSalesR, DistrictTargetR, DivisionSales, DivisionTarget, DistrictSales, DistrictTarget, Above85, Above85Current, Above85Previous}
            rowComIncRecoverRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowComIncRecoverRow)
            Return rowComIncRecoverRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ComIncRecoverDataTable = CType(MyBase.Clone,ComIncRecoverDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ComIncRecoverDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnRowid = MyBase.Columns("Rowid")
            Me.columnOriginalSales = MyBase.Columns("OriginalSales")
            Me.columnOriginalTarget = MyBase.Columns("OriginalTarget")
            Me.columnAdjustedSales = MyBase.Columns("AdjustedSales")
            Me.columnAdjustedTarget = MyBase.Columns("AdjustedTarget")
            Me.columnDivision = MyBase.Columns("Division")
            Me.columnDivisionPerformance = MyBase.Columns("DivisionPerformance")
            Me.columnDistrictPerformance = MyBase.Columns("DistrictPerformance")
            Me.columnBasic = MyBase.Columns("Basic")
            Me.columnKeyProduct = MyBase.Columns("KeyProduct")
            Me.columnKeyProductSales = MyBase.Columns("KeyProductSales")
            Me.columnKeyProductTarget = MyBase.Columns("KeyProductTarget")
            Me.columnSubKeyProductSales = MyBase.Columns("SubKeyProductSales")
            Me.columnSubKeyProductTarget = MyBase.Columns("SubKeyProductTarget")
            Me.columnExcessSales = MyBase.Columns("ExcessSales")
            Me.columnRepCount = MyBase.Columns("RepCount")
            Me.columnQuadStorm = MyBase.Columns("QuadStorm")
            Me.columnCallRate = MyBase.Columns("CallRate")
            Me.columnTarget = MyBase.Columns("Target")
            Me.columnSupCode = MyBase.Columns("SupCode")
            Me.columnSupName = MyBase.Columns("SupName")
            Me.columnMrCode = MyBase.Columns("MrCode")
            Me.columnMrName = MyBase.Columns("MrName")
            Me.columnCommissionDate = MyBase.Columns("CommissionDate")
            Me.columnOriginalSalesR = MyBase.Columns("OriginalSalesR")
            Me.columnOriginalTargetR = MyBase.Columns("OriginalTargetR")
            Me.columnAdjustedSalesR = MyBase.Columns("AdjustedSalesR")
            Me.columnAdjustedTargetR = MyBase.Columns("AdjustedTargetR")
            Me.columnDivisionR = MyBase.Columns("DivisionR")
            Me.columnDivisionPerformanceR = MyBase.Columns("DivisionPerformanceR")
            Me.columnDistrictPerformanceR = MyBase.Columns("DistrictPerformanceR")
            Me.columnBasicR = MyBase.Columns("BasicR")
            Me.columnKeyProductR = MyBase.Columns("KeyProductR")
            Me.columnKeyProductSalesR = MyBase.Columns("KeyProductSalesR")
            Me.columnKeyProductTargetR = MyBase.Columns("KeyProductTargetR")
            Me.columnSubKeyProductSalesR = MyBase.Columns("SubKeyProductSalesR")
            Me.columnSubKeyProductTargetR = MyBase.Columns("SubKeyProductTargetR")
            Me.columnExcessSalesR = MyBase.Columns("ExcessSalesR")
            Me.columnRepCountR = MyBase.Columns("RepCountR")
            Me.columnQuadStormR = MyBase.Columns("QuadStormR")
            Me.columnCallRateR = MyBase.Columns("CallRateR")
            Me.columnTargetR = MyBase.Columns("TargetR")
            Me.columnDivisionSalesR = MyBase.Columns("DivisionSalesR")
            Me.columnDivisionTargetR = MyBase.Columns("DivisionTargetR")
            Me.columnDistrictSalesR = MyBase.Columns("DistrictSalesR")
            Me.columnDistrictTargetR = MyBase.Columns("DistrictTargetR")
            Me.columnDivisionSales = MyBase.Columns("DivisionSales")
            Me.columnDivisionTarget = MyBase.Columns("DivisionTarget")
            Me.columnDistrictSales = MyBase.Columns("DistrictSales")
            Me.columnDistrictTarget = MyBase.Columns("DistrictTarget")
            Me.columnAbove85 = MyBase.Columns("Above85")
            Me.columnAbove85Current = MyBase.Columns("Above85Current")
            Me.columnAbove85Previous = MyBase.Columns("Above85Previous")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnRowid = New Global.System.Data.DataColumn("Rowid", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowid)
            Me.columnOriginalSales = New Global.System.Data.DataColumn("OriginalSales", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOriginalSales)
            Me.columnOriginalTarget = New Global.System.Data.DataColumn("OriginalTarget", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOriginalTarget)
            Me.columnAdjustedSales = New Global.System.Data.DataColumn("AdjustedSales", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdjustedSales)
            Me.columnAdjustedTarget = New Global.System.Data.DataColumn("AdjustedTarget", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdjustedTarget)
            Me.columnDivision = New Global.System.Data.DataColumn("Division", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDivision)
            Me.columnDivisionPerformance = New Global.System.Data.DataColumn("DivisionPerformance", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDivisionPerformance)
            Me.columnDistrictPerformance = New Global.System.Data.DataColumn("DistrictPerformance", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDistrictPerformance)
            Me.columnBasic = New Global.System.Data.DataColumn("Basic", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBasic)
            Me.columnKeyProduct = New Global.System.Data.DataColumn("KeyProduct", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKeyProduct)
            Me.columnKeyProductSales = New Global.System.Data.DataColumn("KeyProductSales", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKeyProductSales)
            Me.columnKeyProductTarget = New Global.System.Data.DataColumn("KeyProductTarget", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKeyProductTarget)
            Me.columnSubKeyProductSales = New Global.System.Data.DataColumn("SubKeyProductSales", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubKeyProductSales)
            Me.columnSubKeyProductTarget = New Global.System.Data.DataColumn("SubKeyProductTarget", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubKeyProductTarget)
            Me.columnExcessSales = New Global.System.Data.DataColumn("ExcessSales", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExcessSales)
            Me.columnRepCount = New Global.System.Data.DataColumn("RepCount", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRepCount)
            Me.columnQuadStorm = New Global.System.Data.DataColumn("QuadStorm", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuadStorm)
            Me.columnCallRate = New Global.System.Data.DataColumn("CallRate", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCallRate)
            Me.columnTarget = New Global.System.Data.DataColumn("Target", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTarget)
            Me.columnSupCode = New Global.System.Data.DataColumn("SupCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupCode)
            Me.columnSupName = New Global.System.Data.DataColumn("SupName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupName)
            Me.columnMrCode = New Global.System.Data.DataColumn("MrCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMrCode)
            Me.columnMrName = New Global.System.Data.DataColumn("MrName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMrName)
            Me.columnCommissionDate = New Global.System.Data.DataColumn("CommissionDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCommissionDate)
            Me.columnOriginalSalesR = New Global.System.Data.DataColumn("OriginalSalesR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOriginalSalesR)
            Me.columnOriginalTargetR = New Global.System.Data.DataColumn("OriginalTargetR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOriginalTargetR)
            Me.columnAdjustedSalesR = New Global.System.Data.DataColumn("AdjustedSalesR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdjustedSalesR)
            Me.columnAdjustedTargetR = New Global.System.Data.DataColumn("AdjustedTargetR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdjustedTargetR)
            Me.columnDivisionR = New Global.System.Data.DataColumn("DivisionR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDivisionR)
            Me.columnDivisionPerformanceR = New Global.System.Data.DataColumn("DivisionPerformanceR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDivisionPerformanceR)
            Me.columnDistrictPerformanceR = New Global.System.Data.DataColumn("DistrictPerformanceR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDistrictPerformanceR)
            Me.columnBasicR = New Global.System.Data.DataColumn("BasicR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBasicR)
            Me.columnKeyProductR = New Global.System.Data.DataColumn("KeyProductR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKeyProductR)
            Me.columnKeyProductSalesR = New Global.System.Data.DataColumn("KeyProductSalesR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKeyProductSalesR)
            Me.columnKeyProductTargetR = New Global.System.Data.DataColumn("KeyProductTargetR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKeyProductTargetR)
            Me.columnSubKeyProductSalesR = New Global.System.Data.DataColumn("SubKeyProductSalesR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubKeyProductSalesR)
            Me.columnSubKeyProductTargetR = New Global.System.Data.DataColumn("SubKeyProductTargetR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubKeyProductTargetR)
            Me.columnExcessSalesR = New Global.System.Data.DataColumn("ExcessSalesR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExcessSalesR)
            Me.columnRepCountR = New Global.System.Data.DataColumn("RepCountR", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRepCountR)
            Me.columnQuadStormR = New Global.System.Data.DataColumn("QuadStormR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuadStormR)
            Me.columnCallRateR = New Global.System.Data.DataColumn("CallRateR", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCallRateR)
            Me.columnTargetR = New Global.System.Data.DataColumn("TargetR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTargetR)
            Me.columnDivisionSalesR = New Global.System.Data.DataColumn("DivisionSalesR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDivisionSalesR)
            Me.columnDivisionTargetR = New Global.System.Data.DataColumn("DivisionTargetR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDivisionTargetR)
            Me.columnDistrictSalesR = New Global.System.Data.DataColumn("DistrictSalesR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDistrictSalesR)
            Me.columnDistrictTargetR = New Global.System.Data.DataColumn("DistrictTargetR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDistrictTargetR)
            Me.columnDivisionSales = New Global.System.Data.DataColumn("DivisionSales", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDivisionSales)
            Me.columnDivisionTarget = New Global.System.Data.DataColumn("DivisionTarget", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDivisionTarget)
            Me.columnDistrictSales = New Global.System.Data.DataColumn("DistrictSales", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDistrictSales)
            Me.columnDistrictTarget = New Global.System.Data.DataColumn("DistrictTarget", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDistrictTarget)
            Me.columnAbove85 = New Global.System.Data.DataColumn("Above85", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAbove85)
            Me.columnAbove85Current = New Global.System.Data.DataColumn("Above85Current", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAbove85Current)
            Me.columnAbove85Previous = New Global.System.Data.DataColumn("Above85Previous", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAbove85Previous)
            Me.columnRowid.AutoIncrement = true
            Me.columnRowid.AllowDBNull = false
            Me.columnRowid.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewComIncRecoverRow() As ComIncRecoverRow
            Return CType(Me.NewRow,ComIncRecoverRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ComIncRecoverRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ComIncRecoverRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ComIncRecoverRowChangedEvent) Is Nothing) Then
                RaiseEvent ComIncRecoverRowChanged(Me, New ComIncRecoverRowChangeEvent(CType(e.Row,ComIncRecoverRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ComIncRecoverRowChangingEvent) Is Nothing) Then
                RaiseEvent ComIncRecoverRowChanging(Me, New ComIncRecoverRowChangeEvent(CType(e.Row,ComIncRecoverRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ComIncRecoverRowDeletedEvent) Is Nothing) Then
                RaiseEvent ComIncRecoverRowDeleted(Me, New ComIncRecoverRowChangeEvent(CType(e.Row,ComIncRecoverRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ComIncRecoverRowDeletingEvent) Is Nothing) Then
                RaiseEvent ComIncRecoverRowDeleting(Me, New ComIncRecoverRowChangeEvent(CType(e.Row,ComIncRecoverRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveComIncRecoverRow(ByVal row As ComIncRecoverRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsComIncRecover = New dsComIncRecover
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ComIncRecoverDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DSM_CommissionDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnsupcode As Global.System.Data.DataColumn
        
        Private columnsupname As Global.System.Data.DataColumn
        
        Private columnOriginalSales As Global.System.Data.DataColumn
        
        Private columnOriginalTarget As Global.System.Data.DataColumn
        
        Private columnAdjustedSales As Global.System.Data.DataColumn
        
        Private columnAdjustedTarget As Global.System.Data.DataColumn
        
        Private columnKeyProductSales As Global.System.Data.DataColumn
        
        Private columnKeyProductTarget As Global.System.Data.DataColumn
        
        Private columnSubKeyProductSales As Global.System.Data.DataColumn
        
        Private columnSubKeyProductTarget As Global.System.Data.DataColumn
        
        Private columnOriginalSalesR As Global.System.Data.DataColumn
        
        Private columnOriginalTargetR As Global.System.Data.DataColumn
        
        Private columnAdjustedSalesR As Global.System.Data.DataColumn
        
        Private columnAdjustedTargetR As Global.System.Data.DataColumn
        
        Private columnKeyProductSalesR As Global.System.Data.DataColumn
        
        Private columnKeyProductTargetR As Global.System.Data.DataColumn
        
        Private columnSubKeyProductSalesR As Global.System.Data.DataColumn
        
        Private columnSubKeyProductTargetR As Global.System.Data.DataColumn
        
        Private columnDivisionSales As Global.System.Data.DataColumn
        
        Private columnDivisionTarget As Global.System.Data.DataColumn
        
        Private columnDivisionSalesR As Global.System.Data.DataColumn
        
        Private columnDivisionTargetR As Global.System.Data.DataColumn
        
        Private columnRepCount As Global.System.Data.DataColumn
        
        Private columnRepCountR As Global.System.Data.DataColumn
        
        Private columnDivision As Global.System.Data.DataColumn
        
        Private columnColumn1 As Global.System.Data.DataColumn
        
        Private columnAbove85 As Global.System.Data.DataColumn
        
        Private columnAbove85Current As Global.System.Data.DataColumn
        
        Private columnAbove85Previous As Global.System.Data.DataColumn
        
        Private columnCallRate As Global.System.Data.DataColumn
        
        Private columnTarget As Global.System.Data.DataColumn
        
        Private columnCallRateR As Global.System.Data.DataColumn
        
        Private columnTargetR As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DSM_Commission"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property supcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsupcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property supnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsupname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OriginalSalesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOriginalSales
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OriginalTargetColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOriginalTarget
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdjustedSalesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdjustedSales
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdjustedTargetColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdjustedTarget
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KeyProductSalesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKeyProductSales
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KeyProductTargetColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKeyProductTarget
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubKeyProductSalesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubKeyProductSales
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubKeyProductTargetColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubKeyProductTarget
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OriginalSalesRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOriginalSalesR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OriginalTargetRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOriginalTargetR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdjustedSalesRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdjustedSalesR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdjustedTargetRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdjustedTargetR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KeyProductSalesRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKeyProductSalesR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KeyProductTargetRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKeyProductTargetR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubKeyProductSalesRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubKeyProductSalesR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubKeyProductTargetRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubKeyProductTargetR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DivisionSalesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDivisionSales
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DivisionTargetColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDivisionTarget
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DivisionSalesRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDivisionSalesR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DivisionTargetRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDivisionTargetR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RepCountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRepCount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RepCountRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRepCountR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DivisionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDivision
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Column1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnColumn1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Above85Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAbove85
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Above85CurrentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAbove85Current
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Above85PreviousColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAbove85Previous
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CallRateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCallRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TargetColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTarget
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CallRateRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCallRateR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TargetRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTargetR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DSM_CommissionRow
            Get
                Return CType(Me.Rows(index),DSM_CommissionRow)
            End Get
        End Property
        
        Public Event DSM_CommissionRowChanging As DSM_CommissionRowChangeEventHandler
        
        Public Event DSM_CommissionRowChanged As DSM_CommissionRowChangeEventHandler
        
        Public Event DSM_CommissionRowDeleting As DSM_CommissionRowChangeEventHandler
        
        Public Event DSM_CommissionRowDeleted As DSM_CommissionRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDSM_CommissionRow(ByVal row As DSM_CommissionRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDSM_CommissionRow( _
                    ByVal supcode As String,  _
                    ByVal supname As String,  _
                    ByVal OriginalSales As Decimal,  _
                    ByVal OriginalTarget As Decimal,  _
                    ByVal AdjustedSales As Decimal,  _
                    ByVal AdjustedTarget As Decimal,  _
                    ByVal KeyProductSales As Decimal,  _
                    ByVal KeyProductTarget As Decimal,  _
                    ByVal SubKeyProductSales As Decimal,  _
                    ByVal SubKeyProductTarget As Decimal,  _
                    ByVal OriginalSalesR As Decimal,  _
                    ByVal OriginalTargetR As Decimal,  _
                    ByVal AdjustedSalesR As Decimal,  _
                    ByVal AdjustedTargetR As Decimal,  _
                    ByVal KeyProductSalesR As Decimal,  _
                    ByVal KeyProductTargetR As Decimal,  _
                    ByVal SubKeyProductSalesR As Decimal,  _
                    ByVal SubKeyProductTargetR As Decimal,  _
                    ByVal DivisionSales As Decimal,  _
                    ByVal DivisionTarget As Decimal,  _
                    ByVal DivisionSalesR As Decimal,  _
                    ByVal DivisionTargetR As Decimal,  _
                    ByVal RepCount As Integer,  _
                    ByVal RepCountR As Integer,  _
                    ByVal Division As String,  _
                    ByVal Column1 As Date,  _
                    ByVal Above85 As Integer,  _
                    ByVal Above85Current As Integer,  _
                    ByVal Above85Previous As Integer,  _
                    ByVal CallRate As Integer,  _
                    ByVal Target As Decimal,  _
                    ByVal CallRateR As Integer,  _
                    ByVal TargetR As Decimal) As DSM_CommissionRow
            Dim rowDSM_CommissionRow As DSM_CommissionRow = CType(Me.NewRow,DSM_CommissionRow)
            Dim columnValuesArray() As Object = New Object() {supcode, supname, OriginalSales, OriginalTarget, AdjustedSales, AdjustedTarget, KeyProductSales, KeyProductTarget, SubKeyProductSales, SubKeyProductTarget, OriginalSalesR, OriginalTargetR, AdjustedSalesR, AdjustedTargetR, KeyProductSalesR, KeyProductTargetR, SubKeyProductSalesR, SubKeyProductTargetR, DivisionSales, DivisionTarget, DivisionSalesR, DivisionTargetR, RepCount, RepCountR, Division, Column1, Above85, Above85Current, Above85Previous, CallRate, Target, CallRateR, TargetR}
            rowDSM_CommissionRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDSM_CommissionRow)
            Return rowDSM_CommissionRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DSM_CommissionDataTable = CType(MyBase.Clone,DSM_CommissionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DSM_CommissionDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsupcode = MyBase.Columns("supcode")
            Me.columnsupname = MyBase.Columns("supname")
            Me.columnOriginalSales = MyBase.Columns("OriginalSales")
            Me.columnOriginalTarget = MyBase.Columns("OriginalTarget")
            Me.columnAdjustedSales = MyBase.Columns("AdjustedSales")
            Me.columnAdjustedTarget = MyBase.Columns("AdjustedTarget")
            Me.columnKeyProductSales = MyBase.Columns("KeyProductSales")
            Me.columnKeyProductTarget = MyBase.Columns("KeyProductTarget")
            Me.columnSubKeyProductSales = MyBase.Columns("SubKeyProductSales")
            Me.columnSubKeyProductTarget = MyBase.Columns("SubKeyProductTarget")
            Me.columnOriginalSalesR = MyBase.Columns("OriginalSalesR")
            Me.columnOriginalTargetR = MyBase.Columns("OriginalTargetR")
            Me.columnAdjustedSalesR = MyBase.Columns("AdjustedSalesR")
            Me.columnAdjustedTargetR = MyBase.Columns("AdjustedTargetR")
            Me.columnKeyProductSalesR = MyBase.Columns("KeyProductSalesR")
            Me.columnKeyProductTargetR = MyBase.Columns("KeyProductTargetR")
            Me.columnSubKeyProductSalesR = MyBase.Columns("SubKeyProductSalesR")
            Me.columnSubKeyProductTargetR = MyBase.Columns("SubKeyProductTargetR")
            Me.columnDivisionSales = MyBase.Columns("DivisionSales")
            Me.columnDivisionTarget = MyBase.Columns("DivisionTarget")
            Me.columnDivisionSalesR = MyBase.Columns("DivisionSalesR")
            Me.columnDivisionTargetR = MyBase.Columns("DivisionTargetR")
            Me.columnRepCount = MyBase.Columns("RepCount")
            Me.columnRepCountR = MyBase.Columns("RepCountR")
            Me.columnDivision = MyBase.Columns("Division")
            Me.columnColumn1 = MyBase.Columns("Column1")
            Me.columnAbove85 = MyBase.Columns("Above85")
            Me.columnAbove85Current = MyBase.Columns("Above85Current")
            Me.columnAbove85Previous = MyBase.Columns("Above85Previous")
            Me.columnCallRate = MyBase.Columns("CallRate")
            Me.columnTarget = MyBase.Columns("Target")
            Me.columnCallRateR = MyBase.Columns("CallRateR")
            Me.columnTargetR = MyBase.Columns("TargetR")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsupcode = New Global.System.Data.DataColumn("supcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsupcode)
            Me.columnsupname = New Global.System.Data.DataColumn("supname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsupname)
            Me.columnOriginalSales = New Global.System.Data.DataColumn("OriginalSales", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOriginalSales)
            Me.columnOriginalTarget = New Global.System.Data.DataColumn("OriginalTarget", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOriginalTarget)
            Me.columnAdjustedSales = New Global.System.Data.DataColumn("AdjustedSales", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdjustedSales)
            Me.columnAdjustedTarget = New Global.System.Data.DataColumn("AdjustedTarget", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdjustedTarget)
            Me.columnKeyProductSales = New Global.System.Data.DataColumn("KeyProductSales", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKeyProductSales)
            Me.columnKeyProductTarget = New Global.System.Data.DataColumn("KeyProductTarget", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKeyProductTarget)
            Me.columnSubKeyProductSales = New Global.System.Data.DataColumn("SubKeyProductSales", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubKeyProductSales)
            Me.columnSubKeyProductTarget = New Global.System.Data.DataColumn("SubKeyProductTarget", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubKeyProductTarget)
            Me.columnOriginalSalesR = New Global.System.Data.DataColumn("OriginalSalesR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOriginalSalesR)
            Me.columnOriginalTargetR = New Global.System.Data.DataColumn("OriginalTargetR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOriginalTargetR)
            Me.columnAdjustedSalesR = New Global.System.Data.DataColumn("AdjustedSalesR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdjustedSalesR)
            Me.columnAdjustedTargetR = New Global.System.Data.DataColumn("AdjustedTargetR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdjustedTargetR)
            Me.columnKeyProductSalesR = New Global.System.Data.DataColumn("KeyProductSalesR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKeyProductSalesR)
            Me.columnKeyProductTargetR = New Global.System.Data.DataColumn("KeyProductTargetR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKeyProductTargetR)
            Me.columnSubKeyProductSalesR = New Global.System.Data.DataColumn("SubKeyProductSalesR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubKeyProductSalesR)
            Me.columnSubKeyProductTargetR = New Global.System.Data.DataColumn("SubKeyProductTargetR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubKeyProductTargetR)
            Me.columnDivisionSales = New Global.System.Data.DataColumn("DivisionSales", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDivisionSales)
            Me.columnDivisionTarget = New Global.System.Data.DataColumn("DivisionTarget", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDivisionTarget)
            Me.columnDivisionSalesR = New Global.System.Data.DataColumn("DivisionSalesR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDivisionSalesR)
            Me.columnDivisionTargetR = New Global.System.Data.DataColumn("DivisionTargetR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDivisionTargetR)
            Me.columnRepCount = New Global.System.Data.DataColumn("RepCount", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRepCount)
            Me.columnRepCountR = New Global.System.Data.DataColumn("RepCountR", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRepCountR)
            Me.columnDivision = New Global.System.Data.DataColumn("Division", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDivision)
            Me.columnColumn1 = New Global.System.Data.DataColumn("Column1", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumn1)
            Me.columnAbove85 = New Global.System.Data.DataColumn("Above85", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAbove85)
            Me.columnAbove85Current = New Global.System.Data.DataColumn("Above85Current", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAbove85Current)
            Me.columnAbove85Previous = New Global.System.Data.DataColumn("Above85Previous", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAbove85Previous)
            Me.columnCallRate = New Global.System.Data.DataColumn("CallRate", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCallRate)
            Me.columnTarget = New Global.System.Data.DataColumn("Target", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTarget)
            Me.columnCallRateR = New Global.System.Data.DataColumn("CallRateR", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCallRateR)
            Me.columnTargetR = New Global.System.Data.DataColumn("TargetR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTargetR)
            Me.columnOriginalSales.ReadOnly = true
            Me.columnOriginalTarget.ReadOnly = true
            Me.columnAdjustedSales.ReadOnly = true
            Me.columnAdjustedTarget.ReadOnly = true
            Me.columnKeyProductSales.ReadOnly = true
            Me.columnKeyProductTarget.ReadOnly = true
            Me.columnSubKeyProductSales.ReadOnly = true
            Me.columnSubKeyProductTarget.ReadOnly = true
            Me.columnOriginalSalesR.ReadOnly = true
            Me.columnOriginalTargetR.ReadOnly = true
            Me.columnAdjustedSalesR.ReadOnly = true
            Me.columnAdjustedTargetR.ReadOnly = true
            Me.columnKeyProductSalesR.ReadOnly = true
            Me.columnKeyProductTargetR.ReadOnly = true
            Me.columnSubKeyProductSalesR.ReadOnly = true
            Me.columnSubKeyProductTargetR.ReadOnly = true
            Me.columnDivisionSales.ReadOnly = true
            Me.columnDivisionTarget.ReadOnly = true
            Me.columnDivisionSalesR.ReadOnly = true
            Me.columnDivisionTargetR.ReadOnly = true
            Me.columnRepCount.ReadOnly = true
            Me.columnRepCountR.ReadOnly = true
            Me.columnColumn1.ReadOnly = true
            Me.columnAbove85.ReadOnly = true
            Me.columnAbove85Current.ReadOnly = true
            Me.columnAbove85Previous.ReadOnly = true
            Me.columnCallRate.ReadOnly = true
            Me.columnTarget.ReadOnly = true
            Me.columnCallRateR.ReadOnly = true
            Me.columnTargetR.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDSM_CommissionRow() As DSM_CommissionRow
            Return CType(Me.NewRow,DSM_CommissionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DSM_CommissionRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DSM_CommissionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DSM_CommissionRowChangedEvent) Is Nothing) Then
                RaiseEvent DSM_CommissionRowChanged(Me, New DSM_CommissionRowChangeEvent(CType(e.Row,DSM_CommissionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DSM_CommissionRowChangingEvent) Is Nothing) Then
                RaiseEvent DSM_CommissionRowChanging(Me, New DSM_CommissionRowChangeEvent(CType(e.Row,DSM_CommissionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DSM_CommissionRowDeletedEvent) Is Nothing) Then
                RaiseEvent DSM_CommissionRowDeleted(Me, New DSM_CommissionRowChangeEvent(CType(e.Row,DSM_CommissionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DSM_CommissionRowDeletingEvent) Is Nothing) Then
                RaiseEvent DSM_CommissionRowDeleting(Me, New DSM_CommissionRowChangeEvent(CType(e.Row,DSM_CommissionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDSM_CommissionRow(ByVal row As DSM_CommissionRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsComIncRecover = New dsComIncRecover
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DSM_CommissionDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MedrepCommission_DetailsRow
        Inherits Global.System.Data.DataRow
        
        Private tableMedrepCommission_Details As MedrepCommission_DetailsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMedrepCommission_Details = CType(Me.Table,MedrepCommission_DetailsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CommissionDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMedrepCommission_Details.CommissionDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CommissionDate' in table 'MedrepCommission_Details' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableMedrepCommission_Details.CommissionDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MrCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableMedrepCommission_Details.MrCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MrCode' in table 'MedrepCommission_Details' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMedrepCommission_Details.MrCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sales() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMedrepCommission_Details.SalesColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sales' in table 'MedrepCommission_Details' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMedrepCommission_Details.SalesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Target() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMedrepCommission_Details.TargetColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Target' in table 'MedrepCommission_Details' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMedrepCommission_Details.TargetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCommissionDateNull() As Boolean
            Return Me.IsNull(Me.tableMedrepCommission_Details.CommissionDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCommissionDateNull()
            Me(Me.tableMedrepCommission_Details.CommissionDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMrCodeNull() As Boolean
            Return Me.IsNull(Me.tableMedrepCommission_Details.MrCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMrCodeNull()
            Me(Me.tableMedrepCommission_Details.MrCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSalesNull() As Boolean
            Return Me.IsNull(Me.tableMedrepCommission_Details.SalesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSalesNull()
            Me(Me.tableMedrepCommission_Details.SalesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTargetNull() As Boolean
            Return Me.IsNull(Me.tableMedrepCommission_Details.TargetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTargetNull()
            Me(Me.tableMedrepCommission_Details.TargetColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Dsm_PmrDetailsRow
        Inherits Global.System.Data.DataRow
        
        Private tableDsm_PmrDetails As Dsm_PmrDetailsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDsm_PmrDetails = CType(Me.Table,Dsm_PmrDetailsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property supcode() As String
            Get
                Try 
                    Return CType(Me(Me.tableDsm_PmrDetails.supcodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'supcode' in table 'Dsm_PmrDetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDsm_PmrDetails.supcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property mrcode() As String
            Get
                Try 
                    Return CType(Me(Me.tableDsm_PmrDetails.mrcodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'mrcode' in table 'Dsm_PmrDetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDsm_PmrDetails.mrcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property mrname() As String
            Get
                Try 
                    Return CType(Me(Me.tableDsm_PmrDetails.mrnameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'mrname' in table 'Dsm_PmrDetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDsm_PmrDetails.mrnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sales1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDsm_PmrDetails.Sales1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sales1' in table 'Dsm_PmrDetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDsm_PmrDetails.Sales1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sales2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDsm_PmrDetails.Sales2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sales2' in table 'Dsm_PmrDetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDsm_PmrDetails.Sales2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sales3() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDsm_PmrDetails.Sales3Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sales3' in table 'Dsm_PmrDetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDsm_PmrDetails.Sales3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Target1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDsm_PmrDetails.Target1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Target1' in table 'Dsm_PmrDetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDsm_PmrDetails.Target1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Target2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDsm_PmrDetails.Target2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Target2' in table 'Dsm_PmrDetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDsm_PmrDetails.Target2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Target3() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDsm_PmrDetails.Target3Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Target3' in table 'Dsm_PmrDetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDsm_PmrDetails.Target3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssupcodeNull() As Boolean
            Return Me.IsNull(Me.tableDsm_PmrDetails.supcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsupcodeNull()
            Me(Me.tableDsm_PmrDetails.supcodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmrcodeNull() As Boolean
            Return Me.IsNull(Me.tableDsm_PmrDetails.mrcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmrcodeNull()
            Me(Me.tableDsm_PmrDetails.mrcodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmrnameNull() As Boolean
            Return Me.IsNull(Me.tableDsm_PmrDetails.mrnameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmrnameNull()
            Me(Me.tableDsm_PmrDetails.mrnameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSales1Null() As Boolean
            Return Me.IsNull(Me.tableDsm_PmrDetails.Sales1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSales1Null()
            Me(Me.tableDsm_PmrDetails.Sales1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSales2Null() As Boolean
            Return Me.IsNull(Me.tableDsm_PmrDetails.Sales2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSales2Null()
            Me(Me.tableDsm_PmrDetails.Sales2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSales3Null() As Boolean
            Return Me.IsNull(Me.tableDsm_PmrDetails.Sales3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSales3Null()
            Me(Me.tableDsm_PmrDetails.Sales3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTarget1Null() As Boolean
            Return Me.IsNull(Me.tableDsm_PmrDetails.Target1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTarget1Null()
            Me(Me.tableDsm_PmrDetails.Target1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTarget2Null() As Boolean
            Return Me.IsNull(Me.tableDsm_PmrDetails.Target2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTarget2Null()
            Me(Me.tableDsm_PmrDetails.Target2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTarget3Null() As Boolean
            Return Me.IsNull(Me.tableDsm_PmrDetails.Target3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTarget3Null()
            Me(Me.tableDsm_PmrDetails.Target3Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ComIncRecoverRow
        Inherits Global.System.Data.DataRow
        
        Private tableComIncRecover As ComIncRecoverDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableComIncRecover = CType(Me.Table,ComIncRecoverDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Rowid() As Decimal
            Get
                Return CType(Me(Me.tableComIncRecover.RowidColumn),Decimal)
            End Get
            Set
                Me(Me.tableComIncRecover.RowidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OriginalSales() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.OriginalSalesColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OriginalSales' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.OriginalSalesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OriginalTarget() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.OriginalTargetColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OriginalTarget' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.OriginalTargetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AdjustedSales() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.AdjustedSalesColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AdjustedSales' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.AdjustedSalesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AdjustedTarget() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.AdjustedTargetColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AdjustedTarget' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.AdjustedTargetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Division() As String
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.DivisionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Division' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.DivisionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DivisionPerformance() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.DivisionPerformanceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DivisionPerformance' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.DivisionPerformanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DistrictPerformance() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.DistrictPerformanceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DistrictPerformance' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.DistrictPerformanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Basic() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.BasicColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Basic' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.BasicColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KeyProduct() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.KeyProductColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'KeyProduct' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.KeyProductColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KeyProductSales() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.KeyProductSalesColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'KeyProductSales' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.KeyProductSalesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KeyProductTarget() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.KeyProductTargetColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'KeyProductTarget' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.KeyProductTargetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubKeyProductSales() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.SubKeyProductSalesColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubKeyProductSales' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.SubKeyProductSalesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubKeyProductTarget() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.SubKeyProductTargetColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubKeyProductTarget' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.SubKeyProductTargetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ExcessSales() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.ExcessSalesColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ExcessSales' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.ExcessSalesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RepCount() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.RepCountColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RepCount' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.RepCountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QuadStorm() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.QuadStormColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QuadStorm' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.QuadStormColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CallRate() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.CallRateColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CallRate' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.CallRateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Target() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.TargetColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Target' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.TargetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SupCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.SupCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SupCode' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.SupCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SupName() As String
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.SupNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SupName' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.SupNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MrCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.MrCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MrCode' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.MrCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MrName() As String
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.MrNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MrName' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.MrNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CommissionDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.CommissionDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CommissionDate' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.CommissionDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OriginalSalesR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.OriginalSalesRColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OriginalSalesR' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.OriginalSalesRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OriginalTargetR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.OriginalTargetRColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OriginalTargetR' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.OriginalTargetRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AdjustedSalesR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.AdjustedSalesRColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AdjustedSalesR' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.AdjustedSalesRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AdjustedTargetR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.AdjustedTargetRColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AdjustedTargetR' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.AdjustedTargetRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DivisionR() As String
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.DivisionRColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DivisionR' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.DivisionRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DivisionPerformanceR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.DivisionPerformanceRColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DivisionPerformanceR' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.DivisionPerformanceRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DistrictPerformanceR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.DistrictPerformanceRColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DistrictPerformanceR' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.DistrictPerformanceRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BasicR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.BasicRColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BasicR' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.BasicRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KeyProductR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.KeyProductRColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'KeyProductR' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.KeyProductRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KeyProductSalesR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.KeyProductSalesRColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'KeyProductSalesR' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.KeyProductSalesRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KeyProductTargetR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.KeyProductTargetRColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'KeyProductTargetR' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.KeyProductTargetRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubKeyProductSalesR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.SubKeyProductSalesRColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubKeyProductSalesR' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.SubKeyProductSalesRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubKeyProductTargetR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.SubKeyProductTargetRColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubKeyProductTargetR' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.SubKeyProductTargetRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ExcessSalesR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.ExcessSalesRColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ExcessSalesR' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.ExcessSalesRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RepCountR() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.RepCountRColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RepCountR' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.RepCountRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QuadStormR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.QuadStormRColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QuadStormR' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.QuadStormRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CallRateR() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.CallRateRColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CallRateR' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.CallRateRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TargetR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.TargetRColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TargetR' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.TargetRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DivisionSalesR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.DivisionSalesRColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DivisionSalesR' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.DivisionSalesRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DivisionTargetR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.DivisionTargetRColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DivisionTargetR' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.DivisionTargetRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DistrictSalesR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.DistrictSalesRColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DistrictSalesR' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.DistrictSalesRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DistrictTargetR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.DistrictTargetRColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DistrictTargetR' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.DistrictTargetRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DivisionSales() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.DivisionSalesColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DivisionSales' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.DivisionSalesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DivisionTarget() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.DivisionTargetColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DivisionTarget' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.DivisionTargetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DistrictSales() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.DistrictSalesColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DistrictSales' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.DistrictSalesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DistrictTarget() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.DistrictTargetColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DistrictTarget' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.DistrictTargetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Above85() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.Above85Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Above85' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.Above85Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Above85Current() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.Above85CurrentColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Above85Current' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.Above85CurrentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Above85Previous() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableComIncRecover.Above85PreviousColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Above85Previous' in table 'ComIncRecover' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComIncRecover.Above85PreviousColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOriginalSalesNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.OriginalSalesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOriginalSalesNull()
            Me(Me.tableComIncRecover.OriginalSalesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOriginalTargetNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.OriginalTargetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOriginalTargetNull()
            Me(Me.tableComIncRecover.OriginalTargetColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdjustedSalesNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.AdjustedSalesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdjustedSalesNull()
            Me(Me.tableComIncRecover.AdjustedSalesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdjustedTargetNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.AdjustedTargetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdjustedTargetNull()
            Me(Me.tableComIncRecover.AdjustedTargetColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDivisionNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.DivisionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDivisionNull()
            Me(Me.tableComIncRecover.DivisionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDivisionPerformanceNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.DivisionPerformanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDivisionPerformanceNull()
            Me(Me.tableComIncRecover.DivisionPerformanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDistrictPerformanceNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.DistrictPerformanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDistrictPerformanceNull()
            Me(Me.tableComIncRecover.DistrictPerformanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBasicNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.BasicColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBasicNull()
            Me(Me.tableComIncRecover.BasicColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKeyProductNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.KeyProductColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKeyProductNull()
            Me(Me.tableComIncRecover.KeyProductColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKeyProductSalesNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.KeyProductSalesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKeyProductSalesNull()
            Me(Me.tableComIncRecover.KeyProductSalesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKeyProductTargetNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.KeyProductTargetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKeyProductTargetNull()
            Me(Me.tableComIncRecover.KeyProductTargetColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubKeyProductSalesNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.SubKeyProductSalesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubKeyProductSalesNull()
            Me(Me.tableComIncRecover.SubKeyProductSalesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubKeyProductTargetNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.SubKeyProductTargetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubKeyProductTargetNull()
            Me(Me.tableComIncRecover.SubKeyProductTargetColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExcessSalesNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.ExcessSalesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExcessSalesNull()
            Me(Me.tableComIncRecover.ExcessSalesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRepCountNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.RepCountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRepCountNull()
            Me(Me.tableComIncRecover.RepCountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQuadStormNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.QuadStormColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQuadStormNull()
            Me(Me.tableComIncRecover.QuadStormColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCallRateNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.CallRateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCallRateNull()
            Me(Me.tableComIncRecover.CallRateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTargetNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.TargetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTargetNull()
            Me(Me.tableComIncRecover.TargetColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSupCodeNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.SupCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSupCodeNull()
            Me(Me.tableComIncRecover.SupCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSupNameNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.SupNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSupNameNull()
            Me(Me.tableComIncRecover.SupNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMrCodeNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.MrCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMrCodeNull()
            Me(Me.tableComIncRecover.MrCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMrNameNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.MrNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMrNameNull()
            Me(Me.tableComIncRecover.MrNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCommissionDateNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.CommissionDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCommissionDateNull()
            Me(Me.tableComIncRecover.CommissionDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOriginalSalesRNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.OriginalSalesRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOriginalSalesRNull()
            Me(Me.tableComIncRecover.OriginalSalesRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOriginalTargetRNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.OriginalTargetRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOriginalTargetRNull()
            Me(Me.tableComIncRecover.OriginalTargetRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdjustedSalesRNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.AdjustedSalesRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdjustedSalesRNull()
            Me(Me.tableComIncRecover.AdjustedSalesRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdjustedTargetRNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.AdjustedTargetRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdjustedTargetRNull()
            Me(Me.tableComIncRecover.AdjustedTargetRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDivisionRNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.DivisionRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDivisionRNull()
            Me(Me.tableComIncRecover.DivisionRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDivisionPerformanceRNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.DivisionPerformanceRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDivisionPerformanceRNull()
            Me(Me.tableComIncRecover.DivisionPerformanceRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDistrictPerformanceRNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.DistrictPerformanceRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDistrictPerformanceRNull()
            Me(Me.tableComIncRecover.DistrictPerformanceRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBasicRNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.BasicRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBasicRNull()
            Me(Me.tableComIncRecover.BasicRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKeyProductRNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.KeyProductRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKeyProductRNull()
            Me(Me.tableComIncRecover.KeyProductRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKeyProductSalesRNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.KeyProductSalesRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKeyProductSalesRNull()
            Me(Me.tableComIncRecover.KeyProductSalesRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKeyProductTargetRNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.KeyProductTargetRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKeyProductTargetRNull()
            Me(Me.tableComIncRecover.KeyProductTargetRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubKeyProductSalesRNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.SubKeyProductSalesRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubKeyProductSalesRNull()
            Me(Me.tableComIncRecover.SubKeyProductSalesRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubKeyProductTargetRNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.SubKeyProductTargetRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubKeyProductTargetRNull()
            Me(Me.tableComIncRecover.SubKeyProductTargetRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExcessSalesRNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.ExcessSalesRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExcessSalesRNull()
            Me(Me.tableComIncRecover.ExcessSalesRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRepCountRNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.RepCountRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRepCountRNull()
            Me(Me.tableComIncRecover.RepCountRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQuadStormRNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.QuadStormRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQuadStormRNull()
            Me(Me.tableComIncRecover.QuadStormRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCallRateRNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.CallRateRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCallRateRNull()
            Me(Me.tableComIncRecover.CallRateRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTargetRNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.TargetRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTargetRNull()
            Me(Me.tableComIncRecover.TargetRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDivisionSalesRNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.DivisionSalesRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDivisionSalesRNull()
            Me(Me.tableComIncRecover.DivisionSalesRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDivisionTargetRNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.DivisionTargetRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDivisionTargetRNull()
            Me(Me.tableComIncRecover.DivisionTargetRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDistrictSalesRNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.DistrictSalesRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDistrictSalesRNull()
            Me(Me.tableComIncRecover.DistrictSalesRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDistrictTargetRNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.DistrictTargetRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDistrictTargetRNull()
            Me(Me.tableComIncRecover.DistrictTargetRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDivisionSalesNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.DivisionSalesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDivisionSalesNull()
            Me(Me.tableComIncRecover.DivisionSalesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDivisionTargetNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.DivisionTargetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDivisionTargetNull()
            Me(Me.tableComIncRecover.DivisionTargetColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDistrictSalesNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.DistrictSalesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDistrictSalesNull()
            Me(Me.tableComIncRecover.DistrictSalesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDistrictTargetNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.DistrictTargetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDistrictTargetNull()
            Me(Me.tableComIncRecover.DistrictTargetColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAbove85Null() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.Above85Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAbove85Null()
            Me(Me.tableComIncRecover.Above85Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAbove85CurrentNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.Above85CurrentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAbove85CurrentNull()
            Me(Me.tableComIncRecover.Above85CurrentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAbove85PreviousNull() As Boolean
            Return Me.IsNull(Me.tableComIncRecover.Above85PreviousColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAbove85PreviousNull()
            Me(Me.tableComIncRecover.Above85PreviousColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DSM_CommissionRow
        Inherits Global.System.Data.DataRow
        
        Private tableDSM_Commission As DSM_CommissionDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDSM_Commission = CType(Me.Table,DSM_CommissionDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property supcode() As String
            Get
                Try 
                    Return CType(Me(Me.tableDSM_Commission.supcodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'supcode' in table 'DSM_Commission' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSM_Commission.supcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property supname() As String
            Get
                Try 
                    Return CType(Me(Me.tableDSM_Commission.supnameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'supname' in table 'DSM_Commission' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSM_Commission.supnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OriginalSales() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDSM_Commission.OriginalSalesColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OriginalSales' in table 'DSM_Commission' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSM_Commission.OriginalSalesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OriginalTarget() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDSM_Commission.OriginalTargetColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OriginalTarget' in table 'DSM_Commission' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSM_Commission.OriginalTargetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AdjustedSales() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDSM_Commission.AdjustedSalesColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AdjustedSales' in table 'DSM_Commission' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSM_Commission.AdjustedSalesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AdjustedTarget() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDSM_Commission.AdjustedTargetColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AdjustedTarget' in table 'DSM_Commission' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSM_Commission.AdjustedTargetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KeyProductSales() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDSM_Commission.KeyProductSalesColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'KeyProductSales' in table 'DSM_Commission' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSM_Commission.KeyProductSalesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KeyProductTarget() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDSM_Commission.KeyProductTargetColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'KeyProductTarget' in table 'DSM_Commission' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSM_Commission.KeyProductTargetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubKeyProductSales() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDSM_Commission.SubKeyProductSalesColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubKeyProductSales' in table 'DSM_Commission' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSM_Commission.SubKeyProductSalesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubKeyProductTarget() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDSM_Commission.SubKeyProductTargetColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubKeyProductTarget' in table 'DSM_Commission' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSM_Commission.SubKeyProductTargetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OriginalSalesR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDSM_Commission.OriginalSalesRColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OriginalSalesR' in table 'DSM_Commission' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSM_Commission.OriginalSalesRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OriginalTargetR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDSM_Commission.OriginalTargetRColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OriginalTargetR' in table 'DSM_Commission' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSM_Commission.OriginalTargetRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AdjustedSalesR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDSM_Commission.AdjustedSalesRColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AdjustedSalesR' in table 'DSM_Commission' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSM_Commission.AdjustedSalesRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AdjustedTargetR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDSM_Commission.AdjustedTargetRColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AdjustedTargetR' in table 'DSM_Commission' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSM_Commission.AdjustedTargetRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KeyProductSalesR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDSM_Commission.KeyProductSalesRColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'KeyProductSalesR' in table 'DSM_Commission' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSM_Commission.KeyProductSalesRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KeyProductTargetR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDSM_Commission.KeyProductTargetRColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'KeyProductTargetR' in table 'DSM_Commission' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSM_Commission.KeyProductTargetRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubKeyProductSalesR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDSM_Commission.SubKeyProductSalesRColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubKeyProductSalesR' in table 'DSM_Commission' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSM_Commission.SubKeyProductSalesRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubKeyProductTargetR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDSM_Commission.SubKeyProductTargetRColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubKeyProductTargetR' in table 'DSM_Commission' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSM_Commission.SubKeyProductTargetRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DivisionSales() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDSM_Commission.DivisionSalesColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DivisionSales' in table 'DSM_Commission' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSM_Commission.DivisionSalesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DivisionTarget() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDSM_Commission.DivisionTargetColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DivisionTarget' in table 'DSM_Commission' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSM_Commission.DivisionTargetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DivisionSalesR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDSM_Commission.DivisionSalesRColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DivisionSalesR' in table 'DSM_Commission' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSM_Commission.DivisionSalesRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DivisionTargetR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDSM_Commission.DivisionTargetRColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DivisionTargetR' in table 'DSM_Commission' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSM_Commission.DivisionTargetRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RepCount() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDSM_Commission.RepCountColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RepCount' in table 'DSM_Commission' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSM_Commission.RepCountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RepCountR() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDSM_Commission.RepCountRColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RepCountR' in table 'DSM_Commission' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSM_Commission.RepCountRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Division() As String
            Get
                Try 
                    Return CType(Me(Me.tableDSM_Commission.DivisionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Division' in table 'DSM_Commission' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSM_Commission.DivisionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Column1() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDSM_Commission.Column1Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Column1' in table 'DSM_Commission' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSM_Commission.Column1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Above85() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDSM_Commission.Above85Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Above85' in table 'DSM_Commission' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSM_Commission.Above85Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Above85Current() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDSM_Commission.Above85CurrentColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Above85Current' in table 'DSM_Commission' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSM_Commission.Above85CurrentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Above85Previous() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDSM_Commission.Above85PreviousColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Above85Previous' in table 'DSM_Commission' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSM_Commission.Above85PreviousColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CallRate() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDSM_Commission.CallRateColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CallRate' in table 'DSM_Commission' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSM_Commission.CallRateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Target() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDSM_Commission.TargetColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Target' in table 'DSM_Commission' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSM_Commission.TargetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CallRateR() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDSM_Commission.CallRateRColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CallRateR' in table 'DSM_Commission' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSM_Commission.CallRateRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TargetR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDSM_Commission.TargetRColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TargetR' in table 'DSM_Commission' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSM_Commission.TargetRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssupcodeNull() As Boolean
            Return Me.IsNull(Me.tableDSM_Commission.supcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsupcodeNull()
            Me(Me.tableDSM_Commission.supcodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssupnameNull() As Boolean
            Return Me.IsNull(Me.tableDSM_Commission.supnameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsupnameNull()
            Me(Me.tableDSM_Commission.supnameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOriginalSalesNull() As Boolean
            Return Me.IsNull(Me.tableDSM_Commission.OriginalSalesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOriginalSalesNull()
            Me(Me.tableDSM_Commission.OriginalSalesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOriginalTargetNull() As Boolean
            Return Me.IsNull(Me.tableDSM_Commission.OriginalTargetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOriginalTargetNull()
            Me(Me.tableDSM_Commission.OriginalTargetColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdjustedSalesNull() As Boolean
            Return Me.IsNull(Me.tableDSM_Commission.AdjustedSalesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdjustedSalesNull()
            Me(Me.tableDSM_Commission.AdjustedSalesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdjustedTargetNull() As Boolean
            Return Me.IsNull(Me.tableDSM_Commission.AdjustedTargetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdjustedTargetNull()
            Me(Me.tableDSM_Commission.AdjustedTargetColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKeyProductSalesNull() As Boolean
            Return Me.IsNull(Me.tableDSM_Commission.KeyProductSalesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKeyProductSalesNull()
            Me(Me.tableDSM_Commission.KeyProductSalesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKeyProductTargetNull() As Boolean
            Return Me.IsNull(Me.tableDSM_Commission.KeyProductTargetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKeyProductTargetNull()
            Me(Me.tableDSM_Commission.KeyProductTargetColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubKeyProductSalesNull() As Boolean
            Return Me.IsNull(Me.tableDSM_Commission.SubKeyProductSalesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubKeyProductSalesNull()
            Me(Me.tableDSM_Commission.SubKeyProductSalesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubKeyProductTargetNull() As Boolean
            Return Me.IsNull(Me.tableDSM_Commission.SubKeyProductTargetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubKeyProductTargetNull()
            Me(Me.tableDSM_Commission.SubKeyProductTargetColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOriginalSalesRNull() As Boolean
            Return Me.IsNull(Me.tableDSM_Commission.OriginalSalesRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOriginalSalesRNull()
            Me(Me.tableDSM_Commission.OriginalSalesRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOriginalTargetRNull() As Boolean
            Return Me.IsNull(Me.tableDSM_Commission.OriginalTargetRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOriginalTargetRNull()
            Me(Me.tableDSM_Commission.OriginalTargetRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdjustedSalesRNull() As Boolean
            Return Me.IsNull(Me.tableDSM_Commission.AdjustedSalesRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdjustedSalesRNull()
            Me(Me.tableDSM_Commission.AdjustedSalesRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdjustedTargetRNull() As Boolean
            Return Me.IsNull(Me.tableDSM_Commission.AdjustedTargetRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdjustedTargetRNull()
            Me(Me.tableDSM_Commission.AdjustedTargetRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKeyProductSalesRNull() As Boolean
            Return Me.IsNull(Me.tableDSM_Commission.KeyProductSalesRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKeyProductSalesRNull()
            Me(Me.tableDSM_Commission.KeyProductSalesRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKeyProductTargetRNull() As Boolean
            Return Me.IsNull(Me.tableDSM_Commission.KeyProductTargetRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKeyProductTargetRNull()
            Me(Me.tableDSM_Commission.KeyProductTargetRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubKeyProductSalesRNull() As Boolean
            Return Me.IsNull(Me.tableDSM_Commission.SubKeyProductSalesRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubKeyProductSalesRNull()
            Me(Me.tableDSM_Commission.SubKeyProductSalesRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubKeyProductTargetRNull() As Boolean
            Return Me.IsNull(Me.tableDSM_Commission.SubKeyProductTargetRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubKeyProductTargetRNull()
            Me(Me.tableDSM_Commission.SubKeyProductTargetRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDivisionSalesNull() As Boolean
            Return Me.IsNull(Me.tableDSM_Commission.DivisionSalesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDivisionSalesNull()
            Me(Me.tableDSM_Commission.DivisionSalesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDivisionTargetNull() As Boolean
            Return Me.IsNull(Me.tableDSM_Commission.DivisionTargetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDivisionTargetNull()
            Me(Me.tableDSM_Commission.DivisionTargetColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDivisionSalesRNull() As Boolean
            Return Me.IsNull(Me.tableDSM_Commission.DivisionSalesRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDivisionSalesRNull()
            Me(Me.tableDSM_Commission.DivisionSalesRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDivisionTargetRNull() As Boolean
            Return Me.IsNull(Me.tableDSM_Commission.DivisionTargetRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDivisionTargetRNull()
            Me(Me.tableDSM_Commission.DivisionTargetRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRepCountNull() As Boolean
            Return Me.IsNull(Me.tableDSM_Commission.RepCountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRepCountNull()
            Me(Me.tableDSM_Commission.RepCountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRepCountRNull() As Boolean
            Return Me.IsNull(Me.tableDSM_Commission.RepCountRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRepCountRNull()
            Me(Me.tableDSM_Commission.RepCountRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDivisionNull() As Boolean
            Return Me.IsNull(Me.tableDSM_Commission.DivisionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDivisionNull()
            Me(Me.tableDSM_Commission.DivisionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsColumn1Null() As Boolean
            Return Me.IsNull(Me.tableDSM_Commission.Column1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetColumn1Null()
            Me(Me.tableDSM_Commission.Column1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAbove85Null() As Boolean
            Return Me.IsNull(Me.tableDSM_Commission.Above85Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAbove85Null()
            Me(Me.tableDSM_Commission.Above85Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAbove85CurrentNull() As Boolean
            Return Me.IsNull(Me.tableDSM_Commission.Above85CurrentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAbove85CurrentNull()
            Me(Me.tableDSM_Commission.Above85CurrentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAbove85PreviousNull() As Boolean
            Return Me.IsNull(Me.tableDSM_Commission.Above85PreviousColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAbove85PreviousNull()
            Me(Me.tableDSM_Commission.Above85PreviousColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCallRateNull() As Boolean
            Return Me.IsNull(Me.tableDSM_Commission.CallRateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCallRateNull()
            Me(Me.tableDSM_Commission.CallRateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTargetNull() As Boolean
            Return Me.IsNull(Me.tableDSM_Commission.TargetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTargetNull()
            Me(Me.tableDSM_Commission.TargetColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCallRateRNull() As Boolean
            Return Me.IsNull(Me.tableDSM_Commission.CallRateRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCallRateRNull()
            Me(Me.tableDSM_Commission.CallRateRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTargetRNull() As Boolean
            Return Me.IsNull(Me.tableDSM_Commission.TargetRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTargetRNull()
            Me(Me.tableDSM_Commission.TargetRColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MedrepCommission_DetailsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MedrepCommission_DetailsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MedrepCommission_DetailsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MedrepCommission_DetailsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Dsm_PmrDetailsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Dsm_PmrDetailsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Dsm_PmrDetailsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Dsm_PmrDetailsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ComIncRecoverRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ComIncRecoverRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ComIncRecoverRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ComIncRecoverRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DSM_CommissionRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DSM_CommissionRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DSM_CommissionRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DSM_CommissionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
