'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3053
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsMedrepCommission"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsMedrepCommission
    Inherits Global.System.Data.DataSet
    
    Private tableREPORT_MedrepCommission As REPORT_MedrepCommissionDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("REPORT_MedrepCommission")) Is Nothing) Then
                MyBase.Tables.Add(New REPORT_MedrepCommissionDataTable(ds.Tables("REPORT_MedrepCommission")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property REPORT_MedrepCommission() As REPORT_MedrepCommissionDataTable
        Get
            Return Me.tableREPORT_MedrepCommission
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsMedrepCommission = CType(MyBase.Clone,dsMedrepCommission)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("REPORT_MedrepCommission")) Is Nothing) Then
                MyBase.Tables.Add(New REPORT_MedrepCommissionDataTable(ds.Tables("REPORT_MedrepCommission")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableREPORT_MedrepCommission = CType(MyBase.Tables("REPORT_MedrepCommission"),REPORT_MedrepCommissionDataTable)
        If (initTable = true) Then
            If (Not (Me.tableREPORT_MedrepCommission) Is Nothing) Then
                Me.tableREPORT_MedrepCommission.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsMedrepCommission"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsMedrepCommission.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableREPORT_MedrepCommission = New REPORT_MedrepCommissionDataTable
        MyBase.Tables.Add(Me.tableREPORT_MedrepCommission)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeREPORT_MedrepCommission() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsMedrepCommission = New dsMedrepCommission
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub REPORT_MedrepCommissionRowChangeEventHandler(ByVal sender As Object, ByVal e As REPORT_MedrepCommissionRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class REPORT_MedrepCommissionDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnMrCode As Global.System.Data.DataColumn
        
        Private columnMrname As Global.System.Data.DataColumn
        
        Private columnSupCode As Global.System.Data.DataColumn
        
        Private columnSupName As Global.System.Data.DataColumn
        
        Private columnOriginalTarget As Global.System.Data.DataColumn
        
        Private columnOriginalSales As Global.System.Data.DataColumn
        
        Private columnOriginalPerformance As Global.System.Data.DataColumn
        
        Private columnAdjustedTarget As Global.System.Data.DataColumn
        
        Private columnAdjustedSales As Global.System.Data.DataColumn
        
        Private columnAdjustedPerformance As Global.System.Data.DataColumn
        
        Private columnCommissionDate As Global.System.Data.DataColumn
        
        Private columnMonthNum As Global.System.Data.DataColumn
        
        Private columnCu_OriginalTarget As Global.System.Data.DataColumn
        
        Private columnCu_OriginalSales As Global.System.Data.DataColumn
        
        Private columnCu_OriginalPerformance As Global.System.Data.DataColumn
        
        Private columnCu_AdjustedTarget As Global.System.Data.DataColumn
        
        Private columnCu_AdjustedSales As Global.System.Data.DataColumn
        
        Private columnCu_AdjustedPerformance As Global.System.Data.DataColumn
        
        Private columnCu_BasicIncentive As Global.System.Data.DataColumn
        
        Private columnCu_KeyProductIncentive As Global.System.Data.DataColumn
        
        Private columnCu_TotalIncentive As Global.System.Data.DataColumn
        
        Private columnCu_Monthnum As Global.System.Data.DataColumn
        
        Private columnExcessSales As Global.System.Data.DataColumn
        
        Private columnIncentiveShare As Global.System.Data.DataColumn
        
        Private columnRepCount As Global.System.Data.DataColumn
        
        Private columnPeriod As Global.System.Data.DataColumn
        
        Private columnoSales1 As Global.System.Data.DataColumn
        
        Private columnoSales2 As Global.System.Data.DataColumn
        
        Private columnoSales3 As Global.System.Data.DataColumn
        
        Private columnoTarget1 As Global.System.Data.DataColumn
        
        Private columnoTarget2 As Global.System.Data.DataColumn
        
        Private columnoTarget3 As Global.System.Data.DataColumn
        
        Private columnQuarter As Global.System.Data.DataColumn
        
        Private columnoRealization1 As Global.System.Data.DataColumn
        
        Private columnoRealization2 As Global.System.Data.DataColumn
        
        Private columnoRealization3 As Global.System.Data.DataColumn
        
        Private columnBasicRecovery As Global.System.Data.DataColumn
        
        Private columnQuadRecovery As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "REPORT_MedrepCommission"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MrCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMrCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MrnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMrname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SupCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SupNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OriginalTargetColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOriginalTarget
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OriginalSalesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOriginalSales
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OriginalPerformanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOriginalPerformance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdjustedTargetColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdjustedTarget
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdjustedSalesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdjustedSales
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdjustedPerformanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdjustedPerformance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CommissionDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCommissionDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MonthNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonthNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cu_OriginalTargetColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCu_OriginalTarget
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cu_OriginalSalesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCu_OriginalSales
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cu_OriginalPerformanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCu_OriginalPerformance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cu_AdjustedTargetColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCu_AdjustedTarget
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cu_AdjustedSalesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCu_AdjustedSales
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cu_AdjustedPerformanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCu_AdjustedPerformance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cu_BasicIncentiveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCu_BasicIncentive
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cu_KeyProductIncentiveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCu_KeyProductIncentive
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cu_TotalIncentiveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCu_TotalIncentive
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cu_MonthnumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCu_Monthnum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExcessSalesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExcessSales
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IncentiveShareColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIncentiveShare
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RepCountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRepCount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PeriodColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPeriod
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property oSales1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnoSales1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property oSales2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnoSales2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property oSales3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnoSales3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property oTarget1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnoTarget1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property oTarget2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnoTarget2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property oTarget3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnoTarget3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QuarterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuarter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property oRealization1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnoRealization1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property oRealization2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnoRealization2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property oRealization3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnoRealization3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BasicRecoveryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBasicRecovery
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QuadRecoveryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuadRecovery
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As REPORT_MedrepCommissionRow
            Get
                Return CType(Me.Rows(index),REPORT_MedrepCommissionRow)
            End Get
        End Property
        
        Public Event REPORT_MedrepCommissionRowChanging As REPORT_MedrepCommissionRowChangeEventHandler
        
        Public Event REPORT_MedrepCommissionRowChanged As REPORT_MedrepCommissionRowChangeEventHandler
        
        Public Event REPORT_MedrepCommissionRowDeleting As REPORT_MedrepCommissionRowChangeEventHandler
        
        Public Event REPORT_MedrepCommissionRowDeleted As REPORT_MedrepCommissionRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddREPORT_MedrepCommissionRow(ByVal row As REPORT_MedrepCommissionRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddREPORT_MedrepCommissionRow( _
                    ByVal MrCode As String,  _
                    ByVal Mrname As String,  _
                    ByVal SupCode As String,  _
                    ByVal SupName As String,  _
                    ByVal OriginalTarget As Decimal,  _
                    ByVal OriginalSales As Decimal,  _
                    ByVal OriginalPerformance As Decimal,  _
                    ByVal AdjustedTarget As Decimal,  _
                    ByVal AdjustedSales As Decimal,  _
                    ByVal AdjustedPerformance As Decimal,  _
                    ByVal CommissionDate As Date,  _
                    ByVal MonthNum As Decimal,  _
                    ByVal Cu_OriginalTarget As Decimal,  _
                    ByVal Cu_OriginalSales As Decimal,  _
                    ByVal Cu_OriginalPerformance As Decimal,  _
                    ByVal Cu_AdjustedTarget As Decimal,  _
                    ByVal Cu_AdjustedSales As Decimal,  _
                    ByVal Cu_AdjustedPerformance As Decimal,  _
                    ByVal Cu_BasicIncentive As Decimal,  _
                    ByVal Cu_KeyProductIncentive As Decimal,  _
                    ByVal Cu_TotalIncentive As Decimal,  _
                    ByVal Cu_Monthnum As Decimal,  _
                    ByVal ExcessSales As Decimal,  _
                    ByVal IncentiveShare As Decimal,  _
                    ByVal RepCount As Integer,  _
                    ByVal Period As String,  _
                    ByVal oSales1 As Decimal,  _
                    ByVal oSales2 As Decimal,  _
                    ByVal oSales3 As Decimal,  _
                    ByVal oTarget1 As Decimal,  _
                    ByVal oTarget2 As Decimal,  _
                    ByVal oTarget3 As Decimal,  _
                    ByVal Quarter As Integer,  _
                    ByVal oRealization1 As Decimal,  _
                    ByVal oRealization2 As Decimal,  _
                    ByVal oRealization3 As Decimal,  _
                    ByVal BasicRecovery As Decimal,  _
                    ByVal QuadRecovery As Decimal) As REPORT_MedrepCommissionRow
            Dim rowREPORT_MedrepCommissionRow As REPORT_MedrepCommissionRow = CType(Me.NewRow,REPORT_MedrepCommissionRow)
            Dim columnValuesArray() As Object = New Object() {MrCode, Mrname, SupCode, SupName, OriginalTarget, OriginalSales, OriginalPerformance, AdjustedTarget, AdjustedSales, AdjustedPerformance, CommissionDate, MonthNum, Cu_OriginalTarget, Cu_OriginalSales, Cu_OriginalPerformance, Cu_AdjustedTarget, Cu_AdjustedSales, Cu_AdjustedPerformance, Cu_BasicIncentive, Cu_KeyProductIncentive, Cu_TotalIncentive, Cu_Monthnum, ExcessSales, IncentiveShare, RepCount, Period, oSales1, oSales2, oSales3, oTarget1, oTarget2, oTarget3, Quarter, oRealization1, oRealization2, oRealization3, BasicRecovery, QuadRecovery}
            rowREPORT_MedrepCommissionRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowREPORT_MedrepCommissionRow)
            Return rowREPORT_MedrepCommissionRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As REPORT_MedrepCommissionDataTable = CType(MyBase.Clone,REPORT_MedrepCommissionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New REPORT_MedrepCommissionDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMrCode = MyBase.Columns("MrCode")
            Me.columnMrname = MyBase.Columns("Mrname")
            Me.columnSupCode = MyBase.Columns("SupCode")
            Me.columnSupName = MyBase.Columns("SupName")
            Me.columnOriginalTarget = MyBase.Columns("OriginalTarget")
            Me.columnOriginalSales = MyBase.Columns("OriginalSales")
            Me.columnOriginalPerformance = MyBase.Columns("OriginalPerformance")
            Me.columnAdjustedTarget = MyBase.Columns("AdjustedTarget")
            Me.columnAdjustedSales = MyBase.Columns("AdjustedSales")
            Me.columnAdjustedPerformance = MyBase.Columns("AdjustedPerformance")
            Me.columnCommissionDate = MyBase.Columns("CommissionDate")
            Me.columnMonthNum = MyBase.Columns("MonthNum")
            Me.columnCu_OriginalTarget = MyBase.Columns("Cu_OriginalTarget")
            Me.columnCu_OriginalSales = MyBase.Columns("Cu_OriginalSales")
            Me.columnCu_OriginalPerformance = MyBase.Columns("Cu_OriginalPerformance")
            Me.columnCu_AdjustedTarget = MyBase.Columns("Cu_AdjustedTarget")
            Me.columnCu_AdjustedSales = MyBase.Columns("Cu_AdjustedSales")
            Me.columnCu_AdjustedPerformance = MyBase.Columns("Cu_AdjustedPerformance")
            Me.columnCu_BasicIncentive = MyBase.Columns("Cu_BasicIncentive")
            Me.columnCu_KeyProductIncentive = MyBase.Columns("Cu_KeyProductIncentive")
            Me.columnCu_TotalIncentive = MyBase.Columns("Cu_TotalIncentive")
            Me.columnCu_Monthnum = MyBase.Columns("Cu_Monthnum")
            Me.columnExcessSales = MyBase.Columns("ExcessSales")
            Me.columnIncentiveShare = MyBase.Columns("IncentiveShare")
            Me.columnRepCount = MyBase.Columns("RepCount")
            Me.columnPeriod = MyBase.Columns("Period")
            Me.columnoSales1 = MyBase.Columns("oSales1")
            Me.columnoSales2 = MyBase.Columns("oSales2")
            Me.columnoSales3 = MyBase.Columns("oSales3")
            Me.columnoTarget1 = MyBase.Columns("oTarget1")
            Me.columnoTarget2 = MyBase.Columns("oTarget2")
            Me.columnoTarget3 = MyBase.Columns("oTarget3")
            Me.columnQuarter = MyBase.Columns("Quarter")
            Me.columnoRealization1 = MyBase.Columns("oRealization1")
            Me.columnoRealization2 = MyBase.Columns("oRealization2")
            Me.columnoRealization3 = MyBase.Columns("oRealization3")
            Me.columnBasicRecovery = MyBase.Columns("BasicRecovery")
            Me.columnQuadRecovery = MyBase.Columns("QuadRecovery")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMrCode = New Global.System.Data.DataColumn("MrCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMrCode)
            Me.columnMrname = New Global.System.Data.DataColumn("Mrname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMrname)
            Me.columnSupCode = New Global.System.Data.DataColumn("SupCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupCode)
            Me.columnSupName = New Global.System.Data.DataColumn("SupName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupName)
            Me.columnOriginalTarget = New Global.System.Data.DataColumn("OriginalTarget", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOriginalTarget)
            Me.columnOriginalSales = New Global.System.Data.DataColumn("OriginalSales", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOriginalSales)
            Me.columnOriginalPerformance = New Global.System.Data.DataColumn("OriginalPerformance", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOriginalPerformance)
            Me.columnAdjustedTarget = New Global.System.Data.DataColumn("AdjustedTarget", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdjustedTarget)
            Me.columnAdjustedSales = New Global.System.Data.DataColumn("AdjustedSales", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdjustedSales)
            Me.columnAdjustedPerformance = New Global.System.Data.DataColumn("AdjustedPerformance", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdjustedPerformance)
            Me.columnCommissionDate = New Global.System.Data.DataColumn("CommissionDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCommissionDate)
            Me.columnMonthNum = New Global.System.Data.DataColumn("MonthNum", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonthNum)
            Me.columnCu_OriginalTarget = New Global.System.Data.DataColumn("Cu_OriginalTarget", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCu_OriginalTarget)
            Me.columnCu_OriginalSales = New Global.System.Data.DataColumn("Cu_OriginalSales", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCu_OriginalSales)
            Me.columnCu_OriginalPerformance = New Global.System.Data.DataColumn("Cu_OriginalPerformance", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCu_OriginalPerformance)
            Me.columnCu_AdjustedTarget = New Global.System.Data.DataColumn("Cu_AdjustedTarget", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCu_AdjustedTarget)
            Me.columnCu_AdjustedSales = New Global.System.Data.DataColumn("Cu_AdjustedSales", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCu_AdjustedSales)
            Me.columnCu_AdjustedPerformance = New Global.System.Data.DataColumn("Cu_AdjustedPerformance", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCu_AdjustedPerformance)
            Me.columnCu_BasicIncentive = New Global.System.Data.DataColumn("Cu_BasicIncentive", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCu_BasicIncentive)
            Me.columnCu_KeyProductIncentive = New Global.System.Data.DataColumn("Cu_KeyProductIncentive", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCu_KeyProductIncentive)
            Me.columnCu_TotalIncentive = New Global.System.Data.DataColumn("Cu_TotalIncentive", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCu_TotalIncentive)
            Me.columnCu_Monthnum = New Global.System.Data.DataColumn("Cu_Monthnum", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCu_Monthnum)
            Me.columnExcessSales = New Global.System.Data.DataColumn("ExcessSales", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExcessSales)
            Me.columnIncentiveShare = New Global.System.Data.DataColumn("IncentiveShare", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIncentiveShare)
            Me.columnRepCount = New Global.System.Data.DataColumn("RepCount", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRepCount)
            Me.columnPeriod = New Global.System.Data.DataColumn("Period", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPeriod)
            Me.columnoSales1 = New Global.System.Data.DataColumn("oSales1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnoSales1)
            Me.columnoSales2 = New Global.System.Data.DataColumn("oSales2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnoSales2)
            Me.columnoSales3 = New Global.System.Data.DataColumn("oSales3", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnoSales3)
            Me.columnoTarget1 = New Global.System.Data.DataColumn("oTarget1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnoTarget1)
            Me.columnoTarget2 = New Global.System.Data.DataColumn("oTarget2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnoTarget2)
            Me.columnoTarget3 = New Global.System.Data.DataColumn("oTarget3", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnoTarget3)
            Me.columnQuarter = New Global.System.Data.DataColumn("Quarter", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuarter)
            Me.columnoRealization1 = New Global.System.Data.DataColumn("oRealization1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnoRealization1)
            Me.columnoRealization2 = New Global.System.Data.DataColumn("oRealization2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnoRealization2)
            Me.columnoRealization3 = New Global.System.Data.DataColumn("oRealization3", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnoRealization3)
            Me.columnBasicRecovery = New Global.System.Data.DataColumn("BasicRecovery", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBasicRecovery)
            Me.columnQuadRecovery = New Global.System.Data.DataColumn("QuadRecovery", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuadRecovery)
            Me.columnCu_OriginalTarget.ReadOnly = true
            Me.columnCu_OriginalSales.ReadOnly = true
            Me.columnCu_OriginalPerformance.ReadOnly = true
            Me.columnCu_AdjustedTarget.ReadOnly = true
            Me.columnCu_AdjustedSales.ReadOnly = true
            Me.columnCu_AdjustedPerformance.ReadOnly = true
            Me.columnCu_BasicIncentive.ReadOnly = true
            Me.columnCu_KeyProductIncentive.ReadOnly = true
            Me.columnCu_TotalIncentive.ReadOnly = true
            Me.columnCu_Monthnum.ReadOnly = true
            Me.columnPeriod.ReadOnly = true
            Me.columnoSales1.ReadOnly = true
            Me.columnoSales2.ReadOnly = true
            Me.columnoSales3.ReadOnly = true
            Me.columnoTarget1.ReadOnly = true
            Me.columnoTarget2.ReadOnly = true
            Me.columnoTarget3.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewREPORT_MedrepCommissionRow() As REPORT_MedrepCommissionRow
            Return CType(Me.NewRow,REPORT_MedrepCommissionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New REPORT_MedrepCommissionRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(REPORT_MedrepCommissionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.REPORT_MedrepCommissionRowChangedEvent) Is Nothing) Then
                RaiseEvent REPORT_MedrepCommissionRowChanged(Me, New REPORT_MedrepCommissionRowChangeEvent(CType(e.Row,REPORT_MedrepCommissionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.REPORT_MedrepCommissionRowChangingEvent) Is Nothing) Then
                RaiseEvent REPORT_MedrepCommissionRowChanging(Me, New REPORT_MedrepCommissionRowChangeEvent(CType(e.Row,REPORT_MedrepCommissionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.REPORT_MedrepCommissionRowDeletedEvent) Is Nothing) Then
                RaiseEvent REPORT_MedrepCommissionRowDeleted(Me, New REPORT_MedrepCommissionRowChangeEvent(CType(e.Row,REPORT_MedrepCommissionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.REPORT_MedrepCommissionRowDeletingEvent) Is Nothing) Then
                RaiseEvent REPORT_MedrepCommissionRowDeleting(Me, New REPORT_MedrepCommissionRowChangeEvent(CType(e.Row,REPORT_MedrepCommissionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveREPORT_MedrepCommissionRow(ByVal row As REPORT_MedrepCommissionRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsMedrepCommission = New dsMedrepCommission
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "REPORT_MedrepCommissionDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class REPORT_MedrepCommissionRow
        Inherits Global.System.Data.DataRow
        
        Private tableREPORT_MedrepCommission As REPORT_MedrepCommissionDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableREPORT_MedrepCommission = CType(Me.Table,REPORT_MedrepCommissionDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MrCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORT_MedrepCommission.MrCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MrCode' in table 'REPORT_MedrepCommission' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORT_MedrepCommission.MrCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mrname() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORT_MedrepCommission.MrnameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Mrname' in table 'REPORT_MedrepCommission' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORT_MedrepCommission.MrnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SupCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORT_MedrepCommission.SupCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SupCode' in table 'REPORT_MedrepCommission' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORT_MedrepCommission.SupCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SupName() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORT_MedrepCommission.SupNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SupName' in table 'REPORT_MedrepCommission' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORT_MedrepCommission.SupNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OriginalTarget() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORT_MedrepCommission.OriginalTargetColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OriginalTarget' in table 'REPORT_MedrepCommission' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORT_MedrepCommission.OriginalTargetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OriginalSales() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORT_MedrepCommission.OriginalSalesColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OriginalSales' in table 'REPORT_MedrepCommission' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORT_MedrepCommission.OriginalSalesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OriginalPerformance() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORT_MedrepCommission.OriginalPerformanceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OriginalPerformance' in table 'REPORT_MedrepCommission' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORT_MedrepCommission.OriginalPerformanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AdjustedTarget() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORT_MedrepCommission.AdjustedTargetColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AdjustedTarget' in table 'REPORT_MedrepCommission' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORT_MedrepCommission.AdjustedTargetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AdjustedSales() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORT_MedrepCommission.AdjustedSalesColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AdjustedSales' in table 'REPORT_MedrepCommission' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORT_MedrepCommission.AdjustedSalesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AdjustedPerformance() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORT_MedrepCommission.AdjustedPerformanceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AdjustedPerformance' in table 'REPORT_MedrepCommission' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORT_MedrepCommission.AdjustedPerformanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CommissionDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableREPORT_MedrepCommission.CommissionDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CommissionDate' in table 'REPORT_MedrepCommission' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORT_MedrepCommission.CommissionDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MonthNum() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORT_MedrepCommission.MonthNumColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MonthNum' in table 'REPORT_MedrepCommission' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORT_MedrepCommission.MonthNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cu_OriginalTarget() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORT_MedrepCommission.Cu_OriginalTargetColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cu_OriginalTarget' in table 'REPORT_MedrepCommission' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORT_MedrepCommission.Cu_OriginalTargetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cu_OriginalSales() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORT_MedrepCommission.Cu_OriginalSalesColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cu_OriginalSales' in table 'REPORT_MedrepCommission' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORT_MedrepCommission.Cu_OriginalSalesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cu_OriginalPerformance() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORT_MedrepCommission.Cu_OriginalPerformanceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cu_OriginalPerformance' in table 'REPORT_MedrepCommission' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORT_MedrepCommission.Cu_OriginalPerformanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cu_AdjustedTarget() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORT_MedrepCommission.Cu_AdjustedTargetColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cu_AdjustedTarget' in table 'REPORT_MedrepCommission' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORT_MedrepCommission.Cu_AdjustedTargetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cu_AdjustedSales() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORT_MedrepCommission.Cu_AdjustedSalesColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cu_AdjustedSales' in table 'REPORT_MedrepCommission' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORT_MedrepCommission.Cu_AdjustedSalesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cu_AdjustedPerformance() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORT_MedrepCommission.Cu_AdjustedPerformanceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cu_AdjustedPerformance' in table 'REPORT_MedrepCommission' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORT_MedrepCommission.Cu_AdjustedPerformanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cu_BasicIncentive() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORT_MedrepCommission.Cu_BasicIncentiveColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cu_BasicIncentive' in table 'REPORT_MedrepCommission' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORT_MedrepCommission.Cu_BasicIncentiveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cu_KeyProductIncentive() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORT_MedrepCommission.Cu_KeyProductIncentiveColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cu_KeyProductIncentive' in table 'REPORT_MedrepCommission' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORT_MedrepCommission.Cu_KeyProductIncentiveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cu_TotalIncentive() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORT_MedrepCommission.Cu_TotalIncentiveColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cu_TotalIncentive' in table 'REPORT_MedrepCommission' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORT_MedrepCommission.Cu_TotalIncentiveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cu_Monthnum() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORT_MedrepCommission.Cu_MonthnumColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cu_Monthnum' in table 'REPORT_MedrepCommission' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORT_MedrepCommission.Cu_MonthnumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ExcessSales() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORT_MedrepCommission.ExcessSalesColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ExcessSales' in table 'REPORT_MedrepCommission' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORT_MedrepCommission.ExcessSalesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IncentiveShare() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORT_MedrepCommission.IncentiveShareColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IncentiveShare' in table 'REPORT_MedrepCommission' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORT_MedrepCommission.IncentiveShareColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RepCount() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableREPORT_MedrepCommission.RepCountColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RepCount' in table 'REPORT_MedrepCommission' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORT_MedrepCommission.RepCountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Period() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORT_MedrepCommission.PeriodColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Period' in table 'REPORT_MedrepCommission' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORT_MedrepCommission.PeriodColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property oSales1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORT_MedrepCommission.oSales1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'oSales1' in table 'REPORT_MedrepCommission' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORT_MedrepCommission.oSales1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property oSales2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORT_MedrepCommission.oSales2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'oSales2' in table 'REPORT_MedrepCommission' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORT_MedrepCommission.oSales2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property oSales3() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORT_MedrepCommission.oSales3Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'oSales3' in table 'REPORT_MedrepCommission' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORT_MedrepCommission.oSales3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property oTarget1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORT_MedrepCommission.oTarget1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'oTarget1' in table 'REPORT_MedrepCommission' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORT_MedrepCommission.oTarget1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property oTarget2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORT_MedrepCommission.oTarget2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'oTarget2' in table 'REPORT_MedrepCommission' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORT_MedrepCommission.oTarget2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property oTarget3() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORT_MedrepCommission.oTarget3Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'oTarget3' in table 'REPORT_MedrepCommission' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORT_MedrepCommission.oTarget3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Quarter() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableREPORT_MedrepCommission.QuarterColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Quarter' in table 'REPORT_MedrepCommission' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORT_MedrepCommission.QuarterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property oRealization1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORT_MedrepCommission.oRealization1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'oRealization1' in table 'REPORT_MedrepCommission' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORT_MedrepCommission.oRealization1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property oRealization2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORT_MedrepCommission.oRealization2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'oRealization2' in table 'REPORT_MedrepCommission' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORT_MedrepCommission.oRealization2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property oRealization3() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORT_MedrepCommission.oRealization3Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'oRealization3' in table 'REPORT_MedrepCommission' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORT_MedrepCommission.oRealization3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BasicRecovery() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORT_MedrepCommission.BasicRecoveryColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BasicRecovery' in table 'REPORT_MedrepCommission' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORT_MedrepCommission.BasicRecoveryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QuadRecovery() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORT_MedrepCommission.QuadRecoveryColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QuadRecovery' in table 'REPORT_MedrepCommission' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORT_MedrepCommission.QuadRecoveryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMrCodeNull() As Boolean
            Return Me.IsNull(Me.tableREPORT_MedrepCommission.MrCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMrCodeNull()
            Me(Me.tableREPORT_MedrepCommission.MrCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMrnameNull() As Boolean
            Return Me.IsNull(Me.tableREPORT_MedrepCommission.MrnameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMrnameNull()
            Me(Me.tableREPORT_MedrepCommission.MrnameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSupCodeNull() As Boolean
            Return Me.IsNull(Me.tableREPORT_MedrepCommission.SupCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSupCodeNull()
            Me(Me.tableREPORT_MedrepCommission.SupCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSupNameNull() As Boolean
            Return Me.IsNull(Me.tableREPORT_MedrepCommission.SupNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSupNameNull()
            Me(Me.tableREPORT_MedrepCommission.SupNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOriginalTargetNull() As Boolean
            Return Me.IsNull(Me.tableREPORT_MedrepCommission.OriginalTargetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOriginalTargetNull()
            Me(Me.tableREPORT_MedrepCommission.OriginalTargetColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOriginalSalesNull() As Boolean
            Return Me.IsNull(Me.tableREPORT_MedrepCommission.OriginalSalesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOriginalSalesNull()
            Me(Me.tableREPORT_MedrepCommission.OriginalSalesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOriginalPerformanceNull() As Boolean
            Return Me.IsNull(Me.tableREPORT_MedrepCommission.OriginalPerformanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOriginalPerformanceNull()
            Me(Me.tableREPORT_MedrepCommission.OriginalPerformanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdjustedTargetNull() As Boolean
            Return Me.IsNull(Me.tableREPORT_MedrepCommission.AdjustedTargetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdjustedTargetNull()
            Me(Me.tableREPORT_MedrepCommission.AdjustedTargetColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdjustedSalesNull() As Boolean
            Return Me.IsNull(Me.tableREPORT_MedrepCommission.AdjustedSalesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdjustedSalesNull()
            Me(Me.tableREPORT_MedrepCommission.AdjustedSalesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdjustedPerformanceNull() As Boolean
            Return Me.IsNull(Me.tableREPORT_MedrepCommission.AdjustedPerformanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdjustedPerformanceNull()
            Me(Me.tableREPORT_MedrepCommission.AdjustedPerformanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCommissionDateNull() As Boolean
            Return Me.IsNull(Me.tableREPORT_MedrepCommission.CommissionDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCommissionDateNull()
            Me(Me.tableREPORT_MedrepCommission.CommissionDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMonthNumNull() As Boolean
            Return Me.IsNull(Me.tableREPORT_MedrepCommission.MonthNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMonthNumNull()
            Me(Me.tableREPORT_MedrepCommission.MonthNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCu_OriginalTargetNull() As Boolean
            Return Me.IsNull(Me.tableREPORT_MedrepCommission.Cu_OriginalTargetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCu_OriginalTargetNull()
            Me(Me.tableREPORT_MedrepCommission.Cu_OriginalTargetColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCu_OriginalSalesNull() As Boolean
            Return Me.IsNull(Me.tableREPORT_MedrepCommission.Cu_OriginalSalesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCu_OriginalSalesNull()
            Me(Me.tableREPORT_MedrepCommission.Cu_OriginalSalesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCu_OriginalPerformanceNull() As Boolean
            Return Me.IsNull(Me.tableREPORT_MedrepCommission.Cu_OriginalPerformanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCu_OriginalPerformanceNull()
            Me(Me.tableREPORT_MedrepCommission.Cu_OriginalPerformanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCu_AdjustedTargetNull() As Boolean
            Return Me.IsNull(Me.tableREPORT_MedrepCommission.Cu_AdjustedTargetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCu_AdjustedTargetNull()
            Me(Me.tableREPORT_MedrepCommission.Cu_AdjustedTargetColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCu_AdjustedSalesNull() As Boolean
            Return Me.IsNull(Me.tableREPORT_MedrepCommission.Cu_AdjustedSalesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCu_AdjustedSalesNull()
            Me(Me.tableREPORT_MedrepCommission.Cu_AdjustedSalesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCu_AdjustedPerformanceNull() As Boolean
            Return Me.IsNull(Me.tableREPORT_MedrepCommission.Cu_AdjustedPerformanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCu_AdjustedPerformanceNull()
            Me(Me.tableREPORT_MedrepCommission.Cu_AdjustedPerformanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCu_BasicIncentiveNull() As Boolean
            Return Me.IsNull(Me.tableREPORT_MedrepCommission.Cu_BasicIncentiveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCu_BasicIncentiveNull()
            Me(Me.tableREPORT_MedrepCommission.Cu_BasicIncentiveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCu_KeyProductIncentiveNull() As Boolean
            Return Me.IsNull(Me.tableREPORT_MedrepCommission.Cu_KeyProductIncentiveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCu_KeyProductIncentiveNull()
            Me(Me.tableREPORT_MedrepCommission.Cu_KeyProductIncentiveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCu_TotalIncentiveNull() As Boolean
            Return Me.IsNull(Me.tableREPORT_MedrepCommission.Cu_TotalIncentiveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCu_TotalIncentiveNull()
            Me(Me.tableREPORT_MedrepCommission.Cu_TotalIncentiveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCu_MonthnumNull() As Boolean
            Return Me.IsNull(Me.tableREPORT_MedrepCommission.Cu_MonthnumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCu_MonthnumNull()
            Me(Me.tableREPORT_MedrepCommission.Cu_MonthnumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExcessSalesNull() As Boolean
            Return Me.IsNull(Me.tableREPORT_MedrepCommission.ExcessSalesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExcessSalesNull()
            Me(Me.tableREPORT_MedrepCommission.ExcessSalesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIncentiveShareNull() As Boolean
            Return Me.IsNull(Me.tableREPORT_MedrepCommission.IncentiveShareColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIncentiveShareNull()
            Me(Me.tableREPORT_MedrepCommission.IncentiveShareColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRepCountNull() As Boolean
            Return Me.IsNull(Me.tableREPORT_MedrepCommission.RepCountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRepCountNull()
            Me(Me.tableREPORT_MedrepCommission.RepCountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPeriodNull() As Boolean
            Return Me.IsNull(Me.tableREPORT_MedrepCommission.PeriodColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPeriodNull()
            Me(Me.tableREPORT_MedrepCommission.PeriodColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsoSales1Null() As Boolean
            Return Me.IsNull(Me.tableREPORT_MedrepCommission.oSales1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetoSales1Null()
            Me(Me.tableREPORT_MedrepCommission.oSales1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsoSales2Null() As Boolean
            Return Me.IsNull(Me.tableREPORT_MedrepCommission.oSales2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetoSales2Null()
            Me(Me.tableREPORT_MedrepCommission.oSales2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsoSales3Null() As Boolean
            Return Me.IsNull(Me.tableREPORT_MedrepCommission.oSales3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetoSales3Null()
            Me(Me.tableREPORT_MedrepCommission.oSales3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsoTarget1Null() As Boolean
            Return Me.IsNull(Me.tableREPORT_MedrepCommission.oTarget1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetoTarget1Null()
            Me(Me.tableREPORT_MedrepCommission.oTarget1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsoTarget2Null() As Boolean
            Return Me.IsNull(Me.tableREPORT_MedrepCommission.oTarget2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetoTarget2Null()
            Me(Me.tableREPORT_MedrepCommission.oTarget2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsoTarget3Null() As Boolean
            Return Me.IsNull(Me.tableREPORT_MedrepCommission.oTarget3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetoTarget3Null()
            Me(Me.tableREPORT_MedrepCommission.oTarget3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQuarterNull() As Boolean
            Return Me.IsNull(Me.tableREPORT_MedrepCommission.QuarterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQuarterNull()
            Me(Me.tableREPORT_MedrepCommission.QuarterColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsoRealization1Null() As Boolean
            Return Me.IsNull(Me.tableREPORT_MedrepCommission.oRealization1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetoRealization1Null()
            Me(Me.tableREPORT_MedrepCommission.oRealization1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsoRealization2Null() As Boolean
            Return Me.IsNull(Me.tableREPORT_MedrepCommission.oRealization2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetoRealization2Null()
            Me(Me.tableREPORT_MedrepCommission.oRealization2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsoRealization3Null() As Boolean
            Return Me.IsNull(Me.tableREPORT_MedrepCommission.oRealization3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetoRealization3Null()
            Me(Me.tableREPORT_MedrepCommission.oRealization3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBasicRecoveryNull() As Boolean
            Return Me.IsNull(Me.tableREPORT_MedrepCommission.BasicRecoveryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBasicRecoveryNull()
            Me(Me.tableREPORT_MedrepCommission.BasicRecoveryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQuadRecoveryNull() As Boolean
            Return Me.IsNull(Me.tableREPORT_MedrepCommission.QuadRecoveryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQuadRecoveryNull()
            Me(Me.tableREPORT_MedrepCommission.QuadRecoveryColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class REPORT_MedrepCommissionRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As REPORT_MedrepCommissionRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As REPORT_MedrepCommissionRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As REPORT_MedrepCommissionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
