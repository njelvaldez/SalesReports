'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3655
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsQpi_AreaAssign"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsQpi_AreaAssign
    Inherits Global.System.Data.DataSet
    
    Private tableQpiAreaAssign_MedrepShow As QpiAreaAssign_MedrepShowDataTable
    
    Private tableQpiAreaAssign_TerritoryShow As QpiAreaAssign_TerritoryShowDataTable
    
    Private tableQpiAreaAssign_TableShow As QpiAreaAssign_TableShowDataTable
    
    Private tableQpiAreaAssign_MedrepShow1 As QpiAreaAssign_MedrepShow1DataTable
    
    Private tableQpiAreaAssign_TerritoryShow1 As QpiAreaAssign_TerritoryShow1DataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("QpiAreaAssign_MedrepShow")) Is Nothing) Then
                MyBase.Tables.Add(New QpiAreaAssign_MedrepShowDataTable(ds.Tables("QpiAreaAssign_MedrepShow")))
            End If
            If (Not (ds.Tables("QpiAreaAssign_TerritoryShow")) Is Nothing) Then
                MyBase.Tables.Add(New QpiAreaAssign_TerritoryShowDataTable(ds.Tables("QpiAreaAssign_TerritoryShow")))
            End If
            If (Not (ds.Tables("QpiAreaAssign_TableShow")) Is Nothing) Then
                MyBase.Tables.Add(New QpiAreaAssign_TableShowDataTable(ds.Tables("QpiAreaAssign_TableShow")))
            End If
            If (Not (ds.Tables("QpiAreaAssign_MedrepShow1")) Is Nothing) Then
                MyBase.Tables.Add(New QpiAreaAssign_MedrepShow1DataTable(ds.Tables("QpiAreaAssign_MedrepShow1")))
            End If
            If (Not (ds.Tables("QpiAreaAssign_TerritoryShow1")) Is Nothing) Then
                MyBase.Tables.Add(New QpiAreaAssign_TerritoryShow1DataTable(ds.Tables("QpiAreaAssign_TerritoryShow1")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property QpiAreaAssign_MedrepShow() As QpiAreaAssign_MedrepShowDataTable
        Get
            Return Me.tableQpiAreaAssign_MedrepShow
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property QpiAreaAssign_TerritoryShow() As QpiAreaAssign_TerritoryShowDataTable
        Get
            Return Me.tableQpiAreaAssign_TerritoryShow
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property QpiAreaAssign_TableShow() As QpiAreaAssign_TableShowDataTable
        Get
            Return Me.tableQpiAreaAssign_TableShow
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property QpiAreaAssign_MedrepShow1() As QpiAreaAssign_MedrepShow1DataTable
        Get
            Return Me.tableQpiAreaAssign_MedrepShow1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property QpiAreaAssign_TerritoryShow1() As QpiAreaAssign_TerritoryShow1DataTable
        Get
            Return Me.tableQpiAreaAssign_TerritoryShow1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsQpi_AreaAssign = CType(MyBase.Clone,dsQpi_AreaAssign)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("QpiAreaAssign_MedrepShow")) Is Nothing) Then
                MyBase.Tables.Add(New QpiAreaAssign_MedrepShowDataTable(ds.Tables("QpiAreaAssign_MedrepShow")))
            End If
            If (Not (ds.Tables("QpiAreaAssign_TerritoryShow")) Is Nothing) Then
                MyBase.Tables.Add(New QpiAreaAssign_TerritoryShowDataTable(ds.Tables("QpiAreaAssign_TerritoryShow")))
            End If
            If (Not (ds.Tables("QpiAreaAssign_TableShow")) Is Nothing) Then
                MyBase.Tables.Add(New QpiAreaAssign_TableShowDataTable(ds.Tables("QpiAreaAssign_TableShow")))
            End If
            If (Not (ds.Tables("QpiAreaAssign_MedrepShow1")) Is Nothing) Then
                MyBase.Tables.Add(New QpiAreaAssign_MedrepShow1DataTable(ds.Tables("QpiAreaAssign_MedrepShow1")))
            End If
            If (Not (ds.Tables("QpiAreaAssign_TerritoryShow1")) Is Nothing) Then
                MyBase.Tables.Add(New QpiAreaAssign_TerritoryShow1DataTable(ds.Tables("QpiAreaAssign_TerritoryShow1")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableQpiAreaAssign_MedrepShow = CType(MyBase.Tables("QpiAreaAssign_MedrepShow"),QpiAreaAssign_MedrepShowDataTable)
        If (initTable = true) Then
            If (Not (Me.tableQpiAreaAssign_MedrepShow) Is Nothing) Then
                Me.tableQpiAreaAssign_MedrepShow.InitVars
            End If
        End If
        Me.tableQpiAreaAssign_TerritoryShow = CType(MyBase.Tables("QpiAreaAssign_TerritoryShow"),QpiAreaAssign_TerritoryShowDataTable)
        If (initTable = true) Then
            If (Not (Me.tableQpiAreaAssign_TerritoryShow) Is Nothing) Then
                Me.tableQpiAreaAssign_TerritoryShow.InitVars
            End If
        End If
        Me.tableQpiAreaAssign_TableShow = CType(MyBase.Tables("QpiAreaAssign_TableShow"),QpiAreaAssign_TableShowDataTable)
        If (initTable = true) Then
            If (Not (Me.tableQpiAreaAssign_TableShow) Is Nothing) Then
                Me.tableQpiAreaAssign_TableShow.InitVars
            End If
        End If
        Me.tableQpiAreaAssign_MedrepShow1 = CType(MyBase.Tables("QpiAreaAssign_MedrepShow1"),QpiAreaAssign_MedrepShow1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableQpiAreaAssign_MedrepShow1) Is Nothing) Then
                Me.tableQpiAreaAssign_MedrepShow1.InitVars
            End If
        End If
        Me.tableQpiAreaAssign_TerritoryShow1 = CType(MyBase.Tables("QpiAreaAssign_TerritoryShow1"),QpiAreaAssign_TerritoryShow1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableQpiAreaAssign_TerritoryShow1) Is Nothing) Then
                Me.tableQpiAreaAssign_TerritoryShow1.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsQpi_AreaAssign"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsQpi_AreaAssign.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableQpiAreaAssign_MedrepShow = New QpiAreaAssign_MedrepShowDataTable
        MyBase.Tables.Add(Me.tableQpiAreaAssign_MedrepShow)
        Me.tableQpiAreaAssign_TerritoryShow = New QpiAreaAssign_TerritoryShowDataTable
        MyBase.Tables.Add(Me.tableQpiAreaAssign_TerritoryShow)
        Me.tableQpiAreaAssign_TableShow = New QpiAreaAssign_TableShowDataTable
        MyBase.Tables.Add(Me.tableQpiAreaAssign_TableShow)
        Me.tableQpiAreaAssign_MedrepShow1 = New QpiAreaAssign_MedrepShow1DataTable
        MyBase.Tables.Add(Me.tableQpiAreaAssign_MedrepShow1)
        Me.tableQpiAreaAssign_TerritoryShow1 = New QpiAreaAssign_TerritoryShow1DataTable
        MyBase.Tables.Add(Me.tableQpiAreaAssign_TerritoryShow1)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeQpiAreaAssign_MedrepShow() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeQpiAreaAssign_TerritoryShow() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeQpiAreaAssign_TableShow() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeQpiAreaAssign_MedrepShow1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeQpiAreaAssign_TerritoryShow1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsQpi_AreaAssign = New dsQpi_AreaAssign
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub QpiAreaAssign_MedrepShowRowChangeEventHandler(ByVal sender As Object, ByVal e As QpiAreaAssign_MedrepShowRowChangeEvent)
    
    Public Delegate Sub QpiAreaAssign_TerritoryShowRowChangeEventHandler(ByVal sender As Object, ByVal e As QpiAreaAssign_TerritoryShowRowChangeEvent)
    
    Public Delegate Sub QpiAreaAssign_TableShowRowChangeEventHandler(ByVal sender As Object, ByVal e As QpiAreaAssign_TableShowRowChangeEvent)
    
    Public Delegate Sub QpiAreaAssign_MedrepShow1RowChangeEventHandler(ByVal sender As Object, ByVal e As QpiAreaAssign_MedrepShow1RowChangeEvent)
    
    Public Delegate Sub QpiAreaAssign_TerritoryShow1RowChangeEventHandler(ByVal sender As Object, ByVal e As QpiAreaAssign_TerritoryShow1RowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class QpiAreaAssign_MedrepShowDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnMedrep As Global.System.Data.DataColumn
        
        Private columnMrCode As Global.System.Data.DataColumn
        
        Private columnMrName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "QpiAreaAssign_MedrepShow"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MedrepColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMedrep
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MrCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMrCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MrNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMrName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As QpiAreaAssign_MedrepShowRow
            Get
                Return CType(Me.Rows(index),QpiAreaAssign_MedrepShowRow)
            End Get
        End Property
        
        Public Event QpiAreaAssign_MedrepShowRowChanging As QpiAreaAssign_MedrepShowRowChangeEventHandler
        
        Public Event QpiAreaAssign_MedrepShowRowChanged As QpiAreaAssign_MedrepShowRowChangeEventHandler
        
        Public Event QpiAreaAssign_MedrepShowRowDeleting As QpiAreaAssign_MedrepShowRowChangeEventHandler
        
        Public Event QpiAreaAssign_MedrepShowRowDeleted As QpiAreaAssign_MedrepShowRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddQpiAreaAssign_MedrepShowRow(ByVal row As QpiAreaAssign_MedrepShowRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddQpiAreaAssign_MedrepShowRow(ByVal Medrep As String, ByVal MrCode As String, ByVal MrName As String) As QpiAreaAssign_MedrepShowRow
            Dim rowQpiAreaAssign_MedrepShowRow As QpiAreaAssign_MedrepShowRow = CType(Me.NewRow,QpiAreaAssign_MedrepShowRow)
            Dim columnValuesArray() As Object = New Object() {Medrep, MrCode, MrName}
            rowQpiAreaAssign_MedrepShowRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowQpiAreaAssign_MedrepShowRow)
            Return rowQpiAreaAssign_MedrepShowRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByMrCode(ByVal MrCode As String) As QpiAreaAssign_MedrepShowRow
            Return CType(Me.Rows.Find(New Object() {MrCode}),QpiAreaAssign_MedrepShowRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As QpiAreaAssign_MedrepShowDataTable = CType(MyBase.Clone,QpiAreaAssign_MedrepShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New QpiAreaAssign_MedrepShowDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMedrep = MyBase.Columns("Medrep")
            Me.columnMrCode = MyBase.Columns("MrCode")
            Me.columnMrName = MyBase.Columns("MrName")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMedrep = New Global.System.Data.DataColumn("Medrep", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMedrep)
            Me.columnMrCode = New Global.System.Data.DataColumn("MrCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMrCode)
            Me.columnMrName = New Global.System.Data.DataColumn("MrName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMrName)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("dsQpi_AreaAssignKey1", New Global.System.Data.DataColumn() {Me.columnMrCode}, true))
            Me.columnMedrep.ReadOnly = true
            Me.columnMrCode.AllowDBNull = false
            Me.columnMrCode.Unique = true
            Me.columnMrName.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewQpiAreaAssign_MedrepShowRow() As QpiAreaAssign_MedrepShowRow
            Return CType(Me.NewRow,QpiAreaAssign_MedrepShowRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New QpiAreaAssign_MedrepShowRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(QpiAreaAssign_MedrepShowRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.QpiAreaAssign_MedrepShowRowChangedEvent) Is Nothing) Then
                RaiseEvent QpiAreaAssign_MedrepShowRowChanged(Me, New QpiAreaAssign_MedrepShowRowChangeEvent(CType(e.Row,QpiAreaAssign_MedrepShowRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.QpiAreaAssign_MedrepShowRowChangingEvent) Is Nothing) Then
                RaiseEvent QpiAreaAssign_MedrepShowRowChanging(Me, New QpiAreaAssign_MedrepShowRowChangeEvent(CType(e.Row,QpiAreaAssign_MedrepShowRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.QpiAreaAssign_MedrepShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent QpiAreaAssign_MedrepShowRowDeleted(Me, New QpiAreaAssign_MedrepShowRowChangeEvent(CType(e.Row,QpiAreaAssign_MedrepShowRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.QpiAreaAssign_MedrepShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent QpiAreaAssign_MedrepShowRowDeleting(Me, New QpiAreaAssign_MedrepShowRowChangeEvent(CType(e.Row,QpiAreaAssign_MedrepShowRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveQpiAreaAssign_MedrepShowRow(ByVal row As QpiAreaAssign_MedrepShowRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsQpi_AreaAssign = New dsQpi_AreaAssign
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "QpiAreaAssign_MedrepShowDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class QpiAreaAssign_TerritoryShowDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnTerritoryDesc As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "QpiAreaAssign_TerritoryShow"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TerritoryDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTerritoryDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As QpiAreaAssign_TerritoryShowRow
            Get
                Return CType(Me.Rows(index),QpiAreaAssign_TerritoryShowRow)
            End Get
        End Property
        
        Public Event QpiAreaAssign_TerritoryShowRowChanging As QpiAreaAssign_TerritoryShowRowChangeEventHandler
        
        Public Event QpiAreaAssign_TerritoryShowRowChanged As QpiAreaAssign_TerritoryShowRowChangeEventHandler
        
        Public Event QpiAreaAssign_TerritoryShowRowDeleting As QpiAreaAssign_TerritoryShowRowChangeEventHandler
        
        Public Event QpiAreaAssign_TerritoryShowRowDeleted As QpiAreaAssign_TerritoryShowRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddQpiAreaAssign_TerritoryShowRow(ByVal row As QpiAreaAssign_TerritoryShowRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddQpiAreaAssign_TerritoryShowRow(ByVal TerritoryDesc As String) As QpiAreaAssign_TerritoryShowRow
            Dim rowQpiAreaAssign_TerritoryShowRow As QpiAreaAssign_TerritoryShowRow = CType(Me.NewRow,QpiAreaAssign_TerritoryShowRow)
            Dim columnValuesArray() As Object = New Object() {TerritoryDesc}
            rowQpiAreaAssign_TerritoryShowRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowQpiAreaAssign_TerritoryShowRow)
            Return rowQpiAreaAssign_TerritoryShowRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As QpiAreaAssign_TerritoryShowDataTable = CType(MyBase.Clone,QpiAreaAssign_TerritoryShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New QpiAreaAssign_TerritoryShowDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTerritoryDesc = MyBase.Columns("TerritoryDesc")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTerritoryDesc = New Global.System.Data.DataColumn("TerritoryDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTerritoryDesc)
            Me.columnTerritoryDesc.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewQpiAreaAssign_TerritoryShowRow() As QpiAreaAssign_TerritoryShowRow
            Return CType(Me.NewRow,QpiAreaAssign_TerritoryShowRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New QpiAreaAssign_TerritoryShowRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(QpiAreaAssign_TerritoryShowRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.QpiAreaAssign_TerritoryShowRowChangedEvent) Is Nothing) Then
                RaiseEvent QpiAreaAssign_TerritoryShowRowChanged(Me, New QpiAreaAssign_TerritoryShowRowChangeEvent(CType(e.Row,QpiAreaAssign_TerritoryShowRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.QpiAreaAssign_TerritoryShowRowChangingEvent) Is Nothing) Then
                RaiseEvent QpiAreaAssign_TerritoryShowRowChanging(Me, New QpiAreaAssign_TerritoryShowRowChangeEvent(CType(e.Row,QpiAreaAssign_TerritoryShowRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.QpiAreaAssign_TerritoryShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent QpiAreaAssign_TerritoryShowRowDeleted(Me, New QpiAreaAssign_TerritoryShowRowChangeEvent(CType(e.Row,QpiAreaAssign_TerritoryShowRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.QpiAreaAssign_TerritoryShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent QpiAreaAssign_TerritoryShowRowDeleting(Me, New QpiAreaAssign_TerritoryShowRowChangeEvent(CType(e.Row,QpiAreaAssign_TerritoryShowRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveQpiAreaAssign_TerritoryShowRow(ByVal row As QpiAreaAssign_TerritoryShowRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsQpi_AreaAssign = New dsQpi_AreaAssign
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "QpiAreaAssign_TerritoryShowDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class QpiAreaAssign_TableShowDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnRowid As Global.System.Data.DataColumn
        
        Private columnMedrep As Global.System.Data.DataColumn
        
        Private columnTerritory As Global.System.Data.DataColumn
        
        Private columnStartDate As Global.System.Data.DataColumn
        
        Private columnEndDate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "QpiAreaAssign_TableShow"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RowidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MedrepColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMedrep
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TerritoryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTerritory
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StartDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStartDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EndDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEndDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As QpiAreaAssign_TableShowRow
            Get
                Return CType(Me.Rows(index),QpiAreaAssign_TableShowRow)
            End Get
        End Property
        
        Public Event QpiAreaAssign_TableShowRowChanging As QpiAreaAssign_TableShowRowChangeEventHandler
        
        Public Event QpiAreaAssign_TableShowRowChanged As QpiAreaAssign_TableShowRowChangeEventHandler
        
        Public Event QpiAreaAssign_TableShowRowDeleting As QpiAreaAssign_TableShowRowChangeEventHandler
        
        Public Event QpiAreaAssign_TableShowRowDeleted As QpiAreaAssign_TableShowRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddQpiAreaAssign_TableShowRow(ByVal row As QpiAreaAssign_TableShowRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddQpiAreaAssign_TableShowRow(ByVal Medrep As String, ByVal Territory As String, ByVal StartDate As Date, ByVal EndDate As Date) As QpiAreaAssign_TableShowRow
            Dim rowQpiAreaAssign_TableShowRow As QpiAreaAssign_TableShowRow = CType(Me.NewRow,QpiAreaAssign_TableShowRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Medrep, Territory, StartDate, EndDate}
            rowQpiAreaAssign_TableShowRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowQpiAreaAssign_TableShowRow)
            Return rowQpiAreaAssign_TableShowRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As QpiAreaAssign_TableShowDataTable = CType(MyBase.Clone,QpiAreaAssign_TableShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New QpiAreaAssign_TableShowDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnRowid = MyBase.Columns("Rowid")
            Me.columnMedrep = MyBase.Columns("Medrep")
            Me.columnTerritory = MyBase.Columns("Territory")
            Me.columnStartDate = MyBase.Columns("StartDate")
            Me.columnEndDate = MyBase.Columns("EndDate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnRowid = New Global.System.Data.DataColumn("Rowid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowid)
            Me.columnMedrep = New Global.System.Data.DataColumn("Medrep", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMedrep)
            Me.columnTerritory = New Global.System.Data.DataColumn("Territory", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTerritory)
            Me.columnStartDate = New Global.System.Data.DataColumn("StartDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStartDate)
            Me.columnEndDate = New Global.System.Data.DataColumn("EndDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEndDate)
            Me.columnRowid.AutoIncrement = true
            Me.columnRowid.AllowDBNull = false
            Me.columnRowid.ReadOnly = true
            Me.columnMedrep.ReadOnly = true
            Me.columnTerritory.ReadOnly = true
            Me.columnStartDate.AllowDBNull = false
            Me.columnEndDate.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewQpiAreaAssign_TableShowRow() As QpiAreaAssign_TableShowRow
            Return CType(Me.NewRow,QpiAreaAssign_TableShowRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New QpiAreaAssign_TableShowRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(QpiAreaAssign_TableShowRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.QpiAreaAssign_TableShowRowChangedEvent) Is Nothing) Then
                RaiseEvent QpiAreaAssign_TableShowRowChanged(Me, New QpiAreaAssign_TableShowRowChangeEvent(CType(e.Row,QpiAreaAssign_TableShowRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.QpiAreaAssign_TableShowRowChangingEvent) Is Nothing) Then
                RaiseEvent QpiAreaAssign_TableShowRowChanging(Me, New QpiAreaAssign_TableShowRowChangeEvent(CType(e.Row,QpiAreaAssign_TableShowRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.QpiAreaAssign_TableShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent QpiAreaAssign_TableShowRowDeleted(Me, New QpiAreaAssign_TableShowRowChangeEvent(CType(e.Row,QpiAreaAssign_TableShowRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.QpiAreaAssign_TableShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent QpiAreaAssign_TableShowRowDeleting(Me, New QpiAreaAssign_TableShowRowChangeEvent(CType(e.Row,QpiAreaAssign_TableShowRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveQpiAreaAssign_TableShowRow(ByVal row As QpiAreaAssign_TableShowRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsQpi_AreaAssign = New dsQpi_AreaAssign
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "QpiAreaAssign_TableShowDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class QpiAreaAssign_MedrepShow1DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnMedrep As Global.System.Data.DataColumn
        
        Private columnMrCode As Global.System.Data.DataColumn
        
        Private columnMrName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "QpiAreaAssign_MedrepShow1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MedrepColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMedrep
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MrCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMrCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MrNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMrName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As QpiAreaAssign_MedrepShow1Row
            Get
                Return CType(Me.Rows(index),QpiAreaAssign_MedrepShow1Row)
            End Get
        End Property
        
        Public Event QpiAreaAssign_MedrepShow1RowChanging As QpiAreaAssign_MedrepShow1RowChangeEventHandler
        
        Public Event QpiAreaAssign_MedrepShow1RowChanged As QpiAreaAssign_MedrepShow1RowChangeEventHandler
        
        Public Event QpiAreaAssign_MedrepShow1RowDeleting As QpiAreaAssign_MedrepShow1RowChangeEventHandler
        
        Public Event QpiAreaAssign_MedrepShow1RowDeleted As QpiAreaAssign_MedrepShow1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddQpiAreaAssign_MedrepShow1Row(ByVal row As QpiAreaAssign_MedrepShow1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddQpiAreaAssign_MedrepShow1Row(ByVal Medrep As String, ByVal MrCode As String, ByVal MrName As String) As QpiAreaAssign_MedrepShow1Row
            Dim rowQpiAreaAssign_MedrepShow1Row As QpiAreaAssign_MedrepShow1Row = CType(Me.NewRow,QpiAreaAssign_MedrepShow1Row)
            Dim columnValuesArray() As Object = New Object() {Medrep, MrCode, MrName}
            rowQpiAreaAssign_MedrepShow1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowQpiAreaAssign_MedrepShow1Row)
            Return rowQpiAreaAssign_MedrepShow1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As QpiAreaAssign_MedrepShow1DataTable = CType(MyBase.Clone,QpiAreaAssign_MedrepShow1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New QpiAreaAssign_MedrepShow1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMedrep = MyBase.Columns("Medrep")
            Me.columnMrCode = MyBase.Columns("MrCode")
            Me.columnMrName = MyBase.Columns("MrName")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMedrep = New Global.System.Data.DataColumn("Medrep", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMedrep)
            Me.columnMrCode = New Global.System.Data.DataColumn("MrCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMrCode)
            Me.columnMrName = New Global.System.Data.DataColumn("MrName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMrName)
            Me.columnMedrep.ReadOnly = true
            Me.columnMrCode.AllowDBNull = false
            Me.columnMrName.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewQpiAreaAssign_MedrepShow1Row() As QpiAreaAssign_MedrepShow1Row
            Return CType(Me.NewRow,QpiAreaAssign_MedrepShow1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New QpiAreaAssign_MedrepShow1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(QpiAreaAssign_MedrepShow1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.QpiAreaAssign_MedrepShow1RowChangedEvent) Is Nothing) Then
                RaiseEvent QpiAreaAssign_MedrepShow1RowChanged(Me, New QpiAreaAssign_MedrepShow1RowChangeEvent(CType(e.Row,QpiAreaAssign_MedrepShow1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.QpiAreaAssign_MedrepShow1RowChangingEvent) Is Nothing) Then
                RaiseEvent QpiAreaAssign_MedrepShow1RowChanging(Me, New QpiAreaAssign_MedrepShow1RowChangeEvent(CType(e.Row,QpiAreaAssign_MedrepShow1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.QpiAreaAssign_MedrepShow1RowDeletedEvent) Is Nothing) Then
                RaiseEvent QpiAreaAssign_MedrepShow1RowDeleted(Me, New QpiAreaAssign_MedrepShow1RowChangeEvent(CType(e.Row,QpiAreaAssign_MedrepShow1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.QpiAreaAssign_MedrepShow1RowDeletingEvent) Is Nothing) Then
                RaiseEvent QpiAreaAssign_MedrepShow1RowDeleting(Me, New QpiAreaAssign_MedrepShow1RowChangeEvent(CType(e.Row,QpiAreaAssign_MedrepShow1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveQpiAreaAssign_MedrepShow1Row(ByVal row As QpiAreaAssign_MedrepShow1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsQpi_AreaAssign = New dsQpi_AreaAssign
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "QpiAreaAssign_MedrepShow1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class QpiAreaAssign_TerritoryShow1DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnTerritoryDesc As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "QpiAreaAssign_TerritoryShow1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TerritoryDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTerritoryDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As QpiAreaAssign_TerritoryShow1Row
            Get
                Return CType(Me.Rows(index),QpiAreaAssign_TerritoryShow1Row)
            End Get
        End Property
        
        Public Event QpiAreaAssign_TerritoryShow1RowChanging As QpiAreaAssign_TerritoryShow1RowChangeEventHandler
        
        Public Event QpiAreaAssign_TerritoryShow1RowChanged As QpiAreaAssign_TerritoryShow1RowChangeEventHandler
        
        Public Event QpiAreaAssign_TerritoryShow1RowDeleting As QpiAreaAssign_TerritoryShow1RowChangeEventHandler
        
        Public Event QpiAreaAssign_TerritoryShow1RowDeleted As QpiAreaAssign_TerritoryShow1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddQpiAreaAssign_TerritoryShow1Row(ByVal row As QpiAreaAssign_TerritoryShow1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddQpiAreaAssign_TerritoryShow1Row(ByVal TerritoryDesc As String) As QpiAreaAssign_TerritoryShow1Row
            Dim rowQpiAreaAssign_TerritoryShow1Row As QpiAreaAssign_TerritoryShow1Row = CType(Me.NewRow,QpiAreaAssign_TerritoryShow1Row)
            Dim columnValuesArray() As Object = New Object() {TerritoryDesc}
            rowQpiAreaAssign_TerritoryShow1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowQpiAreaAssign_TerritoryShow1Row)
            Return rowQpiAreaAssign_TerritoryShow1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As QpiAreaAssign_TerritoryShow1DataTable = CType(MyBase.Clone,QpiAreaAssign_TerritoryShow1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New QpiAreaAssign_TerritoryShow1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTerritoryDesc = MyBase.Columns("TerritoryDesc")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTerritoryDesc = New Global.System.Data.DataColumn("TerritoryDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTerritoryDesc)
            Me.columnTerritoryDesc.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewQpiAreaAssign_TerritoryShow1Row() As QpiAreaAssign_TerritoryShow1Row
            Return CType(Me.NewRow,QpiAreaAssign_TerritoryShow1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New QpiAreaAssign_TerritoryShow1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(QpiAreaAssign_TerritoryShow1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.QpiAreaAssign_TerritoryShow1RowChangedEvent) Is Nothing) Then
                RaiseEvent QpiAreaAssign_TerritoryShow1RowChanged(Me, New QpiAreaAssign_TerritoryShow1RowChangeEvent(CType(e.Row,QpiAreaAssign_TerritoryShow1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.QpiAreaAssign_TerritoryShow1RowChangingEvent) Is Nothing) Then
                RaiseEvent QpiAreaAssign_TerritoryShow1RowChanging(Me, New QpiAreaAssign_TerritoryShow1RowChangeEvent(CType(e.Row,QpiAreaAssign_TerritoryShow1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.QpiAreaAssign_TerritoryShow1RowDeletedEvent) Is Nothing) Then
                RaiseEvent QpiAreaAssign_TerritoryShow1RowDeleted(Me, New QpiAreaAssign_TerritoryShow1RowChangeEvent(CType(e.Row,QpiAreaAssign_TerritoryShow1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.QpiAreaAssign_TerritoryShow1RowDeletingEvent) Is Nothing) Then
                RaiseEvent QpiAreaAssign_TerritoryShow1RowDeleting(Me, New QpiAreaAssign_TerritoryShow1RowChangeEvent(CType(e.Row,QpiAreaAssign_TerritoryShow1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveQpiAreaAssign_TerritoryShow1Row(ByVal row As QpiAreaAssign_TerritoryShow1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsQpi_AreaAssign = New dsQpi_AreaAssign
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "QpiAreaAssign_TerritoryShow1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class QpiAreaAssign_MedrepShowRow
        Inherits Global.System.Data.DataRow
        
        Private tableQpiAreaAssign_MedrepShow As QpiAreaAssign_MedrepShowDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableQpiAreaAssign_MedrepShow = CType(Me.Table,QpiAreaAssign_MedrepShowDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Medrep() As String
            Get
                Try 
                    Return CType(Me(Me.tableQpiAreaAssign_MedrepShow.MedrepColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Medrep' in table 'QpiAreaAssign_MedrepShow' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQpiAreaAssign_MedrepShow.MedrepColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MrCode() As String
            Get
                Return CType(Me(Me.tableQpiAreaAssign_MedrepShow.MrCodeColumn),String)
            End Get
            Set
                Me(Me.tableQpiAreaAssign_MedrepShow.MrCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MrName() As String
            Get
                Return CType(Me(Me.tableQpiAreaAssign_MedrepShow.MrNameColumn),String)
            End Get
            Set
                Me(Me.tableQpiAreaAssign_MedrepShow.MrNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMedrepNull() As Boolean
            Return Me.IsNull(Me.tableQpiAreaAssign_MedrepShow.MedrepColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMedrepNull()
            Me(Me.tableQpiAreaAssign_MedrepShow.MedrepColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class QpiAreaAssign_TerritoryShowRow
        Inherits Global.System.Data.DataRow
        
        Private tableQpiAreaAssign_TerritoryShow As QpiAreaAssign_TerritoryShowDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableQpiAreaAssign_TerritoryShow = CType(Me.Table,QpiAreaAssign_TerritoryShowDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TerritoryDesc() As String
            Get
                Try 
                    Return CType(Me(Me.tableQpiAreaAssign_TerritoryShow.TerritoryDescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TerritoryDesc' in table 'QpiAreaAssign_TerritoryShow' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableQpiAreaAssign_TerritoryShow.TerritoryDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTerritoryDescNull() As Boolean
            Return Me.IsNull(Me.tableQpiAreaAssign_TerritoryShow.TerritoryDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTerritoryDescNull()
            Me(Me.tableQpiAreaAssign_TerritoryShow.TerritoryDescColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class QpiAreaAssign_TableShowRow
        Inherits Global.System.Data.DataRow
        
        Private tableQpiAreaAssign_TableShow As QpiAreaAssign_TableShowDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableQpiAreaAssign_TableShow = CType(Me.Table,QpiAreaAssign_TableShowDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Rowid() As Integer
            Get
                Return CType(Me(Me.tableQpiAreaAssign_TableShow.RowidColumn),Integer)
            End Get
            Set
                Me(Me.tableQpiAreaAssign_TableShow.RowidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Medrep() As String
            Get
                Try 
                    Return CType(Me(Me.tableQpiAreaAssign_TableShow.MedrepColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Medrep' in table 'QpiAreaAssign_TableShow' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQpiAreaAssign_TableShow.MedrepColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Territory() As String
            Get
                Try 
                    Return CType(Me(Me.tableQpiAreaAssign_TableShow.TerritoryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Territory' in table 'QpiAreaAssign_TableShow' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQpiAreaAssign_TableShow.TerritoryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StartDate() As Date
            Get
                Return CType(Me(Me.tableQpiAreaAssign_TableShow.StartDateColumn),Date)
            End Get
            Set
                Me(Me.tableQpiAreaAssign_TableShow.StartDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EndDate() As Date
            Get
                Return CType(Me(Me.tableQpiAreaAssign_TableShow.EndDateColumn),Date)
            End Get
            Set
                Me(Me.tableQpiAreaAssign_TableShow.EndDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMedrepNull() As Boolean
            Return Me.IsNull(Me.tableQpiAreaAssign_TableShow.MedrepColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMedrepNull()
            Me(Me.tableQpiAreaAssign_TableShow.MedrepColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTerritoryNull() As Boolean
            Return Me.IsNull(Me.tableQpiAreaAssign_TableShow.TerritoryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTerritoryNull()
            Me(Me.tableQpiAreaAssign_TableShow.TerritoryColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class QpiAreaAssign_MedrepShow1Row
        Inherits Global.System.Data.DataRow
        
        Private tableQpiAreaAssign_MedrepShow1 As QpiAreaAssign_MedrepShow1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableQpiAreaAssign_MedrepShow1 = CType(Me.Table,QpiAreaAssign_MedrepShow1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Medrep() As String
            Get
                Try 
                    Return CType(Me(Me.tableQpiAreaAssign_MedrepShow1.MedrepColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Medrep' in table 'QpiAreaAssign_MedrepShow1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQpiAreaAssign_MedrepShow1.MedrepColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MrCode() As String
            Get
                Return CType(Me(Me.tableQpiAreaAssign_MedrepShow1.MrCodeColumn),String)
            End Get
            Set
                Me(Me.tableQpiAreaAssign_MedrepShow1.MrCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MrName() As String
            Get
                Return CType(Me(Me.tableQpiAreaAssign_MedrepShow1.MrNameColumn),String)
            End Get
            Set
                Me(Me.tableQpiAreaAssign_MedrepShow1.MrNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMedrepNull() As Boolean
            Return Me.IsNull(Me.tableQpiAreaAssign_MedrepShow1.MedrepColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMedrepNull()
            Me(Me.tableQpiAreaAssign_MedrepShow1.MedrepColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class QpiAreaAssign_TerritoryShow1Row
        Inherits Global.System.Data.DataRow
        
        Private tableQpiAreaAssign_TerritoryShow1 As QpiAreaAssign_TerritoryShow1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableQpiAreaAssign_TerritoryShow1 = CType(Me.Table,QpiAreaAssign_TerritoryShow1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TerritoryDesc() As String
            Get
                Try 
                    Return CType(Me(Me.tableQpiAreaAssign_TerritoryShow1.TerritoryDescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TerritoryDesc' in table 'QpiAreaAssign_TerritoryShow1' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQpiAreaAssign_TerritoryShow1.TerritoryDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTerritoryDescNull() As Boolean
            Return Me.IsNull(Me.tableQpiAreaAssign_TerritoryShow1.TerritoryDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTerritoryDescNull()
            Me(Me.tableQpiAreaAssign_TerritoryShow1.TerritoryDescColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class QpiAreaAssign_MedrepShowRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As QpiAreaAssign_MedrepShowRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As QpiAreaAssign_MedrepShowRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As QpiAreaAssign_MedrepShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class QpiAreaAssign_TerritoryShowRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As QpiAreaAssign_TerritoryShowRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As QpiAreaAssign_TerritoryShowRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As QpiAreaAssign_TerritoryShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class QpiAreaAssign_TableShowRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As QpiAreaAssign_TableShowRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As QpiAreaAssign_TableShowRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As QpiAreaAssign_TableShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class QpiAreaAssign_MedrepShow1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As QpiAreaAssign_MedrepShow1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As QpiAreaAssign_MedrepShow1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As QpiAreaAssign_MedrepShow1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class QpiAreaAssign_TerritoryShow1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As QpiAreaAssign_TerritoryShow1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As QpiAreaAssign_TerritoryShow1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As QpiAreaAssign_TerritoryShow1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
