'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2407
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsMercuryData
    Inherits DataSet
    
    Private tableMercuryStatCount As MercuryStatCountDataTable
    
    Private tableMercItem As MercItemDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("MercuryStatCount")) Is Nothing) Then
                Me.Tables.Add(New MercuryStatCountDataTable(ds.Tables("MercuryStatCount")))
            End If
            If (Not (ds.Tables("MercItem")) Is Nothing) Then
                Me.Tables.Add(New MercItemDataTable(ds.Tables("MercItem")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MercuryStatCount As MercuryStatCountDataTable
        Get
            Return Me.tableMercuryStatCount
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MercItem As MercItemDataTable
        Get
            Return Me.tableMercItem
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsMercuryData = CType(MyBase.Clone,dsMercuryData)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("MercuryStatCount")) Is Nothing) Then
            Me.Tables.Add(New MercuryStatCountDataTable(ds.Tables("MercuryStatCount")))
        End If
        If (Not (ds.Tables("MercItem")) Is Nothing) Then
            Me.Tables.Add(New MercItemDataTable(ds.Tables("MercItem")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableMercuryStatCount = CType(Me.Tables("MercuryStatCount"),MercuryStatCountDataTable)
        If (Not (Me.tableMercuryStatCount) Is Nothing) Then
            Me.tableMercuryStatCount.InitVars
        End If
        Me.tableMercItem = CType(Me.Tables("MercItem"),MercItemDataTable)
        If (Not (Me.tableMercItem) Is Nothing) Then
            Me.tableMercItem.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsMercuryData"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsMerc.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableMercuryStatCount = New MercuryStatCountDataTable
        Me.Tables.Add(Me.tableMercuryStatCount)
        Me.tableMercItem = New MercItemDataTable
        Me.Tables.Add(Me.tableMercItem)
    End Sub
    
    Private Function ShouldSerializeMercuryStatCount() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeMercItem() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub MercuryStatCountRowChangeEventHandler(ByVal sender As Object, ByVal e As MercuryStatCountRowChangeEvent)
    
    Public Delegate Sub MercItemRowChangeEventHandler(ByVal sender As Object, ByVal e As MercItemRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MercuryStatCountDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnRowNumber As DataColumn
        
        Private columnBranchCode As DataColumn
        
        Private columnBranchName As DataColumn
        
        Private columnAddress1 As DataColumn
        
        Private columnMItemCode As DataColumn
        
        Private columnItemCode As DataColumn
        
        Private columnItemDesc As DataColumn
        
        Private columnMrCode As DataColumn
        
        Private columnSupCode As DataColumn
        
        Friend Sub New()
            MyBase.New("MercuryStatCount")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property RowNumberColumn As DataColumn
            Get
                Return Me.columnRowNumber
            End Get
        End Property
        
        Friend ReadOnly Property BranchCodeColumn As DataColumn
            Get
                Return Me.columnBranchCode
            End Get
        End Property
        
        Friend ReadOnly Property BranchNameColumn As DataColumn
            Get
                Return Me.columnBranchName
            End Get
        End Property
        
        Friend ReadOnly Property Address1Column As DataColumn
            Get
                Return Me.columnAddress1
            End Get
        End Property
        
        Friend ReadOnly Property MItemCodeColumn As DataColumn
            Get
                Return Me.columnMItemCode
            End Get
        End Property
        
        Friend ReadOnly Property ItemCodeColumn As DataColumn
            Get
                Return Me.columnItemCode
            End Get
        End Property
        
        Friend ReadOnly Property ItemDescColumn As DataColumn
            Get
                Return Me.columnItemDesc
            End Get
        End Property
        
        Friend ReadOnly Property MrCodeColumn As DataColumn
            Get
                Return Me.columnMrCode
            End Get
        End Property
        
        Friend ReadOnly Property SupCodeColumn As DataColumn
            Get
                Return Me.columnSupCode
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As MercuryStatCountRow
            Get
                Return CType(Me.Rows(index),MercuryStatCountRow)
            End Get
        End Property
        
        Public Event MercuryStatCountRowChanged As MercuryStatCountRowChangeEventHandler
        
        Public Event MercuryStatCountRowChanging As MercuryStatCountRowChangeEventHandler
        
        Public Event MercuryStatCountRowDeleted As MercuryStatCountRowChangeEventHandler
        
        Public Event MercuryStatCountRowDeleting As MercuryStatCountRowChangeEventHandler
        
        Public Overloads Sub AddMercuryStatCountRow(ByVal row As MercuryStatCountRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMercuryStatCountRow(ByVal RowNumber As Long, ByVal BranchCode As String, ByVal BranchName As String, ByVal Address1 As String, ByVal MItemCode As String, ByVal ItemCode As String, ByVal ItemDesc As String, ByVal MrCode As String, ByVal SupCode As String) As MercuryStatCountRow
            Dim rowMercuryStatCountRow As MercuryStatCountRow = CType(Me.NewRow,MercuryStatCountRow)
            rowMercuryStatCountRow.ItemArray = New Object() {RowNumber, BranchCode, BranchName, Address1, MItemCode, ItemCode, ItemDesc, MrCode, SupCode}
            Me.Rows.Add(rowMercuryStatCountRow)
            Return rowMercuryStatCountRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As MercuryStatCountDataTable = CType(MyBase.Clone,MercuryStatCountDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New MercuryStatCountDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnRowNumber = Me.Columns("RowNumber")
            Me.columnBranchCode = Me.Columns("BranchCode")
            Me.columnBranchName = Me.Columns("BranchName")
            Me.columnAddress1 = Me.Columns("Address1")
            Me.columnMItemCode = Me.Columns("MItemCode")
            Me.columnItemCode = Me.Columns("ItemCode")
            Me.columnItemDesc = Me.Columns("ItemDesc")
            Me.columnMrCode = Me.Columns("MrCode")
            Me.columnSupCode = Me.Columns("SupCode")
        End Sub
        
        Private Sub InitClass()
            Me.columnRowNumber = New DataColumn("RowNumber", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRowNumber)
            Me.columnBranchCode = New DataColumn("BranchCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBranchCode)
            Me.columnBranchName = New DataColumn("BranchName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBranchName)
            Me.columnAddress1 = New DataColumn("Address1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAddress1)
            Me.columnMItemCode = New DataColumn("MItemCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMItemCode)
            Me.columnItemCode = New DataColumn("ItemCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemCode)
            Me.columnItemDesc = New DataColumn("ItemDesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemDesc)
            Me.columnMrCode = New DataColumn("MrCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMrCode)
            Me.columnSupCode = New DataColumn("SupCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSupCode)
        End Sub
        
        Public Function NewMercuryStatCountRow() As MercuryStatCountRow
            Return CType(Me.NewRow,MercuryStatCountRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New MercuryStatCountRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MercuryStatCountRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MercuryStatCountRowChangedEvent) Is Nothing) Then
                RaiseEvent MercuryStatCountRowChanged(Me, New MercuryStatCountRowChangeEvent(CType(e.Row,MercuryStatCountRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MercuryStatCountRowChangingEvent) Is Nothing) Then
                RaiseEvent MercuryStatCountRowChanging(Me, New MercuryStatCountRowChangeEvent(CType(e.Row,MercuryStatCountRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MercuryStatCountRowDeletedEvent) Is Nothing) Then
                RaiseEvent MercuryStatCountRowDeleted(Me, New MercuryStatCountRowChangeEvent(CType(e.Row,MercuryStatCountRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MercuryStatCountRowDeletingEvent) Is Nothing) Then
                RaiseEvent MercuryStatCountRowDeleting(Me, New MercuryStatCountRowChangeEvent(CType(e.Row,MercuryStatCountRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMercuryStatCountRow(ByVal row As MercuryStatCountRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MercuryStatCountRow
        Inherits DataRow
        
        Private tableMercuryStatCount As MercuryStatCountDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMercuryStatCount = CType(Me.Table,MercuryStatCountDataTable)
        End Sub
        
        Public Property RowNumber As Long
            Get
                Try 
                    Return CType(Me(Me.tableMercuryStatCount.RowNumberColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMercuryStatCount.RowNumberColumn) = value
            End Set
        End Property
        
        Public Property BranchCode As String
            Get
                Try 
                    Return CType(Me(Me.tableMercuryStatCount.BranchCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMercuryStatCount.BranchCodeColumn) = value
            End Set
        End Property
        
        Public Property BranchName As String
            Get
                Try 
                    Return CType(Me(Me.tableMercuryStatCount.BranchNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMercuryStatCount.BranchNameColumn) = value
            End Set
        End Property
        
        Public Property Address1 As String
            Get
                Try 
                    Return CType(Me(Me.tableMercuryStatCount.Address1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMercuryStatCount.Address1Column) = value
            End Set
        End Property
        
        Public Property MItemCode As String
            Get
                Try 
                    Return CType(Me(Me.tableMercuryStatCount.MItemCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMercuryStatCount.MItemCodeColumn) = value
            End Set
        End Property
        
        Public Property ItemCode As String
            Get
                Try 
                    Return CType(Me(Me.tableMercuryStatCount.ItemCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMercuryStatCount.ItemCodeColumn) = value
            End Set
        End Property
        
        Public Property ItemDesc As String
            Get
                Try 
                    Return CType(Me(Me.tableMercuryStatCount.ItemDescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMercuryStatCount.ItemDescColumn) = value
            End Set
        End Property
        
        Public Property MrCode As String
            Get
                Try 
                    Return CType(Me(Me.tableMercuryStatCount.MrCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMercuryStatCount.MrCodeColumn) = value
            End Set
        End Property
        
        Public Property SupCode As String
            Get
                Try 
                    Return CType(Me(Me.tableMercuryStatCount.SupCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMercuryStatCount.SupCodeColumn) = value
            End Set
        End Property
        
        Public Function IsRowNumberNull() As Boolean
            Return Me.IsNull(Me.tableMercuryStatCount.RowNumberColumn)
        End Function
        
        Public Sub SetRowNumberNull()
            Me(Me.tableMercuryStatCount.RowNumberColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBranchCodeNull() As Boolean
            Return Me.IsNull(Me.tableMercuryStatCount.BranchCodeColumn)
        End Function
        
        Public Sub SetBranchCodeNull()
            Me(Me.tableMercuryStatCount.BranchCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBranchNameNull() As Boolean
            Return Me.IsNull(Me.tableMercuryStatCount.BranchNameColumn)
        End Function
        
        Public Sub SetBranchNameNull()
            Me(Me.tableMercuryStatCount.BranchNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAddress1Null() As Boolean
            Return Me.IsNull(Me.tableMercuryStatCount.Address1Column)
        End Function
        
        Public Sub SetAddress1Null()
            Me(Me.tableMercuryStatCount.Address1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsMItemCodeNull() As Boolean
            Return Me.IsNull(Me.tableMercuryStatCount.MItemCodeColumn)
        End Function
        
        Public Sub SetMItemCodeNull()
            Me(Me.tableMercuryStatCount.MItemCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItemCodeNull() As Boolean
            Return Me.IsNull(Me.tableMercuryStatCount.ItemCodeColumn)
        End Function
        
        Public Sub SetItemCodeNull()
            Me(Me.tableMercuryStatCount.ItemCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItemDescNull() As Boolean
            Return Me.IsNull(Me.tableMercuryStatCount.ItemDescColumn)
        End Function
        
        Public Sub SetItemDescNull()
            Me(Me.tableMercuryStatCount.ItemDescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMrCodeNull() As Boolean
            Return Me.IsNull(Me.tableMercuryStatCount.MrCodeColumn)
        End Function
        
        Public Sub SetMrCodeNull()
            Me(Me.tableMercuryStatCount.MrCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSupCodeNull() As Boolean
            Return Me.IsNull(Me.tableMercuryStatCount.SupCodeColumn)
        End Function
        
        Public Sub SetSupCodeNull()
            Me(Me.tableMercuryStatCount.SupCodeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MercuryStatCountRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As MercuryStatCountRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As MercuryStatCountRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As MercuryStatCountRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MercItemDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnitemcode As DataColumn
        
        Private columnmitemcode As DataColumn
        
        Friend Sub New()
            MyBase.New("MercItem")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property itemcodeColumn As DataColumn
            Get
                Return Me.columnitemcode
            End Get
        End Property
        
        Friend ReadOnly Property mitemcodeColumn As DataColumn
            Get
                Return Me.columnmitemcode
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As MercItemRow
            Get
                Return CType(Me.Rows(index),MercItemRow)
            End Get
        End Property
        
        Public Event MercItemRowChanged As MercItemRowChangeEventHandler
        
        Public Event MercItemRowChanging As MercItemRowChangeEventHandler
        
        Public Event MercItemRowDeleted As MercItemRowChangeEventHandler
        
        Public Event MercItemRowDeleting As MercItemRowChangeEventHandler
        
        Public Overloads Sub AddMercItemRow(ByVal row As MercItemRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMercItemRow(ByVal itemcode As String, ByVal mitemcode As String) As MercItemRow
            Dim rowMercItemRow As MercItemRow = CType(Me.NewRow,MercItemRow)
            rowMercItemRow.ItemArray = New Object() {itemcode, mitemcode}
            Me.Rows.Add(rowMercItemRow)
            Return rowMercItemRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As MercItemDataTable = CType(MyBase.Clone,MercItemDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New MercItemDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnitemcode = Me.Columns("itemcode")
            Me.columnmitemcode = Me.Columns("mitemcode")
        End Sub
        
        Private Sub InitClass()
            Me.columnitemcode = New DataColumn("itemcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitemcode)
            Me.columnmitemcode = New DataColumn("mitemcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmitemcode)
        End Sub
        
        Public Function NewMercItemRow() As MercItemRow
            Return CType(Me.NewRow,MercItemRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New MercItemRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MercItemRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MercItemRowChangedEvent) Is Nothing) Then
                RaiseEvent MercItemRowChanged(Me, New MercItemRowChangeEvent(CType(e.Row,MercItemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MercItemRowChangingEvent) Is Nothing) Then
                RaiseEvent MercItemRowChanging(Me, New MercItemRowChangeEvent(CType(e.Row,MercItemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MercItemRowDeletedEvent) Is Nothing) Then
                RaiseEvent MercItemRowDeleted(Me, New MercItemRowChangeEvent(CType(e.Row,MercItemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MercItemRowDeletingEvent) Is Nothing) Then
                RaiseEvent MercItemRowDeleting(Me, New MercItemRowChangeEvent(CType(e.Row,MercItemRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMercItemRow(ByVal row As MercItemRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MercItemRow
        Inherits DataRow
        
        Private tableMercItem As MercItemDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMercItem = CType(Me.Table,MercItemDataTable)
        End Sub
        
        Public Property itemcode As String
            Get
                Try 
                    Return CType(Me(Me.tableMercItem.itemcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMercItem.itemcodeColumn) = value
            End Set
        End Property
        
        Public Property mitemcode As String
            Get
                Try 
                    Return CType(Me(Me.tableMercItem.mitemcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMercItem.mitemcodeColumn) = value
            End Set
        End Property
        
        Public Function IsitemcodeNull() As Boolean
            Return Me.IsNull(Me.tableMercItem.itemcodeColumn)
        End Function
        
        Public Sub SetitemcodeNull()
            Me(Me.tableMercItem.itemcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmitemcodeNull() As Boolean
            Return Me.IsNull(Me.tableMercItem.mitemcodeColumn)
        End Function
        
        Public Sub SetmitemcodeNull()
            Me(Me.tableMercItem.mitemcodeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MercItemRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As MercItemRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As MercItemRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As MercItemRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
