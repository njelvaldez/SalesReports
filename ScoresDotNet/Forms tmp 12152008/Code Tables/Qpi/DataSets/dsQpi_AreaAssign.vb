'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsQpi_AreaAssign
    Inherits DataSet
    
    Private tableQpiAreaAssign_MedrepShow As QpiAreaAssign_MedrepShowDataTable
    
    Private tableQpiAreaAssign_TerritoryShow As QpiAreaAssign_TerritoryShowDataTable
    
    Private tableQpiAreaAssign_TableShow As QpiAreaAssign_TableShowDataTable
    
    Private tableQpiAreaAssign_MedrepShow1 As QpiAreaAssign_MedrepShow1DataTable
    
    Private tableQpiAreaAssign_TerritoryShow1 As QpiAreaAssign_TerritoryShow1DataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("QpiAreaAssign_MedrepShow")) Is Nothing) Then
                Me.Tables.Add(New QpiAreaAssign_MedrepShowDataTable(ds.Tables("QpiAreaAssign_MedrepShow")))
            End If
            If (Not (ds.Tables("QpiAreaAssign_TerritoryShow")) Is Nothing) Then
                Me.Tables.Add(New QpiAreaAssign_TerritoryShowDataTable(ds.Tables("QpiAreaAssign_TerritoryShow")))
            End If
            If (Not (ds.Tables("QpiAreaAssign_TableShow")) Is Nothing) Then
                Me.Tables.Add(New QpiAreaAssign_TableShowDataTable(ds.Tables("QpiAreaAssign_TableShow")))
            End If
            If (Not (ds.Tables("QpiAreaAssign_MedrepShow1")) Is Nothing) Then
                Me.Tables.Add(New QpiAreaAssign_MedrepShow1DataTable(ds.Tables("QpiAreaAssign_MedrepShow1")))
            End If
            If (Not (ds.Tables("QpiAreaAssign_TerritoryShow1")) Is Nothing) Then
                Me.Tables.Add(New QpiAreaAssign_TerritoryShow1DataTable(ds.Tables("QpiAreaAssign_TerritoryShow1")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property QpiAreaAssign_MedrepShow As QpiAreaAssign_MedrepShowDataTable
        Get
            Return Me.tableQpiAreaAssign_MedrepShow
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property QpiAreaAssign_TerritoryShow As QpiAreaAssign_TerritoryShowDataTable
        Get
            Return Me.tableQpiAreaAssign_TerritoryShow
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property QpiAreaAssign_TableShow As QpiAreaAssign_TableShowDataTable
        Get
            Return Me.tableQpiAreaAssign_TableShow
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property QpiAreaAssign_MedrepShow1 As QpiAreaAssign_MedrepShow1DataTable
        Get
            Return Me.tableQpiAreaAssign_MedrepShow1
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property QpiAreaAssign_TerritoryShow1 As QpiAreaAssign_TerritoryShow1DataTable
        Get
            Return Me.tableQpiAreaAssign_TerritoryShow1
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsQpi_AreaAssign = CType(MyBase.Clone,dsQpi_AreaAssign)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("QpiAreaAssign_MedrepShow")) Is Nothing) Then
            Me.Tables.Add(New QpiAreaAssign_MedrepShowDataTable(ds.Tables("QpiAreaAssign_MedrepShow")))
        End If
        If (Not (ds.Tables("QpiAreaAssign_TerritoryShow")) Is Nothing) Then
            Me.Tables.Add(New QpiAreaAssign_TerritoryShowDataTable(ds.Tables("QpiAreaAssign_TerritoryShow")))
        End If
        If (Not (ds.Tables("QpiAreaAssign_TableShow")) Is Nothing) Then
            Me.Tables.Add(New QpiAreaAssign_TableShowDataTable(ds.Tables("QpiAreaAssign_TableShow")))
        End If
        If (Not (ds.Tables("QpiAreaAssign_MedrepShow1")) Is Nothing) Then
            Me.Tables.Add(New QpiAreaAssign_MedrepShow1DataTable(ds.Tables("QpiAreaAssign_MedrepShow1")))
        End If
        If (Not (ds.Tables("QpiAreaAssign_TerritoryShow1")) Is Nothing) Then
            Me.Tables.Add(New QpiAreaAssign_TerritoryShow1DataTable(ds.Tables("QpiAreaAssign_TerritoryShow1")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableQpiAreaAssign_MedrepShow = CType(Me.Tables("QpiAreaAssign_MedrepShow"),QpiAreaAssign_MedrepShowDataTable)
        If (Not (Me.tableQpiAreaAssign_MedrepShow) Is Nothing) Then
            Me.tableQpiAreaAssign_MedrepShow.InitVars
        End If
        Me.tableQpiAreaAssign_TerritoryShow = CType(Me.Tables("QpiAreaAssign_TerritoryShow"),QpiAreaAssign_TerritoryShowDataTable)
        If (Not (Me.tableQpiAreaAssign_TerritoryShow) Is Nothing) Then
            Me.tableQpiAreaAssign_TerritoryShow.InitVars
        End If
        Me.tableQpiAreaAssign_TableShow = CType(Me.Tables("QpiAreaAssign_TableShow"),QpiAreaAssign_TableShowDataTable)
        If (Not (Me.tableQpiAreaAssign_TableShow) Is Nothing) Then
            Me.tableQpiAreaAssign_TableShow.InitVars
        End If
        Me.tableQpiAreaAssign_MedrepShow1 = CType(Me.Tables("QpiAreaAssign_MedrepShow1"),QpiAreaAssign_MedrepShow1DataTable)
        If (Not (Me.tableQpiAreaAssign_MedrepShow1) Is Nothing) Then
            Me.tableQpiAreaAssign_MedrepShow1.InitVars
        End If
        Me.tableQpiAreaAssign_TerritoryShow1 = CType(Me.Tables("QpiAreaAssign_TerritoryShow1"),QpiAreaAssign_TerritoryShow1DataTable)
        If (Not (Me.tableQpiAreaAssign_TerritoryShow1) Is Nothing) Then
            Me.tableQpiAreaAssign_TerritoryShow1.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsQpi_AreaAssign"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsQpi_AreaAssign.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableQpiAreaAssign_MedrepShow = New QpiAreaAssign_MedrepShowDataTable
        Me.Tables.Add(Me.tableQpiAreaAssign_MedrepShow)
        Me.tableQpiAreaAssign_TerritoryShow = New QpiAreaAssign_TerritoryShowDataTable
        Me.Tables.Add(Me.tableQpiAreaAssign_TerritoryShow)
        Me.tableQpiAreaAssign_TableShow = New QpiAreaAssign_TableShowDataTable
        Me.Tables.Add(Me.tableQpiAreaAssign_TableShow)
        Me.tableQpiAreaAssign_MedrepShow1 = New QpiAreaAssign_MedrepShow1DataTable
        Me.Tables.Add(Me.tableQpiAreaAssign_MedrepShow1)
        Me.tableQpiAreaAssign_TerritoryShow1 = New QpiAreaAssign_TerritoryShow1DataTable
        Me.Tables.Add(Me.tableQpiAreaAssign_TerritoryShow1)
    End Sub
    
    Private Function ShouldSerializeQpiAreaAssign_MedrepShow() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeQpiAreaAssign_TerritoryShow() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeQpiAreaAssign_TableShow() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeQpiAreaAssign_MedrepShow1() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeQpiAreaAssign_TerritoryShow1() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub QpiAreaAssign_MedrepShowRowChangeEventHandler(ByVal sender As Object, ByVal e As QpiAreaAssign_MedrepShowRowChangeEvent)
    
    Public Delegate Sub QpiAreaAssign_TerritoryShowRowChangeEventHandler(ByVal sender As Object, ByVal e As QpiAreaAssign_TerritoryShowRowChangeEvent)
    
    Public Delegate Sub QpiAreaAssign_TableShowRowChangeEventHandler(ByVal sender As Object, ByVal e As QpiAreaAssign_TableShowRowChangeEvent)
    
    Public Delegate Sub QpiAreaAssign_MedrepShow1RowChangeEventHandler(ByVal sender As Object, ByVal e As QpiAreaAssign_MedrepShow1RowChangeEvent)
    
    Public Delegate Sub QpiAreaAssign_TerritoryShow1RowChangeEventHandler(ByVal sender As Object, ByVal e As QpiAreaAssign_TerritoryShow1RowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QpiAreaAssign_MedrepShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMedrep As DataColumn
        
        Private columnMrCode As DataColumn
        
        Private columnMrName As DataColumn
        
        Friend Sub New()
            MyBase.New("QpiAreaAssign_MedrepShow")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property MedrepColumn As DataColumn
            Get
                Return Me.columnMedrep
            End Get
        End Property
        
        Friend ReadOnly Property MrCodeColumn As DataColumn
            Get
                Return Me.columnMrCode
            End Get
        End Property
        
        Friend ReadOnly Property MrNameColumn As DataColumn
            Get
                Return Me.columnMrName
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As QpiAreaAssign_MedrepShowRow
            Get
                Return CType(Me.Rows(index),QpiAreaAssign_MedrepShowRow)
            End Get
        End Property
        
        Public Event QpiAreaAssign_MedrepShowRowChanged As QpiAreaAssign_MedrepShowRowChangeEventHandler
        
        Public Event QpiAreaAssign_MedrepShowRowChanging As QpiAreaAssign_MedrepShowRowChangeEventHandler
        
        Public Event QpiAreaAssign_MedrepShowRowDeleted As QpiAreaAssign_MedrepShowRowChangeEventHandler
        
        Public Event QpiAreaAssign_MedrepShowRowDeleting As QpiAreaAssign_MedrepShowRowChangeEventHandler
        
        Public Overloads Sub AddQpiAreaAssign_MedrepShowRow(ByVal row As QpiAreaAssign_MedrepShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddQpiAreaAssign_MedrepShowRow(ByVal Medrep As String, ByVal MrCode As String, ByVal MrName As String) As QpiAreaAssign_MedrepShowRow
            Dim rowQpiAreaAssign_MedrepShowRow As QpiAreaAssign_MedrepShowRow = CType(Me.NewRow,QpiAreaAssign_MedrepShowRow)
            rowQpiAreaAssign_MedrepShowRow.ItemArray = New Object() {Medrep, MrCode, MrName}
            Me.Rows.Add(rowQpiAreaAssign_MedrepShowRow)
            Return rowQpiAreaAssign_MedrepShowRow
        End Function
        
        Public Function FindByMrCode(ByVal MrCode As String) As QpiAreaAssign_MedrepShowRow
            Return CType(Me.Rows.Find(New Object() {MrCode}),QpiAreaAssign_MedrepShowRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As QpiAreaAssign_MedrepShowDataTable = CType(MyBase.Clone,QpiAreaAssign_MedrepShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New QpiAreaAssign_MedrepShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMedrep = Me.Columns("Medrep")
            Me.columnMrCode = Me.Columns("MrCode")
            Me.columnMrName = Me.Columns("MrName")
        End Sub
        
        Private Sub InitClass()
            Me.columnMedrep = New DataColumn("Medrep", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMedrep)
            Me.columnMrCode = New DataColumn("MrCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMrCode)
            Me.columnMrName = New DataColumn("MrName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMrName)
            Me.Constraints.Add(New UniqueConstraint("dsQpi_AreaAssignKey1", New DataColumn() {Me.columnMrCode}, true))
            Me.columnMedrep.ReadOnly = true
            Me.columnMrCode.AllowDBNull = false
            Me.columnMrCode.Unique = true
            Me.columnMrName.AllowDBNull = false
        End Sub
        
        Public Function NewQpiAreaAssign_MedrepShowRow() As QpiAreaAssign_MedrepShowRow
            Return CType(Me.NewRow,QpiAreaAssign_MedrepShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New QpiAreaAssign_MedrepShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(QpiAreaAssign_MedrepShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.QpiAreaAssign_MedrepShowRowChangedEvent) Is Nothing) Then
                RaiseEvent QpiAreaAssign_MedrepShowRowChanged(Me, New QpiAreaAssign_MedrepShowRowChangeEvent(CType(e.Row,QpiAreaAssign_MedrepShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.QpiAreaAssign_MedrepShowRowChangingEvent) Is Nothing) Then
                RaiseEvent QpiAreaAssign_MedrepShowRowChanging(Me, New QpiAreaAssign_MedrepShowRowChangeEvent(CType(e.Row,QpiAreaAssign_MedrepShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.QpiAreaAssign_MedrepShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent QpiAreaAssign_MedrepShowRowDeleted(Me, New QpiAreaAssign_MedrepShowRowChangeEvent(CType(e.Row,QpiAreaAssign_MedrepShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.QpiAreaAssign_MedrepShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent QpiAreaAssign_MedrepShowRowDeleting(Me, New QpiAreaAssign_MedrepShowRowChangeEvent(CType(e.Row,QpiAreaAssign_MedrepShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveQpiAreaAssign_MedrepShowRow(ByVal row As QpiAreaAssign_MedrepShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QpiAreaAssign_MedrepShowRow
        Inherits DataRow
        
        Private tableQpiAreaAssign_MedrepShow As QpiAreaAssign_MedrepShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableQpiAreaAssign_MedrepShow = CType(Me.Table,QpiAreaAssign_MedrepShowDataTable)
        End Sub
        
        Public Property Medrep As String
            Get
                Try 
                    Return CType(Me(Me.tableQpiAreaAssign_MedrepShow.MedrepColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQpiAreaAssign_MedrepShow.MedrepColumn) = value
            End Set
        End Property
        
        Public Property MrCode As String
            Get
                Return CType(Me(Me.tableQpiAreaAssign_MedrepShow.MrCodeColumn),String)
            End Get
            Set
                Me(Me.tableQpiAreaAssign_MedrepShow.MrCodeColumn) = value
            End Set
        End Property
        
        Public Property MrName As String
            Get
                Return CType(Me(Me.tableQpiAreaAssign_MedrepShow.MrNameColumn),String)
            End Get
            Set
                Me(Me.tableQpiAreaAssign_MedrepShow.MrNameColumn) = value
            End Set
        End Property
        
        Public Function IsMedrepNull() As Boolean
            Return Me.IsNull(Me.tableQpiAreaAssign_MedrepShow.MedrepColumn)
        End Function
        
        Public Sub SetMedrepNull()
            Me(Me.tableQpiAreaAssign_MedrepShow.MedrepColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QpiAreaAssign_MedrepShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As QpiAreaAssign_MedrepShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As QpiAreaAssign_MedrepShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As QpiAreaAssign_MedrepShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QpiAreaAssign_TerritoryShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnTerritoryDesc As DataColumn
        
        Friend Sub New()
            MyBase.New("QpiAreaAssign_TerritoryShow")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property TerritoryDescColumn As DataColumn
            Get
                Return Me.columnTerritoryDesc
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As QpiAreaAssign_TerritoryShowRow
            Get
                Return CType(Me.Rows(index),QpiAreaAssign_TerritoryShowRow)
            End Get
        End Property
        
        Public Event QpiAreaAssign_TerritoryShowRowChanged As QpiAreaAssign_TerritoryShowRowChangeEventHandler
        
        Public Event QpiAreaAssign_TerritoryShowRowChanging As QpiAreaAssign_TerritoryShowRowChangeEventHandler
        
        Public Event QpiAreaAssign_TerritoryShowRowDeleted As QpiAreaAssign_TerritoryShowRowChangeEventHandler
        
        Public Event QpiAreaAssign_TerritoryShowRowDeleting As QpiAreaAssign_TerritoryShowRowChangeEventHandler
        
        Public Overloads Sub AddQpiAreaAssign_TerritoryShowRow(ByVal row As QpiAreaAssign_TerritoryShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddQpiAreaAssign_TerritoryShowRow(ByVal TerritoryDesc As String) As QpiAreaAssign_TerritoryShowRow
            Dim rowQpiAreaAssign_TerritoryShowRow As QpiAreaAssign_TerritoryShowRow = CType(Me.NewRow,QpiAreaAssign_TerritoryShowRow)
            rowQpiAreaAssign_TerritoryShowRow.ItemArray = New Object() {TerritoryDesc}
            Me.Rows.Add(rowQpiAreaAssign_TerritoryShowRow)
            Return rowQpiAreaAssign_TerritoryShowRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As QpiAreaAssign_TerritoryShowDataTable = CType(MyBase.Clone,QpiAreaAssign_TerritoryShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New QpiAreaAssign_TerritoryShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnTerritoryDesc = Me.Columns("TerritoryDesc")
        End Sub
        
        Private Sub InitClass()
            Me.columnTerritoryDesc = New DataColumn("TerritoryDesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTerritoryDesc)
            Me.columnTerritoryDesc.ReadOnly = true
        End Sub
        
        Public Function NewQpiAreaAssign_TerritoryShowRow() As QpiAreaAssign_TerritoryShowRow
            Return CType(Me.NewRow,QpiAreaAssign_TerritoryShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New QpiAreaAssign_TerritoryShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(QpiAreaAssign_TerritoryShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.QpiAreaAssign_TerritoryShowRowChangedEvent) Is Nothing) Then
                RaiseEvent QpiAreaAssign_TerritoryShowRowChanged(Me, New QpiAreaAssign_TerritoryShowRowChangeEvent(CType(e.Row,QpiAreaAssign_TerritoryShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.QpiAreaAssign_TerritoryShowRowChangingEvent) Is Nothing) Then
                RaiseEvent QpiAreaAssign_TerritoryShowRowChanging(Me, New QpiAreaAssign_TerritoryShowRowChangeEvent(CType(e.Row,QpiAreaAssign_TerritoryShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.QpiAreaAssign_TerritoryShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent QpiAreaAssign_TerritoryShowRowDeleted(Me, New QpiAreaAssign_TerritoryShowRowChangeEvent(CType(e.Row,QpiAreaAssign_TerritoryShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.QpiAreaAssign_TerritoryShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent QpiAreaAssign_TerritoryShowRowDeleting(Me, New QpiAreaAssign_TerritoryShowRowChangeEvent(CType(e.Row,QpiAreaAssign_TerritoryShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveQpiAreaAssign_TerritoryShowRow(ByVal row As QpiAreaAssign_TerritoryShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QpiAreaAssign_TerritoryShowRow
        Inherits DataRow
        
        Private tableQpiAreaAssign_TerritoryShow As QpiAreaAssign_TerritoryShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableQpiAreaAssign_TerritoryShow = CType(Me.Table,QpiAreaAssign_TerritoryShowDataTable)
        End Sub
        
        Public Property TerritoryDesc As String
            Get
                Try 
                    Return CType(Me(Me.tableQpiAreaAssign_TerritoryShow.TerritoryDescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQpiAreaAssign_TerritoryShow.TerritoryDescColumn) = value
            End Set
        End Property
        
        Public Function IsTerritoryDescNull() As Boolean
            Return Me.IsNull(Me.tableQpiAreaAssign_TerritoryShow.TerritoryDescColumn)
        End Function
        
        Public Sub SetTerritoryDescNull()
            Me(Me.tableQpiAreaAssign_TerritoryShow.TerritoryDescColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QpiAreaAssign_TerritoryShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As QpiAreaAssign_TerritoryShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As QpiAreaAssign_TerritoryShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As QpiAreaAssign_TerritoryShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QpiAreaAssign_TableShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnRowid As DataColumn
        
        Private columnMedrep As DataColumn
        
        Private columnTerritory As DataColumn
        
        Private columnStartDate As DataColumn
        
        Private columnEndDate As DataColumn
        
        Friend Sub New()
            MyBase.New("QpiAreaAssign_TableShow")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property RowidColumn As DataColumn
            Get
                Return Me.columnRowid
            End Get
        End Property
        
        Friend ReadOnly Property MedrepColumn As DataColumn
            Get
                Return Me.columnMedrep
            End Get
        End Property
        
        Friend ReadOnly Property TerritoryColumn As DataColumn
            Get
                Return Me.columnTerritory
            End Get
        End Property
        
        Friend ReadOnly Property StartDateColumn As DataColumn
            Get
                Return Me.columnStartDate
            End Get
        End Property
        
        Friend ReadOnly Property EndDateColumn As DataColumn
            Get
                Return Me.columnEndDate
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As QpiAreaAssign_TableShowRow
            Get
                Return CType(Me.Rows(index),QpiAreaAssign_TableShowRow)
            End Get
        End Property
        
        Public Event QpiAreaAssign_TableShowRowChanged As QpiAreaAssign_TableShowRowChangeEventHandler
        
        Public Event QpiAreaAssign_TableShowRowChanging As QpiAreaAssign_TableShowRowChangeEventHandler
        
        Public Event QpiAreaAssign_TableShowRowDeleted As QpiAreaAssign_TableShowRowChangeEventHandler
        
        Public Event QpiAreaAssign_TableShowRowDeleting As QpiAreaAssign_TableShowRowChangeEventHandler
        
        Public Overloads Sub AddQpiAreaAssign_TableShowRow(ByVal row As QpiAreaAssign_TableShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddQpiAreaAssign_TableShowRow(ByVal Medrep As String, ByVal Territory As String, ByVal StartDate As Date, ByVal EndDate As Date) As QpiAreaAssign_TableShowRow
            Dim rowQpiAreaAssign_TableShowRow As QpiAreaAssign_TableShowRow = CType(Me.NewRow,QpiAreaAssign_TableShowRow)
            rowQpiAreaAssign_TableShowRow.ItemArray = New Object() {Nothing, Medrep, Territory, StartDate, EndDate}
            Me.Rows.Add(rowQpiAreaAssign_TableShowRow)
            Return rowQpiAreaAssign_TableShowRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As QpiAreaAssign_TableShowDataTable = CType(MyBase.Clone,QpiAreaAssign_TableShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New QpiAreaAssign_TableShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnRowid = Me.Columns("Rowid")
            Me.columnMedrep = Me.Columns("Medrep")
            Me.columnTerritory = Me.Columns("Territory")
            Me.columnStartDate = Me.Columns("StartDate")
            Me.columnEndDate = Me.Columns("EndDate")
        End Sub
        
        Private Sub InitClass()
            Me.columnRowid = New DataColumn("Rowid", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRowid)
            Me.columnMedrep = New DataColumn("Medrep", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMedrep)
            Me.columnTerritory = New DataColumn("Territory", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTerritory)
            Me.columnStartDate = New DataColumn("StartDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStartDate)
            Me.columnEndDate = New DataColumn("EndDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEndDate)
            Me.columnRowid.AutoIncrement = true
            Me.columnRowid.AllowDBNull = false
            Me.columnRowid.ReadOnly = true
            Me.columnMedrep.ReadOnly = true
            Me.columnTerritory.ReadOnly = true
            Me.columnStartDate.AllowDBNull = false
            Me.columnEndDate.AllowDBNull = false
        End Sub
        
        Public Function NewQpiAreaAssign_TableShowRow() As QpiAreaAssign_TableShowRow
            Return CType(Me.NewRow,QpiAreaAssign_TableShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New QpiAreaAssign_TableShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(QpiAreaAssign_TableShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.QpiAreaAssign_TableShowRowChangedEvent) Is Nothing) Then
                RaiseEvent QpiAreaAssign_TableShowRowChanged(Me, New QpiAreaAssign_TableShowRowChangeEvent(CType(e.Row,QpiAreaAssign_TableShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.QpiAreaAssign_TableShowRowChangingEvent) Is Nothing) Then
                RaiseEvent QpiAreaAssign_TableShowRowChanging(Me, New QpiAreaAssign_TableShowRowChangeEvent(CType(e.Row,QpiAreaAssign_TableShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.QpiAreaAssign_TableShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent QpiAreaAssign_TableShowRowDeleted(Me, New QpiAreaAssign_TableShowRowChangeEvent(CType(e.Row,QpiAreaAssign_TableShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.QpiAreaAssign_TableShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent QpiAreaAssign_TableShowRowDeleting(Me, New QpiAreaAssign_TableShowRowChangeEvent(CType(e.Row,QpiAreaAssign_TableShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveQpiAreaAssign_TableShowRow(ByVal row As QpiAreaAssign_TableShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QpiAreaAssign_TableShowRow
        Inherits DataRow
        
        Private tableQpiAreaAssign_TableShow As QpiAreaAssign_TableShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableQpiAreaAssign_TableShow = CType(Me.Table,QpiAreaAssign_TableShowDataTable)
        End Sub
        
        Public Property Rowid As Integer
            Get
                Return CType(Me(Me.tableQpiAreaAssign_TableShow.RowidColumn),Integer)
            End Get
            Set
                Me(Me.tableQpiAreaAssign_TableShow.RowidColumn) = value
            End Set
        End Property
        
        Public Property Medrep As String
            Get
                Try 
                    Return CType(Me(Me.tableQpiAreaAssign_TableShow.MedrepColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQpiAreaAssign_TableShow.MedrepColumn) = value
            End Set
        End Property
        
        Public Property Territory As String
            Get
                Try 
                    Return CType(Me(Me.tableQpiAreaAssign_TableShow.TerritoryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQpiAreaAssign_TableShow.TerritoryColumn) = value
            End Set
        End Property
        
        Public Property StartDate As Date
            Get
                Return CType(Me(Me.tableQpiAreaAssign_TableShow.StartDateColumn),Date)
            End Get
            Set
                Me(Me.tableQpiAreaAssign_TableShow.StartDateColumn) = value
            End Set
        End Property
        
        Public Property EndDate As Date
            Get
                Return CType(Me(Me.tableQpiAreaAssign_TableShow.EndDateColumn),Date)
            End Get
            Set
                Me(Me.tableQpiAreaAssign_TableShow.EndDateColumn) = value
            End Set
        End Property
        
        Public Function IsMedrepNull() As Boolean
            Return Me.IsNull(Me.tableQpiAreaAssign_TableShow.MedrepColumn)
        End Function
        
        Public Sub SetMedrepNull()
            Me(Me.tableQpiAreaAssign_TableShow.MedrepColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTerritoryNull() As Boolean
            Return Me.IsNull(Me.tableQpiAreaAssign_TableShow.TerritoryColumn)
        End Function
        
        Public Sub SetTerritoryNull()
            Me(Me.tableQpiAreaAssign_TableShow.TerritoryColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QpiAreaAssign_TableShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As QpiAreaAssign_TableShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As QpiAreaAssign_TableShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As QpiAreaAssign_TableShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QpiAreaAssign_MedrepShow1DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMedrep As DataColumn
        
        Private columnMrCode As DataColumn
        
        Private columnMrName As DataColumn
        
        Friend Sub New()
            MyBase.New("QpiAreaAssign_MedrepShow1")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property MedrepColumn As DataColumn
            Get
                Return Me.columnMedrep
            End Get
        End Property
        
        Friend ReadOnly Property MrCodeColumn As DataColumn
            Get
                Return Me.columnMrCode
            End Get
        End Property
        
        Friend ReadOnly Property MrNameColumn As DataColumn
            Get
                Return Me.columnMrName
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As QpiAreaAssign_MedrepShow1Row
            Get
                Return CType(Me.Rows(index),QpiAreaAssign_MedrepShow1Row)
            End Get
        End Property
        
        Public Event QpiAreaAssign_MedrepShow1RowChanged As QpiAreaAssign_MedrepShow1RowChangeEventHandler
        
        Public Event QpiAreaAssign_MedrepShow1RowChanging As QpiAreaAssign_MedrepShow1RowChangeEventHandler
        
        Public Event QpiAreaAssign_MedrepShow1RowDeleted As QpiAreaAssign_MedrepShow1RowChangeEventHandler
        
        Public Event QpiAreaAssign_MedrepShow1RowDeleting As QpiAreaAssign_MedrepShow1RowChangeEventHandler
        
        Public Overloads Sub AddQpiAreaAssign_MedrepShow1Row(ByVal row As QpiAreaAssign_MedrepShow1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddQpiAreaAssign_MedrepShow1Row(ByVal Medrep As String, ByVal MrCode As String, ByVal MrName As String) As QpiAreaAssign_MedrepShow1Row
            Dim rowQpiAreaAssign_MedrepShow1Row As QpiAreaAssign_MedrepShow1Row = CType(Me.NewRow,QpiAreaAssign_MedrepShow1Row)
            rowQpiAreaAssign_MedrepShow1Row.ItemArray = New Object() {Medrep, MrCode, MrName}
            Me.Rows.Add(rowQpiAreaAssign_MedrepShow1Row)
            Return rowQpiAreaAssign_MedrepShow1Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As QpiAreaAssign_MedrepShow1DataTable = CType(MyBase.Clone,QpiAreaAssign_MedrepShow1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New QpiAreaAssign_MedrepShow1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMedrep = Me.Columns("Medrep")
            Me.columnMrCode = Me.Columns("MrCode")
            Me.columnMrName = Me.Columns("MrName")
        End Sub
        
        Private Sub InitClass()
            Me.columnMedrep = New DataColumn("Medrep", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMedrep)
            Me.columnMrCode = New DataColumn("MrCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMrCode)
            Me.columnMrName = New DataColumn("MrName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMrName)
            Me.columnMedrep.ReadOnly = true
            Me.columnMrCode.AllowDBNull = false
            Me.columnMrName.AllowDBNull = false
        End Sub
        
        Public Function NewQpiAreaAssign_MedrepShow1Row() As QpiAreaAssign_MedrepShow1Row
            Return CType(Me.NewRow,QpiAreaAssign_MedrepShow1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New QpiAreaAssign_MedrepShow1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(QpiAreaAssign_MedrepShow1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.QpiAreaAssign_MedrepShow1RowChangedEvent) Is Nothing) Then
                RaiseEvent QpiAreaAssign_MedrepShow1RowChanged(Me, New QpiAreaAssign_MedrepShow1RowChangeEvent(CType(e.Row,QpiAreaAssign_MedrepShow1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.QpiAreaAssign_MedrepShow1RowChangingEvent) Is Nothing) Then
                RaiseEvent QpiAreaAssign_MedrepShow1RowChanging(Me, New QpiAreaAssign_MedrepShow1RowChangeEvent(CType(e.Row,QpiAreaAssign_MedrepShow1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.QpiAreaAssign_MedrepShow1RowDeletedEvent) Is Nothing) Then
                RaiseEvent QpiAreaAssign_MedrepShow1RowDeleted(Me, New QpiAreaAssign_MedrepShow1RowChangeEvent(CType(e.Row,QpiAreaAssign_MedrepShow1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.QpiAreaAssign_MedrepShow1RowDeletingEvent) Is Nothing) Then
                RaiseEvent QpiAreaAssign_MedrepShow1RowDeleting(Me, New QpiAreaAssign_MedrepShow1RowChangeEvent(CType(e.Row,QpiAreaAssign_MedrepShow1Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveQpiAreaAssign_MedrepShow1Row(ByVal row As QpiAreaAssign_MedrepShow1Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QpiAreaAssign_MedrepShow1Row
        Inherits DataRow
        
        Private tableQpiAreaAssign_MedrepShow1 As QpiAreaAssign_MedrepShow1DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableQpiAreaAssign_MedrepShow1 = CType(Me.Table,QpiAreaAssign_MedrepShow1DataTable)
        End Sub
        
        Public Property Medrep As String
            Get
                Try 
                    Return CType(Me(Me.tableQpiAreaAssign_MedrepShow1.MedrepColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQpiAreaAssign_MedrepShow1.MedrepColumn) = value
            End Set
        End Property
        
        Public Property MrCode As String
            Get
                Return CType(Me(Me.tableQpiAreaAssign_MedrepShow1.MrCodeColumn),String)
            End Get
            Set
                Me(Me.tableQpiAreaAssign_MedrepShow1.MrCodeColumn) = value
            End Set
        End Property
        
        Public Property MrName As String
            Get
                Return CType(Me(Me.tableQpiAreaAssign_MedrepShow1.MrNameColumn),String)
            End Get
            Set
                Me(Me.tableQpiAreaAssign_MedrepShow1.MrNameColumn) = value
            End Set
        End Property
        
        Public Function IsMedrepNull() As Boolean
            Return Me.IsNull(Me.tableQpiAreaAssign_MedrepShow1.MedrepColumn)
        End Function
        
        Public Sub SetMedrepNull()
            Me(Me.tableQpiAreaAssign_MedrepShow1.MedrepColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QpiAreaAssign_MedrepShow1RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As QpiAreaAssign_MedrepShow1Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As QpiAreaAssign_MedrepShow1Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As QpiAreaAssign_MedrepShow1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QpiAreaAssign_TerritoryShow1DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnTerritoryDesc As DataColumn
        
        Friend Sub New()
            MyBase.New("QpiAreaAssign_TerritoryShow1")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property TerritoryDescColumn As DataColumn
            Get
                Return Me.columnTerritoryDesc
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As QpiAreaAssign_TerritoryShow1Row
            Get
                Return CType(Me.Rows(index),QpiAreaAssign_TerritoryShow1Row)
            End Get
        End Property
        
        Public Event QpiAreaAssign_TerritoryShow1RowChanged As QpiAreaAssign_TerritoryShow1RowChangeEventHandler
        
        Public Event QpiAreaAssign_TerritoryShow1RowChanging As QpiAreaAssign_TerritoryShow1RowChangeEventHandler
        
        Public Event QpiAreaAssign_TerritoryShow1RowDeleted As QpiAreaAssign_TerritoryShow1RowChangeEventHandler
        
        Public Event QpiAreaAssign_TerritoryShow1RowDeleting As QpiAreaAssign_TerritoryShow1RowChangeEventHandler
        
        Public Overloads Sub AddQpiAreaAssign_TerritoryShow1Row(ByVal row As QpiAreaAssign_TerritoryShow1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddQpiAreaAssign_TerritoryShow1Row(ByVal TerritoryDesc As String) As QpiAreaAssign_TerritoryShow1Row
            Dim rowQpiAreaAssign_TerritoryShow1Row As QpiAreaAssign_TerritoryShow1Row = CType(Me.NewRow,QpiAreaAssign_TerritoryShow1Row)
            rowQpiAreaAssign_TerritoryShow1Row.ItemArray = New Object() {TerritoryDesc}
            Me.Rows.Add(rowQpiAreaAssign_TerritoryShow1Row)
            Return rowQpiAreaAssign_TerritoryShow1Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As QpiAreaAssign_TerritoryShow1DataTable = CType(MyBase.Clone,QpiAreaAssign_TerritoryShow1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New QpiAreaAssign_TerritoryShow1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnTerritoryDesc = Me.Columns("TerritoryDesc")
        End Sub
        
        Private Sub InitClass()
            Me.columnTerritoryDesc = New DataColumn("TerritoryDesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTerritoryDesc)
            Me.columnTerritoryDesc.ReadOnly = true
        End Sub
        
        Public Function NewQpiAreaAssign_TerritoryShow1Row() As QpiAreaAssign_TerritoryShow1Row
            Return CType(Me.NewRow,QpiAreaAssign_TerritoryShow1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New QpiAreaAssign_TerritoryShow1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(QpiAreaAssign_TerritoryShow1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.QpiAreaAssign_TerritoryShow1RowChangedEvent) Is Nothing) Then
                RaiseEvent QpiAreaAssign_TerritoryShow1RowChanged(Me, New QpiAreaAssign_TerritoryShow1RowChangeEvent(CType(e.Row,QpiAreaAssign_TerritoryShow1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.QpiAreaAssign_TerritoryShow1RowChangingEvent) Is Nothing) Then
                RaiseEvent QpiAreaAssign_TerritoryShow1RowChanging(Me, New QpiAreaAssign_TerritoryShow1RowChangeEvent(CType(e.Row,QpiAreaAssign_TerritoryShow1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.QpiAreaAssign_TerritoryShow1RowDeletedEvent) Is Nothing) Then
                RaiseEvent QpiAreaAssign_TerritoryShow1RowDeleted(Me, New QpiAreaAssign_TerritoryShow1RowChangeEvent(CType(e.Row,QpiAreaAssign_TerritoryShow1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.QpiAreaAssign_TerritoryShow1RowDeletingEvent) Is Nothing) Then
                RaiseEvent QpiAreaAssign_TerritoryShow1RowDeleting(Me, New QpiAreaAssign_TerritoryShow1RowChangeEvent(CType(e.Row,QpiAreaAssign_TerritoryShow1Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveQpiAreaAssign_TerritoryShow1Row(ByVal row As QpiAreaAssign_TerritoryShow1Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QpiAreaAssign_TerritoryShow1Row
        Inherits DataRow
        
        Private tableQpiAreaAssign_TerritoryShow1 As QpiAreaAssign_TerritoryShow1DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableQpiAreaAssign_TerritoryShow1 = CType(Me.Table,QpiAreaAssign_TerritoryShow1DataTable)
        End Sub
        
        Public Property TerritoryDesc As String
            Get
                Try 
                    Return CType(Me(Me.tableQpiAreaAssign_TerritoryShow1.TerritoryDescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQpiAreaAssign_TerritoryShow1.TerritoryDescColumn) = value
            End Set
        End Property
        
        Public Function IsTerritoryDescNull() As Boolean
            Return Me.IsNull(Me.tableQpiAreaAssign_TerritoryShow1.TerritoryDescColumn)
        End Function
        
        Public Sub SetTerritoryDescNull()
            Me(Me.tableQpiAreaAssign_TerritoryShow1.TerritoryDescColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QpiAreaAssign_TerritoryShow1RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As QpiAreaAssign_TerritoryShow1Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As QpiAreaAssign_TerritoryShow1Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As QpiAreaAssign_TerritoryShow1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
