'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2407
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class MyDataSetDB
    Inherits DataSet
    
    Private tableItemDivision As ItemDivisionDataTable
    
    Private tableDivName As DivNameDataTable
    
    Private tableItemDesc As ItemDescDataTable
    
    Private tabledatetab As datetabDataTable
    
    Private tableQAreaAssignA_Show As QAreaAssignA_ShowDataTable
    
    Private tableQAreaAssignP_Show As QAreaAssignP_ShowDataTable
    
    Private tableMRcombo As MRcomboDataTable
    
    Private tableQAreaAssign_Show As QAreaAssign_ShowDataTable
    
    Private tableGenericQryProc As GenericQryProcDataTable
    
    Private tableSupMR_Show As SupMR_ShowDataTable
    
    Private tableSupMR_ShowDSM As SupMR_ShowDSMDataTable
    
    Private tableSupMR_ShowPMR As SupMR_ShowPMRDataTable
    
    Private tableTeamDivision_Show As TeamDivision_ShowDataTable
    
    Private tableActDivision_Show As ActDivision_ShowDataTable
    
    Private tableMRterri_Show As MRterri_ShowDataTable
    
    Private tableMRterriT_Show As MRterriT_ShowDataTable
    
    Private tableMRterriP_Show As MRterriP_ShowDataTable
    
    Private tableMRcombo2 As MRcombo2DataTable
    
    Private tableBudget As BudgetDataTable
    
    Private tableYear As YearDataTable
    
    Private tableLineItem As LineItemDataTable
    
    Private tableItemB As ItemBDataTable
    
    Private tableItemBudget As ItemBudgetDataTable
    
    Private tableSup_Div_Show As Sup_Div_ShowDataTable
    
    Private tableSup_NSM_Show As Sup_NSM_ShowDataTable
    
    Private tableNSM_Combo As NSM_ComboDataTable
    
    Private tableDiv_Combo As Div_ComboDataTable
    
    Private tableDivSubGrp_Show As DivSubGrp_ShowDataTable
    
    Private tableDivSubGrp_Combo As DivSubGrp_ComboDataTable
    
    Private tableIsCT_Show As IsCT_ShowDataTable
    
    Private tableIsMercCT As IsMercCTDataTable
    
    Private tableUserTabCT_Show As UserTabCT_ShowDataTable
    
    Private tableTerKeyProduct_Show As TerKeyProduct_ShowDataTable
    
    Private tableIMSB_Show As IMSB_ShowDataTable
    
    Private tableTerritoryLst As TerritoryLstDataTable
    
    Private tableExcludeCustomerZue_Show As ExcludeCustomerZue_ShowDataTable
    
    Private tablecboList As cboListDataTable
    
    Private tabledg4list As dg4listDataTable
    
    Private relationItemDivision_DivName As DataRelation
    
    Private relationItemDivision_ItemDesc As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("ItemDivision")) Is Nothing) Then
                Me.Tables.Add(New ItemDivisionDataTable(ds.Tables("ItemDivision")))
            End If
            If (Not (ds.Tables("DivName")) Is Nothing) Then
                Me.Tables.Add(New DivNameDataTable(ds.Tables("DivName")))
            End If
            If (Not (ds.Tables("ItemDesc")) Is Nothing) Then
                Me.Tables.Add(New ItemDescDataTable(ds.Tables("ItemDesc")))
            End If
            If (Not (ds.Tables("datetab")) Is Nothing) Then
                Me.Tables.Add(New datetabDataTable(ds.Tables("datetab")))
            End If
            If (Not (ds.Tables("QAreaAssignA_Show")) Is Nothing) Then
                Me.Tables.Add(New QAreaAssignA_ShowDataTable(ds.Tables("QAreaAssignA_Show")))
            End If
            If (Not (ds.Tables("QAreaAssignP_Show")) Is Nothing) Then
                Me.Tables.Add(New QAreaAssignP_ShowDataTable(ds.Tables("QAreaAssignP_Show")))
            End If
            If (Not (ds.Tables("MRcombo")) Is Nothing) Then
                Me.Tables.Add(New MRcomboDataTable(ds.Tables("MRcombo")))
            End If
            If (Not (ds.Tables("QAreaAssign_Show")) Is Nothing) Then
                Me.Tables.Add(New QAreaAssign_ShowDataTable(ds.Tables("QAreaAssign_Show")))
            End If
            If (Not (ds.Tables("GenericQryProc")) Is Nothing) Then
                Me.Tables.Add(New GenericQryProcDataTable(ds.Tables("GenericQryProc")))
            End If
            If (Not (ds.Tables("SupMR_Show")) Is Nothing) Then
                Me.Tables.Add(New SupMR_ShowDataTable(ds.Tables("SupMR_Show")))
            End If
            If (Not (ds.Tables("SupMR_ShowDSM")) Is Nothing) Then
                Me.Tables.Add(New SupMR_ShowDSMDataTable(ds.Tables("SupMR_ShowDSM")))
            End If
            If (Not (ds.Tables("SupMR_ShowPMR")) Is Nothing) Then
                Me.Tables.Add(New SupMR_ShowPMRDataTable(ds.Tables("SupMR_ShowPMR")))
            End If
            If (Not (ds.Tables("TeamDivision_Show")) Is Nothing) Then
                Me.Tables.Add(New TeamDivision_ShowDataTable(ds.Tables("TeamDivision_Show")))
            End If
            If (Not (ds.Tables("ActDivision_Show")) Is Nothing) Then
                Me.Tables.Add(New ActDivision_ShowDataTable(ds.Tables("ActDivision_Show")))
            End If
            If (Not (ds.Tables("MRterri_Show")) Is Nothing) Then
                Me.Tables.Add(New MRterri_ShowDataTable(ds.Tables("MRterri_Show")))
            End If
            If (Not (ds.Tables("MRterriT_Show")) Is Nothing) Then
                Me.Tables.Add(New MRterriT_ShowDataTable(ds.Tables("MRterriT_Show")))
            End If
            If (Not (ds.Tables("MRterriP_Show")) Is Nothing) Then
                Me.Tables.Add(New MRterriP_ShowDataTable(ds.Tables("MRterriP_Show")))
            End If
            If (Not (ds.Tables("MRcombo2")) Is Nothing) Then
                Me.Tables.Add(New MRcombo2DataTable(ds.Tables("MRcombo2")))
            End If
            If (Not (ds.Tables("Budget")) Is Nothing) Then
                Me.Tables.Add(New BudgetDataTable(ds.Tables("Budget")))
            End If
            If (Not (ds.Tables("Year")) Is Nothing) Then
                Me.Tables.Add(New YearDataTable(ds.Tables("Year")))
            End If
            If (Not (ds.Tables("LineItem")) Is Nothing) Then
                Me.Tables.Add(New LineItemDataTable(ds.Tables("LineItem")))
            End If
            If (Not (ds.Tables("ItemB")) Is Nothing) Then
                Me.Tables.Add(New ItemBDataTable(ds.Tables("ItemB")))
            End If
            If (Not (ds.Tables("ItemBudget")) Is Nothing) Then
                Me.Tables.Add(New ItemBudgetDataTable(ds.Tables("ItemBudget")))
            End If
            If (Not (ds.Tables("Sup_Div_Show")) Is Nothing) Then
                Me.Tables.Add(New Sup_Div_ShowDataTable(ds.Tables("Sup_Div_Show")))
            End If
            If (Not (ds.Tables("Sup_NSM_Show")) Is Nothing) Then
                Me.Tables.Add(New Sup_NSM_ShowDataTable(ds.Tables("Sup_NSM_Show")))
            End If
            If (Not (ds.Tables("NSM_Combo")) Is Nothing) Then
                Me.Tables.Add(New NSM_ComboDataTable(ds.Tables("NSM_Combo")))
            End If
            If (Not (ds.Tables("Div_Combo")) Is Nothing) Then
                Me.Tables.Add(New Div_ComboDataTable(ds.Tables("Div_Combo")))
            End If
            If (Not (ds.Tables("DivSubGrp_Show")) Is Nothing) Then
                Me.Tables.Add(New DivSubGrp_ShowDataTable(ds.Tables("DivSubGrp_Show")))
            End If
            If (Not (ds.Tables("DivSubGrp_Combo")) Is Nothing) Then
                Me.Tables.Add(New DivSubGrp_ComboDataTable(ds.Tables("DivSubGrp_Combo")))
            End If
            If (Not (ds.Tables("IsCT_Show")) Is Nothing) Then
                Me.Tables.Add(New IsCT_ShowDataTable(ds.Tables("IsCT_Show")))
            End If
            If (Not (ds.Tables("IsMercCT")) Is Nothing) Then
                Me.Tables.Add(New IsMercCTDataTable(ds.Tables("IsMercCT")))
            End If
            If (Not (ds.Tables("UserTabCT_Show")) Is Nothing) Then
                Me.Tables.Add(New UserTabCT_ShowDataTable(ds.Tables("UserTabCT_Show")))
            End If
            If (Not (ds.Tables("TerKeyProduct_Show")) Is Nothing) Then
                Me.Tables.Add(New TerKeyProduct_ShowDataTable(ds.Tables("TerKeyProduct_Show")))
            End If
            If (Not (ds.Tables("IMSB_Show")) Is Nothing) Then
                Me.Tables.Add(New IMSB_ShowDataTable(ds.Tables("IMSB_Show")))
            End If
            If (Not (ds.Tables("TerritoryLst")) Is Nothing) Then
                Me.Tables.Add(New TerritoryLstDataTable(ds.Tables("TerritoryLst")))
            End If
            If (Not (ds.Tables("ExcludeCustomerZue_Show")) Is Nothing) Then
                Me.Tables.Add(New ExcludeCustomerZue_ShowDataTable(ds.Tables("ExcludeCustomerZue_Show")))
            End If
            If (Not (ds.Tables("cboList")) Is Nothing) Then
                Me.Tables.Add(New cboListDataTable(ds.Tables("cboList")))
            End If
            If (Not (ds.Tables("dg4list")) Is Nothing) Then
                Me.Tables.Add(New dg4listDataTable(ds.Tables("dg4list")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ItemDivision As ItemDivisionDataTable
        Get
            Return Me.tableItemDivision
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DivName As DivNameDataTable
        Get
            Return Me.tableDivName
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ItemDesc As ItemDescDataTable
        Get
            Return Me.tableItemDesc
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property datetab As datetabDataTable
        Get
            Return Me.tabledatetab
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property QAreaAssignA_Show As QAreaAssignA_ShowDataTable
        Get
            Return Me.tableQAreaAssignA_Show
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property QAreaAssignP_Show As QAreaAssignP_ShowDataTable
        Get
            Return Me.tableQAreaAssignP_Show
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MRcombo As MRcomboDataTable
        Get
            Return Me.tableMRcombo
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property QAreaAssign_Show As QAreaAssign_ShowDataTable
        Get
            Return Me.tableQAreaAssign_Show
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GenericQryProc As GenericQryProcDataTable
        Get
            Return Me.tableGenericQryProc
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SupMR_Show As SupMR_ShowDataTable
        Get
            Return Me.tableSupMR_Show
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SupMR_ShowDSM As SupMR_ShowDSMDataTable
        Get
            Return Me.tableSupMR_ShowDSM
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SupMR_ShowPMR As SupMR_ShowPMRDataTable
        Get
            Return Me.tableSupMR_ShowPMR
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TeamDivision_Show As TeamDivision_ShowDataTable
        Get
            Return Me.tableTeamDivision_Show
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ActDivision_Show As ActDivision_ShowDataTable
        Get
            Return Me.tableActDivision_Show
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MRterri_Show As MRterri_ShowDataTable
        Get
            Return Me.tableMRterri_Show
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MRterriT_Show As MRterriT_ShowDataTable
        Get
            Return Me.tableMRterriT_Show
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MRterriP_Show As MRterriP_ShowDataTable
        Get
            Return Me.tableMRterriP_Show
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MRcombo2 As MRcombo2DataTable
        Get
            Return Me.tableMRcombo2
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Budget As BudgetDataTable
        Get
            Return Me.tableBudget
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Year As YearDataTable
        Get
            Return Me.tableYear
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property LineItem As LineItemDataTable
        Get
            Return Me.tableLineItem
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ItemB As ItemBDataTable
        Get
            Return Me.tableItemB
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ItemBudget As ItemBudgetDataTable
        Get
            Return Me.tableItemBudget
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Sup_Div_Show As Sup_Div_ShowDataTable
        Get
            Return Me.tableSup_Div_Show
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Sup_NSM_Show As Sup_NSM_ShowDataTable
        Get
            Return Me.tableSup_NSM_Show
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NSM_Combo As NSM_ComboDataTable
        Get
            Return Me.tableNSM_Combo
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Div_Combo As Div_ComboDataTable
        Get
            Return Me.tableDiv_Combo
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DivSubGrp_Show As DivSubGrp_ShowDataTable
        Get
            Return Me.tableDivSubGrp_Show
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DivSubGrp_Combo As DivSubGrp_ComboDataTable
        Get
            Return Me.tableDivSubGrp_Combo
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IsCT_Show As IsCT_ShowDataTable
        Get
            Return Me.tableIsCT_Show
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IsMercCT As IsMercCTDataTable
        Get
            Return Me.tableIsMercCT
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property UserTabCT_Show As UserTabCT_ShowDataTable
        Get
            Return Me.tableUserTabCT_Show
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TerKeyProduct_Show As TerKeyProduct_ShowDataTable
        Get
            Return Me.tableTerKeyProduct_Show
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IMSB_Show As IMSB_ShowDataTable
        Get
            Return Me.tableIMSB_Show
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TerritoryLst As TerritoryLstDataTable
        Get
            Return Me.tableTerritoryLst
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ExcludeCustomerZue_Show As ExcludeCustomerZue_ShowDataTable
        Get
            Return Me.tableExcludeCustomerZue_Show
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property cboList As cboListDataTable
        Get
            Return Me.tablecboList
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dg4list As dg4listDataTable
        Get
            Return Me.tabledg4list
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As MyDataSetDB = CType(MyBase.Clone,MyDataSetDB)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("ItemDivision")) Is Nothing) Then
            Me.Tables.Add(New ItemDivisionDataTable(ds.Tables("ItemDivision")))
        End If
        If (Not (ds.Tables("DivName")) Is Nothing) Then
            Me.Tables.Add(New DivNameDataTable(ds.Tables("DivName")))
        End If
        If (Not (ds.Tables("ItemDesc")) Is Nothing) Then
            Me.Tables.Add(New ItemDescDataTable(ds.Tables("ItemDesc")))
        End If
        If (Not (ds.Tables("datetab")) Is Nothing) Then
            Me.Tables.Add(New datetabDataTable(ds.Tables("datetab")))
        End If
        If (Not (ds.Tables("QAreaAssignA_Show")) Is Nothing) Then
            Me.Tables.Add(New QAreaAssignA_ShowDataTable(ds.Tables("QAreaAssignA_Show")))
        End If
        If (Not (ds.Tables("QAreaAssignP_Show")) Is Nothing) Then
            Me.Tables.Add(New QAreaAssignP_ShowDataTable(ds.Tables("QAreaAssignP_Show")))
        End If
        If (Not (ds.Tables("MRcombo")) Is Nothing) Then
            Me.Tables.Add(New MRcomboDataTable(ds.Tables("MRcombo")))
        End If
        If (Not (ds.Tables("QAreaAssign_Show")) Is Nothing) Then
            Me.Tables.Add(New QAreaAssign_ShowDataTable(ds.Tables("QAreaAssign_Show")))
        End If
        If (Not (ds.Tables("GenericQryProc")) Is Nothing) Then
            Me.Tables.Add(New GenericQryProcDataTable(ds.Tables("GenericQryProc")))
        End If
        If (Not (ds.Tables("SupMR_Show")) Is Nothing) Then
            Me.Tables.Add(New SupMR_ShowDataTable(ds.Tables("SupMR_Show")))
        End If
        If (Not (ds.Tables("SupMR_ShowDSM")) Is Nothing) Then
            Me.Tables.Add(New SupMR_ShowDSMDataTable(ds.Tables("SupMR_ShowDSM")))
        End If
        If (Not (ds.Tables("SupMR_ShowPMR")) Is Nothing) Then
            Me.Tables.Add(New SupMR_ShowPMRDataTable(ds.Tables("SupMR_ShowPMR")))
        End If
        If (Not (ds.Tables("TeamDivision_Show")) Is Nothing) Then
            Me.Tables.Add(New TeamDivision_ShowDataTable(ds.Tables("TeamDivision_Show")))
        End If
        If (Not (ds.Tables("ActDivision_Show")) Is Nothing) Then
            Me.Tables.Add(New ActDivision_ShowDataTable(ds.Tables("ActDivision_Show")))
        End If
        If (Not (ds.Tables("MRterri_Show")) Is Nothing) Then
            Me.Tables.Add(New MRterri_ShowDataTable(ds.Tables("MRterri_Show")))
        End If
        If (Not (ds.Tables("MRterriT_Show")) Is Nothing) Then
            Me.Tables.Add(New MRterriT_ShowDataTable(ds.Tables("MRterriT_Show")))
        End If
        If (Not (ds.Tables("MRterriP_Show")) Is Nothing) Then
            Me.Tables.Add(New MRterriP_ShowDataTable(ds.Tables("MRterriP_Show")))
        End If
        If (Not (ds.Tables("MRcombo2")) Is Nothing) Then
            Me.Tables.Add(New MRcombo2DataTable(ds.Tables("MRcombo2")))
        End If
        If (Not (ds.Tables("Budget")) Is Nothing) Then
            Me.Tables.Add(New BudgetDataTable(ds.Tables("Budget")))
        End If
        If (Not (ds.Tables("Year")) Is Nothing) Then
            Me.Tables.Add(New YearDataTable(ds.Tables("Year")))
        End If
        If (Not (ds.Tables("LineItem")) Is Nothing) Then
            Me.Tables.Add(New LineItemDataTable(ds.Tables("LineItem")))
        End If
        If (Not (ds.Tables("ItemB")) Is Nothing) Then
            Me.Tables.Add(New ItemBDataTable(ds.Tables("ItemB")))
        End If
        If (Not (ds.Tables("ItemBudget")) Is Nothing) Then
            Me.Tables.Add(New ItemBudgetDataTable(ds.Tables("ItemBudget")))
        End If
        If (Not (ds.Tables("Sup_Div_Show")) Is Nothing) Then
            Me.Tables.Add(New Sup_Div_ShowDataTable(ds.Tables("Sup_Div_Show")))
        End If
        If (Not (ds.Tables("Sup_NSM_Show")) Is Nothing) Then
            Me.Tables.Add(New Sup_NSM_ShowDataTable(ds.Tables("Sup_NSM_Show")))
        End If
        If (Not (ds.Tables("NSM_Combo")) Is Nothing) Then
            Me.Tables.Add(New NSM_ComboDataTable(ds.Tables("NSM_Combo")))
        End If
        If (Not (ds.Tables("Div_Combo")) Is Nothing) Then
            Me.Tables.Add(New Div_ComboDataTable(ds.Tables("Div_Combo")))
        End If
        If (Not (ds.Tables("DivSubGrp_Show")) Is Nothing) Then
            Me.Tables.Add(New DivSubGrp_ShowDataTable(ds.Tables("DivSubGrp_Show")))
        End If
        If (Not (ds.Tables("DivSubGrp_Combo")) Is Nothing) Then
            Me.Tables.Add(New DivSubGrp_ComboDataTable(ds.Tables("DivSubGrp_Combo")))
        End If
        If (Not (ds.Tables("IsCT_Show")) Is Nothing) Then
            Me.Tables.Add(New IsCT_ShowDataTable(ds.Tables("IsCT_Show")))
        End If
        If (Not (ds.Tables("IsMercCT")) Is Nothing) Then
            Me.Tables.Add(New IsMercCTDataTable(ds.Tables("IsMercCT")))
        End If
        If (Not (ds.Tables("UserTabCT_Show")) Is Nothing) Then
            Me.Tables.Add(New UserTabCT_ShowDataTable(ds.Tables("UserTabCT_Show")))
        End If
        If (Not (ds.Tables("TerKeyProduct_Show")) Is Nothing) Then
            Me.Tables.Add(New TerKeyProduct_ShowDataTable(ds.Tables("TerKeyProduct_Show")))
        End If
        If (Not (ds.Tables("IMSB_Show")) Is Nothing) Then
            Me.Tables.Add(New IMSB_ShowDataTable(ds.Tables("IMSB_Show")))
        End If
        If (Not (ds.Tables("TerritoryLst")) Is Nothing) Then
            Me.Tables.Add(New TerritoryLstDataTable(ds.Tables("TerritoryLst")))
        End If
        If (Not (ds.Tables("ExcludeCustomerZue_Show")) Is Nothing) Then
            Me.Tables.Add(New ExcludeCustomerZue_ShowDataTable(ds.Tables("ExcludeCustomerZue_Show")))
        End If
        If (Not (ds.Tables("cboList")) Is Nothing) Then
            Me.Tables.Add(New cboListDataTable(ds.Tables("cboList")))
        End If
        If (Not (ds.Tables("dg4list")) Is Nothing) Then
            Me.Tables.Add(New dg4listDataTable(ds.Tables("dg4list")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableItemDivision = CType(Me.Tables("ItemDivision"),ItemDivisionDataTable)
        If (Not (Me.tableItemDivision) Is Nothing) Then
            Me.tableItemDivision.InitVars
        End If
        Me.tableDivName = CType(Me.Tables("DivName"),DivNameDataTable)
        If (Not (Me.tableDivName) Is Nothing) Then
            Me.tableDivName.InitVars
        End If
        Me.tableItemDesc = CType(Me.Tables("ItemDesc"),ItemDescDataTable)
        If (Not (Me.tableItemDesc) Is Nothing) Then
            Me.tableItemDesc.InitVars
        End If
        Me.tabledatetab = CType(Me.Tables("datetab"),datetabDataTable)
        If (Not (Me.tabledatetab) Is Nothing) Then
            Me.tabledatetab.InitVars
        End If
        Me.tableQAreaAssignA_Show = CType(Me.Tables("QAreaAssignA_Show"),QAreaAssignA_ShowDataTable)
        If (Not (Me.tableQAreaAssignA_Show) Is Nothing) Then
            Me.tableQAreaAssignA_Show.InitVars
        End If
        Me.tableQAreaAssignP_Show = CType(Me.Tables("QAreaAssignP_Show"),QAreaAssignP_ShowDataTable)
        If (Not (Me.tableQAreaAssignP_Show) Is Nothing) Then
            Me.tableQAreaAssignP_Show.InitVars
        End If
        Me.tableMRcombo = CType(Me.Tables("MRcombo"),MRcomboDataTable)
        If (Not (Me.tableMRcombo) Is Nothing) Then
            Me.tableMRcombo.InitVars
        End If
        Me.tableQAreaAssign_Show = CType(Me.Tables("QAreaAssign_Show"),QAreaAssign_ShowDataTable)
        If (Not (Me.tableQAreaAssign_Show) Is Nothing) Then
            Me.tableQAreaAssign_Show.InitVars
        End If
        Me.tableGenericQryProc = CType(Me.Tables("GenericQryProc"),GenericQryProcDataTable)
        If (Not (Me.tableGenericQryProc) Is Nothing) Then
            Me.tableGenericQryProc.InitVars
        End If
        Me.tableSupMR_Show = CType(Me.Tables("SupMR_Show"),SupMR_ShowDataTable)
        If (Not (Me.tableSupMR_Show) Is Nothing) Then
            Me.tableSupMR_Show.InitVars
        End If
        Me.tableSupMR_ShowDSM = CType(Me.Tables("SupMR_ShowDSM"),SupMR_ShowDSMDataTable)
        If (Not (Me.tableSupMR_ShowDSM) Is Nothing) Then
            Me.tableSupMR_ShowDSM.InitVars
        End If
        Me.tableSupMR_ShowPMR = CType(Me.Tables("SupMR_ShowPMR"),SupMR_ShowPMRDataTable)
        If (Not (Me.tableSupMR_ShowPMR) Is Nothing) Then
            Me.tableSupMR_ShowPMR.InitVars
        End If
        Me.tableTeamDivision_Show = CType(Me.Tables("TeamDivision_Show"),TeamDivision_ShowDataTable)
        If (Not (Me.tableTeamDivision_Show) Is Nothing) Then
            Me.tableTeamDivision_Show.InitVars
        End If
        Me.tableActDivision_Show = CType(Me.Tables("ActDivision_Show"),ActDivision_ShowDataTable)
        If (Not (Me.tableActDivision_Show) Is Nothing) Then
            Me.tableActDivision_Show.InitVars
        End If
        Me.tableMRterri_Show = CType(Me.Tables("MRterri_Show"),MRterri_ShowDataTable)
        If (Not (Me.tableMRterri_Show) Is Nothing) Then
            Me.tableMRterri_Show.InitVars
        End If
        Me.tableMRterriT_Show = CType(Me.Tables("MRterriT_Show"),MRterriT_ShowDataTable)
        If (Not (Me.tableMRterriT_Show) Is Nothing) Then
            Me.tableMRterriT_Show.InitVars
        End If
        Me.tableMRterriP_Show = CType(Me.Tables("MRterriP_Show"),MRterriP_ShowDataTable)
        If (Not (Me.tableMRterriP_Show) Is Nothing) Then
            Me.tableMRterriP_Show.InitVars
        End If
        Me.tableMRcombo2 = CType(Me.Tables("MRcombo2"),MRcombo2DataTable)
        If (Not (Me.tableMRcombo2) Is Nothing) Then
            Me.tableMRcombo2.InitVars
        End If
        Me.tableBudget = CType(Me.Tables("Budget"),BudgetDataTable)
        If (Not (Me.tableBudget) Is Nothing) Then
            Me.tableBudget.InitVars
        End If
        Me.tableYear = CType(Me.Tables("Year"),YearDataTable)
        If (Not (Me.tableYear) Is Nothing) Then
            Me.tableYear.InitVars
        End If
        Me.tableLineItem = CType(Me.Tables("LineItem"),LineItemDataTable)
        If (Not (Me.tableLineItem) Is Nothing) Then
            Me.tableLineItem.InitVars
        End If
        Me.tableItemB = CType(Me.Tables("ItemB"),ItemBDataTable)
        If (Not (Me.tableItemB) Is Nothing) Then
            Me.tableItemB.InitVars
        End If
        Me.tableItemBudget = CType(Me.Tables("ItemBudget"),ItemBudgetDataTable)
        If (Not (Me.tableItemBudget) Is Nothing) Then
            Me.tableItemBudget.InitVars
        End If
        Me.tableSup_Div_Show = CType(Me.Tables("Sup_Div_Show"),Sup_Div_ShowDataTable)
        If (Not (Me.tableSup_Div_Show) Is Nothing) Then
            Me.tableSup_Div_Show.InitVars
        End If
        Me.tableSup_NSM_Show = CType(Me.Tables("Sup_NSM_Show"),Sup_NSM_ShowDataTable)
        If (Not (Me.tableSup_NSM_Show) Is Nothing) Then
            Me.tableSup_NSM_Show.InitVars
        End If
        Me.tableNSM_Combo = CType(Me.Tables("NSM_Combo"),NSM_ComboDataTable)
        If (Not (Me.tableNSM_Combo) Is Nothing) Then
            Me.tableNSM_Combo.InitVars
        End If
        Me.tableDiv_Combo = CType(Me.Tables("Div_Combo"),Div_ComboDataTable)
        If (Not (Me.tableDiv_Combo) Is Nothing) Then
            Me.tableDiv_Combo.InitVars
        End If
        Me.tableDivSubGrp_Show = CType(Me.Tables("DivSubGrp_Show"),DivSubGrp_ShowDataTable)
        If (Not (Me.tableDivSubGrp_Show) Is Nothing) Then
            Me.tableDivSubGrp_Show.InitVars
        End If
        Me.tableDivSubGrp_Combo = CType(Me.Tables("DivSubGrp_Combo"),DivSubGrp_ComboDataTable)
        If (Not (Me.tableDivSubGrp_Combo) Is Nothing) Then
            Me.tableDivSubGrp_Combo.InitVars
        End If
        Me.tableIsCT_Show = CType(Me.Tables("IsCT_Show"),IsCT_ShowDataTable)
        If (Not (Me.tableIsCT_Show) Is Nothing) Then
            Me.tableIsCT_Show.InitVars
        End If
        Me.tableIsMercCT = CType(Me.Tables("IsMercCT"),IsMercCTDataTable)
        If (Not (Me.tableIsMercCT) Is Nothing) Then
            Me.tableIsMercCT.InitVars
        End If
        Me.tableUserTabCT_Show = CType(Me.Tables("UserTabCT_Show"),UserTabCT_ShowDataTable)
        If (Not (Me.tableUserTabCT_Show) Is Nothing) Then
            Me.tableUserTabCT_Show.InitVars
        End If
        Me.tableTerKeyProduct_Show = CType(Me.Tables("TerKeyProduct_Show"),TerKeyProduct_ShowDataTable)
        If (Not (Me.tableTerKeyProduct_Show) Is Nothing) Then
            Me.tableTerKeyProduct_Show.InitVars
        End If
        Me.tableIMSB_Show = CType(Me.Tables("IMSB_Show"),IMSB_ShowDataTable)
        If (Not (Me.tableIMSB_Show) Is Nothing) Then
            Me.tableIMSB_Show.InitVars
        End If
        Me.tableTerritoryLst = CType(Me.Tables("TerritoryLst"),TerritoryLstDataTable)
        If (Not (Me.tableTerritoryLst) Is Nothing) Then
            Me.tableTerritoryLst.InitVars
        End If
        Me.tableExcludeCustomerZue_Show = CType(Me.Tables("ExcludeCustomerZue_Show"),ExcludeCustomerZue_ShowDataTable)
        If (Not (Me.tableExcludeCustomerZue_Show) Is Nothing) Then
            Me.tableExcludeCustomerZue_Show.InitVars
        End If
        Me.tablecboList = CType(Me.Tables("cboList"),cboListDataTable)
        If (Not (Me.tablecboList) Is Nothing) Then
            Me.tablecboList.InitVars
        End If
        Me.tabledg4list = CType(Me.Tables("dg4list"),dg4listDataTable)
        If (Not (Me.tabledg4list) Is Nothing) Then
            Me.tabledg4list.InitVars
        End If
        Me.relationItemDivision_DivName = Me.Relations("ItemDivision_DivName")
        Me.relationItemDivision_ItemDesc = Me.Relations("ItemDivision_ItemDesc")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "MyDataSetDB"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/MyDataSetDB.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableItemDivision = New ItemDivisionDataTable
        Me.Tables.Add(Me.tableItemDivision)
        Me.tableDivName = New DivNameDataTable
        Me.Tables.Add(Me.tableDivName)
        Me.tableItemDesc = New ItemDescDataTable
        Me.Tables.Add(Me.tableItemDesc)
        Me.tabledatetab = New datetabDataTable
        Me.Tables.Add(Me.tabledatetab)
        Me.tableQAreaAssignA_Show = New QAreaAssignA_ShowDataTable
        Me.Tables.Add(Me.tableQAreaAssignA_Show)
        Me.tableQAreaAssignP_Show = New QAreaAssignP_ShowDataTable
        Me.Tables.Add(Me.tableQAreaAssignP_Show)
        Me.tableMRcombo = New MRcomboDataTable
        Me.Tables.Add(Me.tableMRcombo)
        Me.tableQAreaAssign_Show = New QAreaAssign_ShowDataTable
        Me.Tables.Add(Me.tableQAreaAssign_Show)
        Me.tableGenericQryProc = New GenericQryProcDataTable
        Me.Tables.Add(Me.tableGenericQryProc)
        Me.tableSupMR_Show = New SupMR_ShowDataTable
        Me.Tables.Add(Me.tableSupMR_Show)
        Me.tableSupMR_ShowDSM = New SupMR_ShowDSMDataTable
        Me.Tables.Add(Me.tableSupMR_ShowDSM)
        Me.tableSupMR_ShowPMR = New SupMR_ShowPMRDataTable
        Me.Tables.Add(Me.tableSupMR_ShowPMR)
        Me.tableTeamDivision_Show = New TeamDivision_ShowDataTable
        Me.Tables.Add(Me.tableTeamDivision_Show)
        Me.tableActDivision_Show = New ActDivision_ShowDataTable
        Me.Tables.Add(Me.tableActDivision_Show)
        Me.tableMRterri_Show = New MRterri_ShowDataTable
        Me.Tables.Add(Me.tableMRterri_Show)
        Me.tableMRterriT_Show = New MRterriT_ShowDataTable
        Me.Tables.Add(Me.tableMRterriT_Show)
        Me.tableMRterriP_Show = New MRterriP_ShowDataTable
        Me.Tables.Add(Me.tableMRterriP_Show)
        Me.tableMRcombo2 = New MRcombo2DataTable
        Me.Tables.Add(Me.tableMRcombo2)
        Me.tableBudget = New BudgetDataTable
        Me.Tables.Add(Me.tableBudget)
        Me.tableYear = New YearDataTable
        Me.Tables.Add(Me.tableYear)
        Me.tableLineItem = New LineItemDataTable
        Me.Tables.Add(Me.tableLineItem)
        Me.tableItemB = New ItemBDataTable
        Me.Tables.Add(Me.tableItemB)
        Me.tableItemBudget = New ItemBudgetDataTable
        Me.Tables.Add(Me.tableItemBudget)
        Me.tableSup_Div_Show = New Sup_Div_ShowDataTable
        Me.Tables.Add(Me.tableSup_Div_Show)
        Me.tableSup_NSM_Show = New Sup_NSM_ShowDataTable
        Me.Tables.Add(Me.tableSup_NSM_Show)
        Me.tableNSM_Combo = New NSM_ComboDataTable
        Me.Tables.Add(Me.tableNSM_Combo)
        Me.tableDiv_Combo = New Div_ComboDataTable
        Me.Tables.Add(Me.tableDiv_Combo)
        Me.tableDivSubGrp_Show = New DivSubGrp_ShowDataTable
        Me.Tables.Add(Me.tableDivSubGrp_Show)
        Me.tableDivSubGrp_Combo = New DivSubGrp_ComboDataTable
        Me.Tables.Add(Me.tableDivSubGrp_Combo)
        Me.tableIsCT_Show = New IsCT_ShowDataTable
        Me.Tables.Add(Me.tableIsCT_Show)
        Me.tableIsMercCT = New IsMercCTDataTable
        Me.Tables.Add(Me.tableIsMercCT)
        Me.tableUserTabCT_Show = New UserTabCT_ShowDataTable
        Me.Tables.Add(Me.tableUserTabCT_Show)
        Me.tableTerKeyProduct_Show = New TerKeyProduct_ShowDataTable
        Me.Tables.Add(Me.tableTerKeyProduct_Show)
        Me.tableIMSB_Show = New IMSB_ShowDataTable
        Me.Tables.Add(Me.tableIMSB_Show)
        Me.tableTerritoryLst = New TerritoryLstDataTable
        Me.Tables.Add(Me.tableTerritoryLst)
        Me.tableExcludeCustomerZue_Show = New ExcludeCustomerZue_ShowDataTable
        Me.Tables.Add(Me.tableExcludeCustomerZue_Show)
        Me.tablecboList = New cboListDataTable
        Me.Tables.Add(Me.tablecboList)
        Me.tabledg4list = New dg4listDataTable
        Me.Tables.Add(Me.tabledg4list)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("ItemDivision_DivName", New DataColumn() {Me.tableItemDivision.ItemDivision_IdColumn}, New DataColumn() {Me.tableDivName.ItemDivision_IdColumn})
        Me.tableDivName.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("ItemDivision_ItemDesc", New DataColumn() {Me.tableItemDivision.ItemDivision_IdColumn}, New DataColumn() {Me.tableItemDesc.ItemDivision_IdColumn})
        Me.tableItemDesc.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationItemDivision_DivName = New DataRelation("ItemDivision_DivName", New DataColumn() {Me.tableItemDivision.ItemDivision_IdColumn}, New DataColumn() {Me.tableDivName.ItemDivision_IdColumn}, false)
        Me.relationItemDivision_DivName.Nested = true
        Me.Relations.Add(Me.relationItemDivision_DivName)
        Me.relationItemDivision_ItemDesc = New DataRelation("ItemDivision_ItemDesc", New DataColumn() {Me.tableItemDivision.ItemDivision_IdColumn}, New DataColumn() {Me.tableItemDesc.ItemDivision_IdColumn}, false)
        Me.relationItemDivision_ItemDesc.Nested = true
        Me.Relations.Add(Me.relationItemDivision_ItemDesc)
    End Sub
    
    Private Function ShouldSerializeItemDivision() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeDivName() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeItemDesc() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializedatetab() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeQAreaAssignA_Show() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeQAreaAssignP_Show() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeMRcombo() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeQAreaAssign_Show() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGenericQryProc() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSupMR_Show() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSupMR_ShowDSM() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSupMR_ShowPMR() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTeamDivision_Show() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeActDivision_Show() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeMRterri_Show() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeMRterriT_Show() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeMRterriP_Show() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeMRcombo2() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBudget() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeYear() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeLineItem() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeItemB() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeItemBudget() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSup_Div_Show() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSup_NSM_Show() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeNSM_Combo() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeDiv_Combo() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeDivSubGrp_Show() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeDivSubGrp_Combo() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeIsCT_Show() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeIsMercCT() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeUserTabCT_Show() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTerKeyProduct_Show() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeIMSB_Show() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTerritoryLst() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeExcludeCustomerZue_Show() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializecboList() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializedg4list() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub ItemDivisionRowChangeEventHandler(ByVal sender As Object, ByVal e As ItemDivisionRowChangeEvent)
    
    Public Delegate Sub DivNameRowChangeEventHandler(ByVal sender As Object, ByVal e As DivNameRowChangeEvent)
    
    Public Delegate Sub ItemDescRowChangeEventHandler(ByVal sender As Object, ByVal e As ItemDescRowChangeEvent)
    
    Public Delegate Sub datetabRowChangeEventHandler(ByVal sender As Object, ByVal e As datetabRowChangeEvent)
    
    Public Delegate Sub QAreaAssignA_ShowRowChangeEventHandler(ByVal sender As Object, ByVal e As QAreaAssignA_ShowRowChangeEvent)
    
    Public Delegate Sub QAreaAssignP_ShowRowChangeEventHandler(ByVal sender As Object, ByVal e As QAreaAssignP_ShowRowChangeEvent)
    
    Public Delegate Sub MRcomboRowChangeEventHandler(ByVal sender As Object, ByVal e As MRcomboRowChangeEvent)
    
    Public Delegate Sub QAreaAssign_ShowRowChangeEventHandler(ByVal sender As Object, ByVal e As QAreaAssign_ShowRowChangeEvent)
    
    Public Delegate Sub GenericQryProcRowChangeEventHandler(ByVal sender As Object, ByVal e As GenericQryProcRowChangeEvent)
    
    Public Delegate Sub SupMR_ShowRowChangeEventHandler(ByVal sender As Object, ByVal e As SupMR_ShowRowChangeEvent)
    
    Public Delegate Sub SupMR_ShowDSMRowChangeEventHandler(ByVal sender As Object, ByVal e As SupMR_ShowDSMRowChangeEvent)
    
    Public Delegate Sub SupMR_ShowPMRRowChangeEventHandler(ByVal sender As Object, ByVal e As SupMR_ShowPMRRowChangeEvent)
    
    Public Delegate Sub TeamDivision_ShowRowChangeEventHandler(ByVal sender As Object, ByVal e As TeamDivision_ShowRowChangeEvent)
    
    Public Delegate Sub ActDivision_ShowRowChangeEventHandler(ByVal sender As Object, ByVal e As ActDivision_ShowRowChangeEvent)
    
    Public Delegate Sub MRterri_ShowRowChangeEventHandler(ByVal sender As Object, ByVal e As MRterri_ShowRowChangeEvent)
    
    Public Delegate Sub MRterriT_ShowRowChangeEventHandler(ByVal sender As Object, ByVal e As MRterriT_ShowRowChangeEvent)
    
    Public Delegate Sub MRterriP_ShowRowChangeEventHandler(ByVal sender As Object, ByVal e As MRterriP_ShowRowChangeEvent)
    
    Public Delegate Sub MRcombo2RowChangeEventHandler(ByVal sender As Object, ByVal e As MRcombo2RowChangeEvent)
    
    Public Delegate Sub BudgetRowChangeEventHandler(ByVal sender As Object, ByVal e As BudgetRowChangeEvent)
    
    Public Delegate Sub YearRowChangeEventHandler(ByVal sender As Object, ByVal e As YearRowChangeEvent)
    
    Public Delegate Sub LineItemRowChangeEventHandler(ByVal sender As Object, ByVal e As LineItemRowChangeEvent)
    
    Public Delegate Sub ItemBRowChangeEventHandler(ByVal sender As Object, ByVal e As ItemBRowChangeEvent)
    
    Public Delegate Sub ItemBudgetRowChangeEventHandler(ByVal sender As Object, ByVal e As ItemBudgetRowChangeEvent)
    
    Public Delegate Sub Sup_Div_ShowRowChangeEventHandler(ByVal sender As Object, ByVal e As Sup_Div_ShowRowChangeEvent)
    
    Public Delegate Sub Sup_NSM_ShowRowChangeEventHandler(ByVal sender As Object, ByVal e As Sup_NSM_ShowRowChangeEvent)
    
    Public Delegate Sub NSM_ComboRowChangeEventHandler(ByVal sender As Object, ByVal e As NSM_ComboRowChangeEvent)
    
    Public Delegate Sub Div_ComboRowChangeEventHandler(ByVal sender As Object, ByVal e As Div_ComboRowChangeEvent)
    
    Public Delegate Sub DivSubGrp_ShowRowChangeEventHandler(ByVal sender As Object, ByVal e As DivSubGrp_ShowRowChangeEvent)
    
    Public Delegate Sub DivSubGrp_ComboRowChangeEventHandler(ByVal sender As Object, ByVal e As DivSubGrp_ComboRowChangeEvent)
    
    Public Delegate Sub IsCT_ShowRowChangeEventHandler(ByVal sender As Object, ByVal e As IsCT_ShowRowChangeEvent)
    
    Public Delegate Sub IsMercCTRowChangeEventHandler(ByVal sender As Object, ByVal e As IsMercCTRowChangeEvent)
    
    Public Delegate Sub UserTabCT_ShowRowChangeEventHandler(ByVal sender As Object, ByVal e As UserTabCT_ShowRowChangeEvent)
    
    Public Delegate Sub TerKeyProduct_ShowRowChangeEventHandler(ByVal sender As Object, ByVal e As TerKeyProduct_ShowRowChangeEvent)
    
    Public Delegate Sub IMSB_ShowRowChangeEventHandler(ByVal sender As Object, ByVal e As IMSB_ShowRowChangeEvent)
    
    Public Delegate Sub TerritoryLstRowChangeEventHandler(ByVal sender As Object, ByVal e As TerritoryLstRowChangeEvent)
    
    Public Delegate Sub ExcludeCustomerZue_ShowRowChangeEventHandler(ByVal sender As Object, ByVal e As ExcludeCustomerZue_ShowRowChangeEvent)
    
    Public Delegate Sub cboListRowChangeEventHandler(ByVal sender As Object, ByVal e As cboListRowChangeEvent)
    
    Public Delegate Sub dg4listRowChangeEventHandler(ByVal sender As Object, ByVal e As dg4listRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ItemDivisionDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnRowID As DataColumn
        
        Private columnItemCode As DataColumn
        
        Private columnDivCode As DataColumn
        
        Private columnStart_Date As DataColumn
        
        Private columnEnd_Date As DataColumn
        
        Private columnCreateDate As DataColumn
        
        Private columnUpdateDate As DataColumn
        
        Private columnLastUser As DataColumn
        
        Private columnItemDivision_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("ItemDivision")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property RowIDColumn As DataColumn
            Get
                Return Me.columnRowID
            End Get
        End Property
        
        Friend ReadOnly Property ItemCodeColumn As DataColumn
            Get
                Return Me.columnItemCode
            End Get
        End Property
        
        Friend ReadOnly Property DivCodeColumn As DataColumn
            Get
                Return Me.columnDivCode
            End Get
        End Property
        
        Friend ReadOnly Property Start_DateColumn As DataColumn
            Get
                Return Me.columnStart_Date
            End Get
        End Property
        
        Friend ReadOnly Property End_DateColumn As DataColumn
            Get
                Return Me.columnEnd_Date
            End Get
        End Property
        
        Friend ReadOnly Property CreateDateColumn As DataColumn
            Get
                Return Me.columnCreateDate
            End Get
        End Property
        
        Friend ReadOnly Property UpdateDateColumn As DataColumn
            Get
                Return Me.columnUpdateDate
            End Get
        End Property
        
        Friend ReadOnly Property LastUserColumn As DataColumn
            Get
                Return Me.columnLastUser
            End Get
        End Property
        
        Friend ReadOnly Property ItemDivision_IdColumn As DataColumn
            Get
                Return Me.columnItemDivision_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ItemDivisionRow
            Get
                Return CType(Me.Rows(index),ItemDivisionRow)
            End Get
        End Property
        
        Public Event ItemDivisionRowChanged As ItemDivisionRowChangeEventHandler
        
        Public Event ItemDivisionRowChanging As ItemDivisionRowChangeEventHandler
        
        Public Event ItemDivisionRowDeleted As ItemDivisionRowChangeEventHandler
        
        Public Event ItemDivisionRowDeleting As ItemDivisionRowChangeEventHandler
        
        Public Overloads Sub AddItemDivisionRow(ByVal row As ItemDivisionRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddItemDivisionRow(ByVal ItemCode As String, ByVal DivCode As String, ByVal Start_Date As Date, ByVal End_Date As Date, ByVal CreateDate As Date, ByVal UpdateDate As Date, ByVal LastUser As String) As ItemDivisionRow
            Dim rowItemDivisionRow As ItemDivisionRow = CType(Me.NewRow,ItemDivisionRow)
            rowItemDivisionRow.ItemArray = New Object() {Nothing, ItemCode, DivCode, Start_Date, End_Date, CreateDate, UpdateDate, LastUser, Nothing}
            Me.Rows.Add(rowItemDivisionRow)
            Return rowItemDivisionRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ItemDivisionDataTable = CType(MyBase.Clone,ItemDivisionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ItemDivisionDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnRowID = Me.Columns("RowID")
            Me.columnItemCode = Me.Columns("ItemCode")
            Me.columnDivCode = Me.Columns("DivCode")
            Me.columnStart_Date = Me.Columns("Start_Date")
            Me.columnEnd_Date = Me.Columns("End_Date")
            Me.columnCreateDate = Me.Columns("CreateDate")
            Me.columnUpdateDate = Me.Columns("UpdateDate")
            Me.columnLastUser = Me.Columns("LastUser")
            Me.columnItemDivision_Id = Me.Columns("ItemDivision_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnRowID = New DataColumn("RowID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRowID)
            Me.columnItemCode = New DataColumn("ItemCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemCode)
            Me.columnDivCode = New DataColumn("DivCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDivCode)
            Me.columnStart_Date = New DataColumn("Start_Date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStart_Date)
            Me.columnEnd_Date = New DataColumn("End_Date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEnd_Date)
            Me.columnCreateDate = New DataColumn("CreateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreateDate)
            Me.columnUpdateDate = New DataColumn("UpdateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUpdateDate)
            Me.columnLastUser = New DataColumn("LastUser", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLastUser)
            Me.columnItemDivision_Id = New DataColumn("ItemDivision_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnItemDivision_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnItemDivision_Id}, true))
            Me.columnRowID.AutoIncrement = true
            Me.columnRowID.AllowDBNull = false
            Me.columnRowID.ReadOnly = true
            Me.columnItemCode.AllowDBNull = false
            Me.columnDivCode.AllowDBNull = false
            Me.columnStart_Date.AllowDBNull = false
            Me.columnEnd_Date.AllowDBNull = false
            Me.columnCreateDate.AllowDBNull = false
            Me.columnItemDivision_Id.AutoIncrement = true
            Me.columnItemDivision_Id.AllowDBNull = false
            Me.columnItemDivision_Id.Unique = true
        End Sub
        
        Public Function NewItemDivisionRow() As ItemDivisionRow
            Return CType(Me.NewRow,ItemDivisionRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ItemDivisionRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ItemDivisionRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ItemDivisionRowChangedEvent) Is Nothing) Then
                RaiseEvent ItemDivisionRowChanged(Me, New ItemDivisionRowChangeEvent(CType(e.Row,ItemDivisionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ItemDivisionRowChangingEvent) Is Nothing) Then
                RaiseEvent ItemDivisionRowChanging(Me, New ItemDivisionRowChangeEvent(CType(e.Row,ItemDivisionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ItemDivisionRowDeletedEvent) Is Nothing) Then
                RaiseEvent ItemDivisionRowDeleted(Me, New ItemDivisionRowChangeEvent(CType(e.Row,ItemDivisionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ItemDivisionRowDeletingEvent) Is Nothing) Then
                RaiseEvent ItemDivisionRowDeleting(Me, New ItemDivisionRowChangeEvent(CType(e.Row,ItemDivisionRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveItemDivisionRow(ByVal row As ItemDivisionRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ItemDivisionRow
        Inherits DataRow
        
        Private tableItemDivision As ItemDivisionDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableItemDivision = CType(Me.Table,ItemDivisionDataTable)
        End Sub
        
        Public Property RowID As Long
            Get
                Return CType(Me(Me.tableItemDivision.RowIDColumn),Long)
            End Get
            Set
                Me(Me.tableItemDivision.RowIDColumn) = value
            End Set
        End Property
        
        Public Property ItemCode As String
            Get
                Return CType(Me(Me.tableItemDivision.ItemCodeColumn),String)
            End Get
            Set
                Me(Me.tableItemDivision.ItemCodeColumn) = value
            End Set
        End Property
        
        Public Property DivCode As String
            Get
                Return CType(Me(Me.tableItemDivision.DivCodeColumn),String)
            End Get
            Set
                Me(Me.tableItemDivision.DivCodeColumn) = value
            End Set
        End Property
        
        Public Property Start_Date As Date
            Get
                Return CType(Me(Me.tableItemDivision.Start_DateColumn),Date)
            End Get
            Set
                Me(Me.tableItemDivision.Start_DateColumn) = value
            End Set
        End Property
        
        Public Property End_Date As Date
            Get
                Return CType(Me(Me.tableItemDivision.End_DateColumn),Date)
            End Get
            Set
                Me(Me.tableItemDivision.End_DateColumn) = value
            End Set
        End Property
        
        Public Property CreateDate As Date
            Get
                Return CType(Me(Me.tableItemDivision.CreateDateColumn),Date)
            End Get
            Set
                Me(Me.tableItemDivision.CreateDateColumn) = value
            End Set
        End Property
        
        Public Property UpdateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableItemDivision.UpdateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemDivision.UpdateDateColumn) = value
            End Set
        End Property
        
        Public Property LastUser As String
            Get
                Try 
                    Return CType(Me(Me.tableItemDivision.LastUserColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemDivision.LastUserColumn) = value
            End Set
        End Property
        
        Public Function IsUpdateDateNull() As Boolean
            Return Me.IsNull(Me.tableItemDivision.UpdateDateColumn)
        End Function
        
        Public Sub SetUpdateDateNull()
            Me(Me.tableItemDivision.UpdateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLastUserNull() As Boolean
            Return Me.IsNull(Me.tableItemDivision.LastUserColumn)
        End Function
        
        Public Sub SetLastUserNull()
            Me(Me.tableItemDivision.LastUserColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetDivNameRows() As DivNameRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("ItemDivision_DivName")),DivNameRow())
        End Function
        
        Public Function GetItemDescRows() As ItemDescRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("ItemDivision_ItemDesc")),ItemDescRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ItemDivisionRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ItemDivisionRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ItemDivisionRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ItemDivisionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DivNameDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnDivCode As DataColumn
        
        Private columnDivName As DataColumn
        
        Private columnItemDivision_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("DivName")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property DivCodeColumn As DataColumn
            Get
                Return Me.columnDivCode
            End Get
        End Property
        
        Friend ReadOnly Property DivNameColumn As DataColumn
            Get
                Return Me.columnDivName
            End Get
        End Property
        
        Friend ReadOnly Property ItemDivision_IdColumn As DataColumn
            Get
                Return Me.columnItemDivision_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As DivNameRow
            Get
                Return CType(Me.Rows(index),DivNameRow)
            End Get
        End Property
        
        Public Event DivNameRowChanged As DivNameRowChangeEventHandler
        
        Public Event DivNameRowChanging As DivNameRowChangeEventHandler
        
        Public Event DivNameRowDeleted As DivNameRowChangeEventHandler
        
        Public Event DivNameRowDeleting As DivNameRowChangeEventHandler
        
        Public Overloads Sub AddDivNameRow(ByVal row As DivNameRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDivNameRow(ByVal DivCode As String, ByVal DivName As String, ByVal parentItemDivisionRowByItemDivision_DivName As ItemDivisionRow) As DivNameRow
            Dim rowDivNameRow As DivNameRow = CType(Me.NewRow,DivNameRow)
            rowDivNameRow.ItemArray = New Object() {DivCode, DivName, parentItemDivisionRowByItemDivision_DivName(8)}
            Me.Rows.Add(rowDivNameRow)
            Return rowDivNameRow
        End Function
        
        Public Function FindByDivCode(ByVal DivCode As String) As DivNameRow
            Return CType(Me.Rows.Find(New Object() {DivCode}),DivNameRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As DivNameDataTable = CType(MyBase.Clone,DivNameDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New DivNameDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnDivCode = Me.Columns("DivCode")
            Me.columnDivName = Me.Columns("DivName")
            Me.columnItemDivision_Id = Me.Columns("ItemDivision_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnDivCode = New DataColumn("DivCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDivCode)
            Me.columnDivName = New DataColumn("DivName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDivName)
            Me.columnItemDivision_Id = New DataColumn("ItemDivision_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnItemDivision_Id)
            Me.Constraints.Add(New UniqueConstraint("MyDataSetDBKey1", New DataColumn() {Me.columnDivCode}, true))
            Me.columnDivCode.AllowDBNull = false
            Me.columnDivCode.Unique = true
            Me.columnDivName.AllowDBNull = false
        End Sub
        
        Public Function NewDivNameRow() As DivNameRow
            Return CType(Me.NewRow,DivNameRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New DivNameRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DivNameRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DivNameRowChangedEvent) Is Nothing) Then
                RaiseEvent DivNameRowChanged(Me, New DivNameRowChangeEvent(CType(e.Row,DivNameRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DivNameRowChangingEvent) Is Nothing) Then
                RaiseEvent DivNameRowChanging(Me, New DivNameRowChangeEvent(CType(e.Row,DivNameRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DivNameRowDeletedEvent) Is Nothing) Then
                RaiseEvent DivNameRowDeleted(Me, New DivNameRowChangeEvent(CType(e.Row,DivNameRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DivNameRowDeletingEvent) Is Nothing) Then
                RaiseEvent DivNameRowDeleting(Me, New DivNameRowChangeEvent(CType(e.Row,DivNameRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDivNameRow(ByVal row As DivNameRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DivNameRow
        Inherits DataRow
        
        Private tableDivName As DivNameDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDivName = CType(Me.Table,DivNameDataTable)
        End Sub
        
        Public Property DivCode As String
            Get
                Return CType(Me(Me.tableDivName.DivCodeColumn),String)
            End Get
            Set
                Me(Me.tableDivName.DivCodeColumn) = value
            End Set
        End Property
        
        Public Property DivName As String
            Get
                Return CType(Me(Me.tableDivName.DivNameColumn),String)
            End Get
            Set
                Me(Me.tableDivName.DivNameColumn) = value
            End Set
        End Property
        
        Public Property ItemDivisionRow As ItemDivisionRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ItemDivision_DivName")),ItemDivisionRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ItemDivision_DivName"))
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DivNameRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As DivNameRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As DivNameRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As DivNameRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ItemDescDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnItemCode As DataColumn
        
        Private columnItemDesc As DataColumn
        
        Private columnItemDivision_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("ItemDesc")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ItemCodeColumn As DataColumn
            Get
                Return Me.columnItemCode
            End Get
        End Property
        
        Friend ReadOnly Property ItemDescColumn As DataColumn
            Get
                Return Me.columnItemDesc
            End Get
        End Property
        
        Friend ReadOnly Property ItemDivision_IdColumn As DataColumn
            Get
                Return Me.columnItemDivision_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ItemDescRow
            Get
                Return CType(Me.Rows(index),ItemDescRow)
            End Get
        End Property
        
        Public Event ItemDescRowChanged As ItemDescRowChangeEventHandler
        
        Public Event ItemDescRowChanging As ItemDescRowChangeEventHandler
        
        Public Event ItemDescRowDeleted As ItemDescRowChangeEventHandler
        
        Public Event ItemDescRowDeleting As ItemDescRowChangeEventHandler
        
        Public Overloads Sub AddItemDescRow(ByVal row As ItemDescRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddItemDescRow(ByVal ItemCode As String, ByVal ItemDesc As String, ByVal parentItemDivisionRowByItemDivision_ItemDesc As ItemDivisionRow) As ItemDescRow
            Dim rowItemDescRow As ItemDescRow = CType(Me.NewRow,ItemDescRow)
            rowItemDescRow.ItemArray = New Object() {ItemCode, ItemDesc, parentItemDivisionRowByItemDivision_ItemDesc(8)}
            Me.Rows.Add(rowItemDescRow)
            Return rowItemDescRow
        End Function
        
        Public Function FindByItemCode(ByVal ItemCode As String) As ItemDescRow
            Return CType(Me.Rows.Find(New Object() {ItemCode}),ItemDescRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ItemDescDataTable = CType(MyBase.Clone,ItemDescDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ItemDescDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnItemCode = Me.Columns("ItemCode")
            Me.columnItemDesc = Me.Columns("ItemDesc")
            Me.columnItemDivision_Id = Me.Columns("ItemDivision_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnItemCode = New DataColumn("ItemCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemCode)
            Me.columnItemDesc = New DataColumn("ItemDesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemDesc)
            Me.columnItemDivision_Id = New DataColumn("ItemDivision_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnItemDivision_Id)
            Me.Constraints.Add(New UniqueConstraint("MyDataSetDBKey2", New DataColumn() {Me.columnItemCode}, true))
            Me.columnItemCode.AllowDBNull = false
            Me.columnItemCode.Unique = true
            Me.columnItemDesc.AllowDBNull = false
        End Sub
        
        Public Function NewItemDescRow() As ItemDescRow
            Return CType(Me.NewRow,ItemDescRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ItemDescRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ItemDescRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ItemDescRowChangedEvent) Is Nothing) Then
                RaiseEvent ItemDescRowChanged(Me, New ItemDescRowChangeEvent(CType(e.Row,ItemDescRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ItemDescRowChangingEvent) Is Nothing) Then
                RaiseEvent ItemDescRowChanging(Me, New ItemDescRowChangeEvent(CType(e.Row,ItemDescRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ItemDescRowDeletedEvent) Is Nothing) Then
                RaiseEvent ItemDescRowDeleted(Me, New ItemDescRowChangeEvent(CType(e.Row,ItemDescRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ItemDescRowDeletingEvent) Is Nothing) Then
                RaiseEvent ItemDescRowDeleting(Me, New ItemDescRowChangeEvent(CType(e.Row,ItemDescRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveItemDescRow(ByVal row As ItemDescRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ItemDescRow
        Inherits DataRow
        
        Private tableItemDesc As ItemDescDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableItemDesc = CType(Me.Table,ItemDescDataTable)
        End Sub
        
        Public Property ItemCode As String
            Get
                Return CType(Me(Me.tableItemDesc.ItemCodeColumn),String)
            End Get
            Set
                Me(Me.tableItemDesc.ItemCodeColumn) = value
            End Set
        End Property
        
        Public Property ItemDesc As String
            Get
                Return CType(Me(Me.tableItemDesc.ItemDescColumn),String)
            End Get
            Set
                Me(Me.tableItemDesc.ItemDescColumn) = value
            End Set
        End Property
        
        Public Property ItemDivisionRow As ItemDivisionRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ItemDivision_ItemDesc")),ItemDivisionRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ItemDivision_ItemDesc"))
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ItemDescRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ItemDescRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ItemDescRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ItemDescRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class datetabDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columndatnow As DataColumn
        
        Friend Sub New()
            MyBase.New("datetab")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property datnowColumn As DataColumn
            Get
                Return Me.columndatnow
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As datetabRow
            Get
                Return CType(Me.Rows(index),datetabRow)
            End Get
        End Property
        
        Public Event datetabRowChanged As datetabRowChangeEventHandler
        
        Public Event datetabRowChanging As datetabRowChangeEventHandler
        
        Public Event datetabRowDeleted As datetabRowChangeEventHandler
        
        Public Event datetabRowDeleting As datetabRowChangeEventHandler
        
        Public Overloads Sub AdddatetabRow(ByVal row As datetabRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AdddatetabRow(ByVal datnow As Date) As datetabRow
            Dim rowdatetabRow As datetabRow = CType(Me.NewRow,datetabRow)
            rowdatetabRow.ItemArray = New Object() {datnow}
            Me.Rows.Add(rowdatetabRow)
            Return rowdatetabRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As datetabDataTable = CType(MyBase.Clone,datetabDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New datetabDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columndatnow = Me.Columns("datnow")
        End Sub
        
        Private Sub InitClass()
            Me.columndatnow = New DataColumn("datnow", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndatnow)
        End Sub
        
        Public Function NewdatetabRow() As datetabRow
            Return CType(Me.NewRow,datetabRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New datetabRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(datetabRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.datetabRowChangedEvent) Is Nothing) Then
                RaiseEvent datetabRowChanged(Me, New datetabRowChangeEvent(CType(e.Row,datetabRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.datetabRowChangingEvent) Is Nothing) Then
                RaiseEvent datetabRowChanging(Me, New datetabRowChangeEvent(CType(e.Row,datetabRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.datetabRowDeletedEvent) Is Nothing) Then
                RaiseEvent datetabRowDeleted(Me, New datetabRowChangeEvent(CType(e.Row,datetabRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.datetabRowDeletingEvent) Is Nothing) Then
                RaiseEvent datetabRowDeleting(Me, New datetabRowChangeEvent(CType(e.Row,datetabRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovedatetabRow(ByVal row As datetabRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class datetabRow
        Inherits DataRow
        
        Private tabledatetab As datetabDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabledatetab = CType(Me.Table,datetabDataTable)
        End Sub
        
        Public Property datnow As Date
            Get
                Try 
                    Return CType(Me(Me.tabledatetab.datnowColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledatetab.datnowColumn) = value
            End Set
        End Property
        
        Public Function IsdatnowNull() As Boolean
            Return Me.IsNull(Me.tabledatetab.datnowColumn)
        End Function
        
        Public Sub SetdatnowNull()
            Me(Me.tabledatetab.datnowColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class datetabRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As datetabRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As datetabRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As datetabRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QAreaAssignA_ShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnQAreaCode As DataColumn
        
        Friend Sub New()
            MyBase.New("QAreaAssignA_Show")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property QAreaCodeColumn As DataColumn
            Get
                Return Me.columnQAreaCode
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As QAreaAssignA_ShowRow
            Get
                Return CType(Me.Rows(index),QAreaAssignA_ShowRow)
            End Get
        End Property
        
        Public Event QAreaAssignA_ShowRowChanged As QAreaAssignA_ShowRowChangeEventHandler
        
        Public Event QAreaAssignA_ShowRowChanging As QAreaAssignA_ShowRowChangeEventHandler
        
        Public Event QAreaAssignA_ShowRowDeleted As QAreaAssignA_ShowRowChangeEventHandler
        
        Public Event QAreaAssignA_ShowRowDeleting As QAreaAssignA_ShowRowChangeEventHandler
        
        Public Overloads Sub AddQAreaAssignA_ShowRow(ByVal row As QAreaAssignA_ShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddQAreaAssignA_ShowRow(ByVal QAreaCode As String) As QAreaAssignA_ShowRow
            Dim rowQAreaAssignA_ShowRow As QAreaAssignA_ShowRow = CType(Me.NewRow,QAreaAssignA_ShowRow)
            rowQAreaAssignA_ShowRow.ItemArray = New Object() {QAreaCode}
            Me.Rows.Add(rowQAreaAssignA_ShowRow)
            Return rowQAreaAssignA_ShowRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As QAreaAssignA_ShowDataTable = CType(MyBase.Clone,QAreaAssignA_ShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New QAreaAssignA_ShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnQAreaCode = Me.Columns("QAreaCode")
        End Sub
        
        Private Sub InitClass()
            Me.columnQAreaCode = New DataColumn("QAreaCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQAreaCode)
        End Sub
        
        Public Function NewQAreaAssignA_ShowRow() As QAreaAssignA_ShowRow
            Return CType(Me.NewRow,QAreaAssignA_ShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New QAreaAssignA_ShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(QAreaAssignA_ShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.QAreaAssignA_ShowRowChangedEvent) Is Nothing) Then
                RaiseEvent QAreaAssignA_ShowRowChanged(Me, New QAreaAssignA_ShowRowChangeEvent(CType(e.Row,QAreaAssignA_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.QAreaAssignA_ShowRowChangingEvent) Is Nothing) Then
                RaiseEvent QAreaAssignA_ShowRowChanging(Me, New QAreaAssignA_ShowRowChangeEvent(CType(e.Row,QAreaAssignA_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.QAreaAssignA_ShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent QAreaAssignA_ShowRowDeleted(Me, New QAreaAssignA_ShowRowChangeEvent(CType(e.Row,QAreaAssignA_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.QAreaAssignA_ShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent QAreaAssignA_ShowRowDeleting(Me, New QAreaAssignA_ShowRowChangeEvent(CType(e.Row,QAreaAssignA_ShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveQAreaAssignA_ShowRow(ByVal row As QAreaAssignA_ShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QAreaAssignA_ShowRow
        Inherits DataRow
        
        Private tableQAreaAssignA_Show As QAreaAssignA_ShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableQAreaAssignA_Show = CType(Me.Table,QAreaAssignA_ShowDataTable)
        End Sub
        
        Public Property QAreaCode As String
            Get
                Try 
                    Return CType(Me(Me.tableQAreaAssignA_Show.QAreaCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQAreaAssignA_Show.QAreaCodeColumn) = value
            End Set
        End Property
        
        Public Function IsQAreaCodeNull() As Boolean
            Return Me.IsNull(Me.tableQAreaAssignA_Show.QAreaCodeColumn)
        End Function
        
        Public Sub SetQAreaCodeNull()
            Me(Me.tableQAreaAssignA_Show.QAreaCodeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QAreaAssignA_ShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As QAreaAssignA_ShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As QAreaAssignA_ShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As QAreaAssignA_ShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QAreaAssignP_ShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPrincipalList As DataColumn
        
        Friend Sub New()
            MyBase.New("QAreaAssignP_Show")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property PrincipalListColumn As DataColumn
            Get
                Return Me.columnPrincipalList
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As QAreaAssignP_ShowRow
            Get
                Return CType(Me.Rows(index),QAreaAssignP_ShowRow)
            End Get
        End Property
        
        Public Event QAreaAssignP_ShowRowChanged As QAreaAssignP_ShowRowChangeEventHandler
        
        Public Event QAreaAssignP_ShowRowChanging As QAreaAssignP_ShowRowChangeEventHandler
        
        Public Event QAreaAssignP_ShowRowDeleted As QAreaAssignP_ShowRowChangeEventHandler
        
        Public Event QAreaAssignP_ShowRowDeleting As QAreaAssignP_ShowRowChangeEventHandler
        
        Public Overloads Sub AddQAreaAssignP_ShowRow(ByVal row As QAreaAssignP_ShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddQAreaAssignP_ShowRow(ByVal PrincipalList As String) As QAreaAssignP_ShowRow
            Dim rowQAreaAssignP_ShowRow As QAreaAssignP_ShowRow = CType(Me.NewRow,QAreaAssignP_ShowRow)
            rowQAreaAssignP_ShowRow.ItemArray = New Object() {PrincipalList}
            Me.Rows.Add(rowQAreaAssignP_ShowRow)
            Return rowQAreaAssignP_ShowRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As QAreaAssignP_ShowDataTable = CType(MyBase.Clone,QAreaAssignP_ShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New QAreaAssignP_ShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnPrincipalList = Me.Columns("PrincipalList")
        End Sub
        
        Private Sub InitClass()
            Me.columnPrincipalList = New DataColumn("PrincipalList", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrincipalList)
        End Sub
        
        Public Function NewQAreaAssignP_ShowRow() As QAreaAssignP_ShowRow
            Return CType(Me.NewRow,QAreaAssignP_ShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New QAreaAssignP_ShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(QAreaAssignP_ShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.QAreaAssignP_ShowRowChangedEvent) Is Nothing) Then
                RaiseEvent QAreaAssignP_ShowRowChanged(Me, New QAreaAssignP_ShowRowChangeEvent(CType(e.Row,QAreaAssignP_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.QAreaAssignP_ShowRowChangingEvent) Is Nothing) Then
                RaiseEvent QAreaAssignP_ShowRowChanging(Me, New QAreaAssignP_ShowRowChangeEvent(CType(e.Row,QAreaAssignP_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.QAreaAssignP_ShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent QAreaAssignP_ShowRowDeleted(Me, New QAreaAssignP_ShowRowChangeEvent(CType(e.Row,QAreaAssignP_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.QAreaAssignP_ShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent QAreaAssignP_ShowRowDeleting(Me, New QAreaAssignP_ShowRowChangeEvent(CType(e.Row,QAreaAssignP_ShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveQAreaAssignP_ShowRow(ByVal row As QAreaAssignP_ShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QAreaAssignP_ShowRow
        Inherits DataRow
        
        Private tableQAreaAssignP_Show As QAreaAssignP_ShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableQAreaAssignP_Show = CType(Me.Table,QAreaAssignP_ShowDataTable)
        End Sub
        
        Public Property PrincipalList As String
            Get
                Try 
                    Return CType(Me(Me.tableQAreaAssignP_Show.PrincipalListColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQAreaAssignP_Show.PrincipalListColumn) = value
            End Set
        End Property
        
        Public Function IsPrincipalListNull() As Boolean
            Return Me.IsNull(Me.tableQAreaAssignP_Show.PrincipalListColumn)
        End Function
        
        Public Sub SetPrincipalListNull()
            Me(Me.tableQAreaAssignP_Show.PrincipalListColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QAreaAssignP_ShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As QAreaAssignP_ShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As QAreaAssignP_ShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As QAreaAssignP_ShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MRcomboDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMedRepA As DataColumn
        
        Friend Sub New()
            MyBase.New("MRcombo")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property MedRepAColumn As DataColumn
            Get
                Return Me.columnMedRepA
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As MRcomboRow
            Get
                Return CType(Me.Rows(index),MRcomboRow)
            End Get
        End Property
        
        Public Event MRcomboRowChanged As MRcomboRowChangeEventHandler
        
        Public Event MRcomboRowChanging As MRcomboRowChangeEventHandler
        
        Public Event MRcomboRowDeleted As MRcomboRowChangeEventHandler
        
        Public Event MRcomboRowDeleting As MRcomboRowChangeEventHandler
        
        Public Overloads Sub AddMRcomboRow(ByVal row As MRcomboRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMRcomboRow(ByVal MedRepA As String) As MRcomboRow
            Dim rowMRcomboRow As MRcomboRow = CType(Me.NewRow,MRcomboRow)
            rowMRcomboRow.ItemArray = New Object() {MedRepA}
            Me.Rows.Add(rowMRcomboRow)
            Return rowMRcomboRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As MRcomboDataTable = CType(MyBase.Clone,MRcomboDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New MRcomboDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMedRepA = Me.Columns("MedRepA")
        End Sub
        
        Private Sub InitClass()
            Me.columnMedRepA = New DataColumn("MedRepA", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMedRepA)
        End Sub
        
        Public Function NewMRcomboRow() As MRcomboRow
            Return CType(Me.NewRow,MRcomboRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New MRcomboRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MRcomboRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MRcomboRowChangedEvent) Is Nothing) Then
                RaiseEvent MRcomboRowChanged(Me, New MRcomboRowChangeEvent(CType(e.Row,MRcomboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MRcomboRowChangingEvent) Is Nothing) Then
                RaiseEvent MRcomboRowChanging(Me, New MRcomboRowChangeEvent(CType(e.Row,MRcomboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MRcomboRowDeletedEvent) Is Nothing) Then
                RaiseEvent MRcomboRowDeleted(Me, New MRcomboRowChangeEvent(CType(e.Row,MRcomboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MRcomboRowDeletingEvent) Is Nothing) Then
                RaiseEvent MRcomboRowDeleting(Me, New MRcomboRowChangeEvent(CType(e.Row,MRcomboRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMRcomboRow(ByVal row As MRcomboRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MRcomboRow
        Inherits DataRow
        
        Private tableMRcombo As MRcomboDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMRcombo = CType(Me.Table,MRcomboDataTable)
        End Sub
        
        Public Property MedRepA As String
            Get
                Try 
                    Return CType(Me(Me.tableMRcombo.MedRepAColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMRcombo.MedRepAColumn) = value
            End Set
        End Property
        
        Public Function IsMedRepANull() As Boolean
            Return Me.IsNull(Me.tableMRcombo.MedRepAColumn)
        End Function
        
        Public Sub SetMedRepANull()
            Me(Me.tableMRcombo.MedRepAColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MRcomboRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As MRcomboRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As MRcomboRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As MRcomboRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QAreaAssign_ShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnrowid As DataColumn
        
        Private columnprincode As DataColumn
        
        Private columnareacode As DataColumn
        
        Private columnmrcode As DataColumn
        
        Private columnMedRepresentative As DataColumn
        
        Private columnstart_date As DataColumn
        
        Private columnend_date As DataColumn
        
        Private columncreatedate As DataColumn
        
        Private columnupdatedate As DataColumn
        
        Private columnuserid As DataColumn
        
        Friend Sub New()
            MyBase.New("QAreaAssign_Show")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property rowidColumn As DataColumn
            Get
                Return Me.columnrowid
            End Get
        End Property
        
        Friend ReadOnly Property princodeColumn As DataColumn
            Get
                Return Me.columnprincode
            End Get
        End Property
        
        Friend ReadOnly Property areacodeColumn As DataColumn
            Get
                Return Me.columnareacode
            End Get
        End Property
        
        Friend ReadOnly Property mrcodeColumn As DataColumn
            Get
                Return Me.columnmrcode
            End Get
        End Property
        
        Friend ReadOnly Property MedRepresentativeColumn As DataColumn
            Get
                Return Me.columnMedRepresentative
            End Get
        End Property
        
        Friend ReadOnly Property start_dateColumn As DataColumn
            Get
                Return Me.columnstart_date
            End Get
        End Property
        
        Friend ReadOnly Property end_dateColumn As DataColumn
            Get
                Return Me.columnend_date
            End Get
        End Property
        
        Friend ReadOnly Property createdateColumn As DataColumn
            Get
                Return Me.columncreatedate
            End Get
        End Property
        
        Friend ReadOnly Property updatedateColumn As DataColumn
            Get
                Return Me.columnupdatedate
            End Get
        End Property
        
        Friend ReadOnly Property useridColumn As DataColumn
            Get
                Return Me.columnuserid
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As QAreaAssign_ShowRow
            Get
                Return CType(Me.Rows(index),QAreaAssign_ShowRow)
            End Get
        End Property
        
        Public Event QAreaAssign_ShowRowChanged As QAreaAssign_ShowRowChangeEventHandler
        
        Public Event QAreaAssign_ShowRowChanging As QAreaAssign_ShowRowChangeEventHandler
        
        Public Event QAreaAssign_ShowRowDeleted As QAreaAssign_ShowRowChangeEventHandler
        
        Public Event QAreaAssign_ShowRowDeleting As QAreaAssign_ShowRowChangeEventHandler
        
        Public Overloads Sub AddQAreaAssign_ShowRow(ByVal row As QAreaAssign_ShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddQAreaAssign_ShowRow(ByVal rowid As Integer, ByVal princode As String, ByVal areacode As String, ByVal mrcode As String, ByVal MedRepresentative As String, ByVal start_date As Date, ByVal end_date As Date, ByVal createdate As Date, ByVal updatedate As Date, ByVal userid As String) As QAreaAssign_ShowRow
            Dim rowQAreaAssign_ShowRow As QAreaAssign_ShowRow = CType(Me.NewRow,QAreaAssign_ShowRow)
            rowQAreaAssign_ShowRow.ItemArray = New Object() {rowid, princode, areacode, mrcode, MedRepresentative, start_date, end_date, createdate, updatedate, userid}
            Me.Rows.Add(rowQAreaAssign_ShowRow)
            Return rowQAreaAssign_ShowRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As QAreaAssign_ShowDataTable = CType(MyBase.Clone,QAreaAssign_ShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New QAreaAssign_ShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnrowid = Me.Columns("rowid")
            Me.columnprincode = Me.Columns("princode")
            Me.columnareacode = Me.Columns("areacode")
            Me.columnmrcode = Me.Columns("mrcode")
            Me.columnMedRepresentative = Me.Columns("MedRepresentative")
            Me.columnstart_date = Me.Columns("start_date")
            Me.columnend_date = Me.Columns("end_date")
            Me.columncreatedate = Me.Columns("createdate")
            Me.columnupdatedate = Me.Columns("updatedate")
            Me.columnuserid = Me.Columns("userid")
        End Sub
        
        Private Sub InitClass()
            Me.columnrowid = New DataColumn("rowid", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrowid)
            Me.columnprincode = New DataColumn("princode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprincode)
            Me.columnareacode = New DataColumn("areacode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnareacode)
            Me.columnmrcode = New DataColumn("mrcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmrcode)
            Me.columnMedRepresentative = New DataColumn("MedRepresentative", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMedRepresentative)
            Me.columnstart_date = New DataColumn("start_date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstart_date)
            Me.columnend_date = New DataColumn("end_date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnend_date)
            Me.columncreatedate = New DataColumn("createdate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncreatedate)
            Me.columnupdatedate = New DataColumn("updatedate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnupdatedate)
            Me.columnuserid = New DataColumn("userid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnuserid)
        End Sub
        
        Public Function NewQAreaAssign_ShowRow() As QAreaAssign_ShowRow
            Return CType(Me.NewRow,QAreaAssign_ShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New QAreaAssign_ShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(QAreaAssign_ShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.QAreaAssign_ShowRowChangedEvent) Is Nothing) Then
                RaiseEvent QAreaAssign_ShowRowChanged(Me, New QAreaAssign_ShowRowChangeEvent(CType(e.Row,QAreaAssign_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.QAreaAssign_ShowRowChangingEvent) Is Nothing) Then
                RaiseEvent QAreaAssign_ShowRowChanging(Me, New QAreaAssign_ShowRowChangeEvent(CType(e.Row,QAreaAssign_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.QAreaAssign_ShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent QAreaAssign_ShowRowDeleted(Me, New QAreaAssign_ShowRowChangeEvent(CType(e.Row,QAreaAssign_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.QAreaAssign_ShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent QAreaAssign_ShowRowDeleting(Me, New QAreaAssign_ShowRowChangeEvent(CType(e.Row,QAreaAssign_ShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveQAreaAssign_ShowRow(ByVal row As QAreaAssign_ShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QAreaAssign_ShowRow
        Inherits DataRow
        
        Private tableQAreaAssign_Show As QAreaAssign_ShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableQAreaAssign_Show = CType(Me.Table,QAreaAssign_ShowDataTable)
        End Sub
        
        Public Property rowid As Integer
            Get
                Try 
                    Return CType(Me(Me.tableQAreaAssign_Show.rowidColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQAreaAssign_Show.rowidColumn) = value
            End Set
        End Property
        
        Public Property princode As String
            Get
                Try 
                    Return CType(Me(Me.tableQAreaAssign_Show.princodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQAreaAssign_Show.princodeColumn) = value
            End Set
        End Property
        
        Public Property areacode As String
            Get
                Try 
                    Return CType(Me(Me.tableQAreaAssign_Show.areacodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQAreaAssign_Show.areacodeColumn) = value
            End Set
        End Property
        
        Public Property mrcode As String
            Get
                Try 
                    Return CType(Me(Me.tableQAreaAssign_Show.mrcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQAreaAssign_Show.mrcodeColumn) = value
            End Set
        End Property
        
        Public Property MedRepresentative As String
            Get
                Try 
                    Return CType(Me(Me.tableQAreaAssign_Show.MedRepresentativeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQAreaAssign_Show.MedRepresentativeColumn) = value
            End Set
        End Property
        
        Public Property start_date As Date
            Get
                Try 
                    Return CType(Me(Me.tableQAreaAssign_Show.start_dateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQAreaAssign_Show.start_dateColumn) = value
            End Set
        End Property
        
        Public Property end_date As Date
            Get
                Try 
                    Return CType(Me(Me.tableQAreaAssign_Show.end_dateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQAreaAssign_Show.end_dateColumn) = value
            End Set
        End Property
        
        Public Property createdate As Date
            Get
                Try 
                    Return CType(Me(Me.tableQAreaAssign_Show.createdateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQAreaAssign_Show.createdateColumn) = value
            End Set
        End Property
        
        Public Property updatedate As Date
            Get
                Try 
                    Return CType(Me(Me.tableQAreaAssign_Show.updatedateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQAreaAssign_Show.updatedateColumn) = value
            End Set
        End Property
        
        Public Property userid As String
            Get
                Try 
                    Return CType(Me(Me.tableQAreaAssign_Show.useridColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQAreaAssign_Show.useridColumn) = value
            End Set
        End Property
        
        Public Function IsrowidNull() As Boolean
            Return Me.IsNull(Me.tableQAreaAssign_Show.rowidColumn)
        End Function
        
        Public Sub SetrowidNull()
            Me(Me.tableQAreaAssign_Show.rowidColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsprincodeNull() As Boolean
            Return Me.IsNull(Me.tableQAreaAssign_Show.princodeColumn)
        End Function
        
        Public Sub SetprincodeNull()
            Me(Me.tableQAreaAssign_Show.princodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsareacodeNull() As Boolean
            Return Me.IsNull(Me.tableQAreaAssign_Show.areacodeColumn)
        End Function
        
        Public Sub SetareacodeNull()
            Me(Me.tableQAreaAssign_Show.areacodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmrcodeNull() As Boolean
            Return Me.IsNull(Me.tableQAreaAssign_Show.mrcodeColumn)
        End Function
        
        Public Sub SetmrcodeNull()
            Me(Me.tableQAreaAssign_Show.mrcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMedRepresentativeNull() As Boolean
            Return Me.IsNull(Me.tableQAreaAssign_Show.MedRepresentativeColumn)
        End Function
        
        Public Sub SetMedRepresentativeNull()
            Me(Me.tableQAreaAssign_Show.MedRepresentativeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isstart_dateNull() As Boolean
            Return Me.IsNull(Me.tableQAreaAssign_Show.start_dateColumn)
        End Function
        
        Public Sub Setstart_dateNull()
            Me(Me.tableQAreaAssign_Show.start_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isend_dateNull() As Boolean
            Return Me.IsNull(Me.tableQAreaAssign_Show.end_dateColumn)
        End Function
        
        Public Sub Setend_dateNull()
            Me(Me.tableQAreaAssign_Show.end_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscreatedateNull() As Boolean
            Return Me.IsNull(Me.tableQAreaAssign_Show.createdateColumn)
        End Function
        
        Public Sub SetcreatedateNull()
            Me(Me.tableQAreaAssign_Show.createdateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsupdatedateNull() As Boolean
            Return Me.IsNull(Me.tableQAreaAssign_Show.updatedateColumn)
        End Function
        
        Public Sub SetupdatedateNull()
            Me(Me.tableQAreaAssign_Show.updatedateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsuseridNull() As Boolean
            Return Me.IsNull(Me.tableQAreaAssign_Show.useridColumn)
        End Function
        
        Public Sub SetuseridNull()
            Me(Me.tableQAreaAssign_Show.useridColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QAreaAssign_ShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As QAreaAssign_ShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As QAreaAssign_ShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As QAreaAssign_ShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GenericQryProcDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnfld1 As DataColumn
        
        Private columnfld2 As DataColumn
        
        Private columnfld3 As DataColumn
        
        Private columnfld4 As DataColumn
        
        Private columnfld5 As DataColumn
        
        Private columnfld6 As DataColumn
        
        Private columnfld7 As DataColumn
        
        Private columnfld8 As DataColumn
        
        Private columnfld9 As DataColumn
        
        Private columnfld10 As DataColumn
        
        Private columnfld11 As DataColumn
        
        Private columnfld12 As DataColumn
        
        Private columnfld13 As DataColumn
        
        Private columnfld14 As DataColumn
        
        Private columnfld15 As DataColumn
        
        Friend Sub New()
            MyBase.New("GenericQryProc")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property fld1Column As DataColumn
            Get
                Return Me.columnfld1
            End Get
        End Property
        
        Friend ReadOnly Property fld2Column As DataColumn
            Get
                Return Me.columnfld2
            End Get
        End Property
        
        Friend ReadOnly Property fld3Column As DataColumn
            Get
                Return Me.columnfld3
            End Get
        End Property
        
        Friend ReadOnly Property fld4Column As DataColumn
            Get
                Return Me.columnfld4
            End Get
        End Property
        
        Friend ReadOnly Property fld5Column As DataColumn
            Get
                Return Me.columnfld5
            End Get
        End Property
        
        Friend ReadOnly Property fld6Column As DataColumn
            Get
                Return Me.columnfld6
            End Get
        End Property
        
        Friend ReadOnly Property fld7Column As DataColumn
            Get
                Return Me.columnfld7
            End Get
        End Property
        
        Friend ReadOnly Property fld8Column As DataColumn
            Get
                Return Me.columnfld8
            End Get
        End Property
        
        Friend ReadOnly Property fld9Column As DataColumn
            Get
                Return Me.columnfld9
            End Get
        End Property
        
        Friend ReadOnly Property fld10Column As DataColumn
            Get
                Return Me.columnfld10
            End Get
        End Property
        
        Friend ReadOnly Property fld11Column As DataColumn
            Get
                Return Me.columnfld11
            End Get
        End Property
        
        Friend ReadOnly Property fld12Column As DataColumn
            Get
                Return Me.columnfld12
            End Get
        End Property
        
        Friend ReadOnly Property fld13Column As DataColumn
            Get
                Return Me.columnfld13
            End Get
        End Property
        
        Friend ReadOnly Property fld14Column As DataColumn
            Get
                Return Me.columnfld14
            End Get
        End Property
        
        Friend ReadOnly Property fld15Column As DataColumn
            Get
                Return Me.columnfld15
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GenericQryProcRow
            Get
                Return CType(Me.Rows(index),GenericQryProcRow)
            End Get
        End Property
        
        Public Event GenericQryProcRowChanged As GenericQryProcRowChangeEventHandler
        
        Public Event GenericQryProcRowChanging As GenericQryProcRowChangeEventHandler
        
        Public Event GenericQryProcRowDeleted As GenericQryProcRowChangeEventHandler
        
        Public Event GenericQryProcRowDeleting As GenericQryProcRowChangeEventHandler
        
        Public Overloads Sub AddGenericQryProcRow(ByVal row As GenericQryProcRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGenericQryProcRow(ByVal fld1 As String, ByVal fld2 As String, ByVal fld3 As String, ByVal fld4 As String, ByVal fld5 As String, ByVal fld6 As String, ByVal fld7 As String, ByVal fld8 As String, ByVal fld9 As String, ByVal fld10 As String, ByVal fld11 As String, ByVal fld12 As String, ByVal fld13 As String, ByVal fld14 As String, ByVal fld15 As String) As GenericQryProcRow
            Dim rowGenericQryProcRow As GenericQryProcRow = CType(Me.NewRow,GenericQryProcRow)
            rowGenericQryProcRow.ItemArray = New Object() {fld1, fld2, fld3, fld4, fld5, fld6, fld7, fld8, fld9, fld10, fld11, fld12, fld13, fld14, fld15}
            Me.Rows.Add(rowGenericQryProcRow)
            Return rowGenericQryProcRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GenericQryProcDataTable = CType(MyBase.Clone,GenericQryProcDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GenericQryProcDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnfld1 = Me.Columns("fld1")
            Me.columnfld2 = Me.Columns("fld2")
            Me.columnfld3 = Me.Columns("fld3")
            Me.columnfld4 = Me.Columns("fld4")
            Me.columnfld5 = Me.Columns("fld5")
            Me.columnfld6 = Me.Columns("fld6")
            Me.columnfld7 = Me.Columns("fld7")
            Me.columnfld8 = Me.Columns("fld8")
            Me.columnfld9 = Me.Columns("fld9")
            Me.columnfld10 = Me.Columns("fld10")
            Me.columnfld11 = Me.Columns("fld11")
            Me.columnfld12 = Me.Columns("fld12")
            Me.columnfld13 = Me.Columns("fld13")
            Me.columnfld14 = Me.Columns("fld14")
            Me.columnfld15 = Me.Columns("fld15")
        End Sub
        
        Private Sub InitClass()
            Me.columnfld1 = New DataColumn("fld1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld1)
            Me.columnfld2 = New DataColumn("fld2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld2)
            Me.columnfld3 = New DataColumn("fld3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld3)
            Me.columnfld4 = New DataColumn("fld4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld4)
            Me.columnfld5 = New DataColumn("fld5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld5)
            Me.columnfld6 = New DataColumn("fld6", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld6)
            Me.columnfld7 = New DataColumn("fld7", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld7)
            Me.columnfld8 = New DataColumn("fld8", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld8)
            Me.columnfld9 = New DataColumn("fld9", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld9)
            Me.columnfld10 = New DataColumn("fld10", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld10)
            Me.columnfld11 = New DataColumn("fld11", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld11)
            Me.columnfld12 = New DataColumn("fld12", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld12)
            Me.columnfld13 = New DataColumn("fld13", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld13)
            Me.columnfld14 = New DataColumn("fld14", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld14)
            Me.columnfld15 = New DataColumn("fld15", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld15)
        End Sub
        
        Public Function NewGenericQryProcRow() As GenericQryProcRow
            Return CType(Me.NewRow,GenericQryProcRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GenericQryProcRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GenericQryProcRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GenericQryProcRowChangedEvent) Is Nothing) Then
                RaiseEvent GenericQryProcRowChanged(Me, New GenericQryProcRowChangeEvent(CType(e.Row,GenericQryProcRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GenericQryProcRowChangingEvent) Is Nothing) Then
                RaiseEvent GenericQryProcRowChanging(Me, New GenericQryProcRowChangeEvent(CType(e.Row,GenericQryProcRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GenericQryProcRowDeletedEvent) Is Nothing) Then
                RaiseEvent GenericQryProcRowDeleted(Me, New GenericQryProcRowChangeEvent(CType(e.Row,GenericQryProcRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GenericQryProcRowDeletingEvent) Is Nothing) Then
                RaiseEvent GenericQryProcRowDeleting(Me, New GenericQryProcRowChangeEvent(CType(e.Row,GenericQryProcRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGenericQryProcRow(ByVal row As GenericQryProcRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GenericQryProcRow
        Inherits DataRow
        
        Private tableGenericQryProc As GenericQryProcDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGenericQryProc = CType(Me.Table,GenericQryProcDataTable)
        End Sub
        
        Public Property fld1 As String
            Get
                Try 
                    Return CType(Me(Me.tableGenericQryProc.fld1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGenericQryProc.fld1Column) = value
            End Set
        End Property
        
        Public Property fld2 As String
            Get
                Try 
                    Return CType(Me(Me.tableGenericQryProc.fld2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGenericQryProc.fld2Column) = value
            End Set
        End Property
        
        Public Property fld3 As String
            Get
                Try 
                    Return CType(Me(Me.tableGenericQryProc.fld3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGenericQryProc.fld3Column) = value
            End Set
        End Property
        
        Public Property fld4 As String
            Get
                Try 
                    Return CType(Me(Me.tableGenericQryProc.fld4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGenericQryProc.fld4Column) = value
            End Set
        End Property
        
        Public Property fld5 As String
            Get
                Try 
                    Return CType(Me(Me.tableGenericQryProc.fld5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGenericQryProc.fld5Column) = value
            End Set
        End Property
        
        Public Property fld6 As String
            Get
                Try 
                    Return CType(Me(Me.tableGenericQryProc.fld6Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGenericQryProc.fld6Column) = value
            End Set
        End Property
        
        Public Property fld7 As String
            Get
                Try 
                    Return CType(Me(Me.tableGenericQryProc.fld7Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGenericQryProc.fld7Column) = value
            End Set
        End Property
        
        Public Property fld8 As String
            Get
                Try 
                    Return CType(Me(Me.tableGenericQryProc.fld8Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGenericQryProc.fld8Column) = value
            End Set
        End Property
        
        Public Property fld9 As String
            Get
                Try 
                    Return CType(Me(Me.tableGenericQryProc.fld9Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGenericQryProc.fld9Column) = value
            End Set
        End Property
        
        Public Property fld10 As String
            Get
                Try 
                    Return CType(Me(Me.tableGenericQryProc.fld10Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGenericQryProc.fld10Column) = value
            End Set
        End Property
        
        Public Property fld11 As String
            Get
                Try 
                    Return CType(Me(Me.tableGenericQryProc.fld11Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGenericQryProc.fld11Column) = value
            End Set
        End Property
        
        Public Property fld12 As String
            Get
                Try 
                    Return CType(Me(Me.tableGenericQryProc.fld12Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGenericQryProc.fld12Column) = value
            End Set
        End Property
        
        Public Property fld13 As String
            Get
                Try 
                    Return CType(Me(Me.tableGenericQryProc.fld13Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGenericQryProc.fld13Column) = value
            End Set
        End Property
        
        Public Property fld14 As String
            Get
                Try 
                    Return CType(Me(Me.tableGenericQryProc.fld14Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGenericQryProc.fld14Column) = value
            End Set
        End Property
        
        Public Property fld15 As String
            Get
                Try 
                    Return CType(Me(Me.tableGenericQryProc.fld15Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGenericQryProc.fld15Column) = value
            End Set
        End Property
        
        Public Function Isfld1Null() As Boolean
            Return Me.IsNull(Me.tableGenericQryProc.fld1Column)
        End Function
        
        Public Sub Setfld1Null()
            Me(Me.tableGenericQryProc.fld1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld2Null() As Boolean
            Return Me.IsNull(Me.tableGenericQryProc.fld2Column)
        End Function
        
        Public Sub Setfld2Null()
            Me(Me.tableGenericQryProc.fld2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld3Null() As Boolean
            Return Me.IsNull(Me.tableGenericQryProc.fld3Column)
        End Function
        
        Public Sub Setfld3Null()
            Me(Me.tableGenericQryProc.fld3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld4Null() As Boolean
            Return Me.IsNull(Me.tableGenericQryProc.fld4Column)
        End Function
        
        Public Sub Setfld4Null()
            Me(Me.tableGenericQryProc.fld4Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld5Null() As Boolean
            Return Me.IsNull(Me.tableGenericQryProc.fld5Column)
        End Function
        
        Public Sub Setfld5Null()
            Me(Me.tableGenericQryProc.fld5Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld6Null() As Boolean
            Return Me.IsNull(Me.tableGenericQryProc.fld6Column)
        End Function
        
        Public Sub Setfld6Null()
            Me(Me.tableGenericQryProc.fld6Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld7Null() As Boolean
            Return Me.IsNull(Me.tableGenericQryProc.fld7Column)
        End Function
        
        Public Sub Setfld7Null()
            Me(Me.tableGenericQryProc.fld7Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld8Null() As Boolean
            Return Me.IsNull(Me.tableGenericQryProc.fld8Column)
        End Function
        
        Public Sub Setfld8Null()
            Me(Me.tableGenericQryProc.fld8Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld9Null() As Boolean
            Return Me.IsNull(Me.tableGenericQryProc.fld9Column)
        End Function
        
        Public Sub Setfld9Null()
            Me(Me.tableGenericQryProc.fld9Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld10Null() As Boolean
            Return Me.IsNull(Me.tableGenericQryProc.fld10Column)
        End Function
        
        Public Sub Setfld10Null()
            Me(Me.tableGenericQryProc.fld10Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld11Null() As Boolean
            Return Me.IsNull(Me.tableGenericQryProc.fld11Column)
        End Function
        
        Public Sub Setfld11Null()
            Me(Me.tableGenericQryProc.fld11Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld12Null() As Boolean
            Return Me.IsNull(Me.tableGenericQryProc.fld12Column)
        End Function
        
        Public Sub Setfld12Null()
            Me(Me.tableGenericQryProc.fld12Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld13Null() As Boolean
            Return Me.IsNull(Me.tableGenericQryProc.fld13Column)
        End Function
        
        Public Sub Setfld13Null()
            Me(Me.tableGenericQryProc.fld13Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld14Null() As Boolean
            Return Me.IsNull(Me.tableGenericQryProc.fld14Column)
        End Function
        
        Public Sub Setfld14Null()
            Me(Me.tableGenericQryProc.fld14Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld15Null() As Boolean
            Return Me.IsNull(Me.tableGenericQryProc.fld15Column)
        End Function
        
        Public Sub Setfld15Null()
            Me(Me.tableGenericQryProc.fld15Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GenericQryProcRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GenericQryProcRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GenericQryProcRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GenericQryProcRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SupMR_ShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnsupcode As DataColumn
        
        Private columnDSM As DataColumn
        
        Private columnmrcode As DataColumn
        
        Private columnPMR As DataColumn
        
        Private columnStart_Date As DataColumn
        
        Private columnEnd_Date As DataColumn
        
        Private columnRowNumber As DataColumn
        
        Private columnTeamDivision As DataColumn
        
        Private columnDivision As DataColumn
        
        Private columnCreateDate As DataColumn
        
        Private columnUpdateDate As DataColumn
        
        Private columnLastUser As DataColumn
        
        Friend Sub New()
            MyBase.New("SupMR_Show")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property supcodeColumn As DataColumn
            Get
                Return Me.columnsupcode
            End Get
        End Property
        
        Friend ReadOnly Property DSMColumn As DataColumn
            Get
                Return Me.columnDSM
            End Get
        End Property
        
        Friend ReadOnly Property mrcodeColumn As DataColumn
            Get
                Return Me.columnmrcode
            End Get
        End Property
        
        Friend ReadOnly Property PMRColumn As DataColumn
            Get
                Return Me.columnPMR
            End Get
        End Property
        
        Friend ReadOnly Property Start_DateColumn As DataColumn
            Get
                Return Me.columnStart_Date
            End Get
        End Property
        
        Friend ReadOnly Property End_DateColumn As DataColumn
            Get
                Return Me.columnEnd_Date
            End Get
        End Property
        
        Friend ReadOnly Property RowNumberColumn As DataColumn
            Get
                Return Me.columnRowNumber
            End Get
        End Property
        
        Friend ReadOnly Property TeamDivisionColumn As DataColumn
            Get
                Return Me.columnTeamDivision
            End Get
        End Property
        
        Friend ReadOnly Property DivisionColumn As DataColumn
            Get
                Return Me.columnDivision
            End Get
        End Property
        
        Friend ReadOnly Property CreateDateColumn As DataColumn
            Get
                Return Me.columnCreateDate
            End Get
        End Property
        
        Friend ReadOnly Property UpdateDateColumn As DataColumn
            Get
                Return Me.columnUpdateDate
            End Get
        End Property
        
        Friend ReadOnly Property LastUserColumn As DataColumn
            Get
                Return Me.columnLastUser
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SupMR_ShowRow
            Get
                Return CType(Me.Rows(index),SupMR_ShowRow)
            End Get
        End Property
        
        Public Event SupMR_ShowRowChanged As SupMR_ShowRowChangeEventHandler
        
        Public Event SupMR_ShowRowChanging As SupMR_ShowRowChangeEventHandler
        
        Public Event SupMR_ShowRowDeleted As SupMR_ShowRowChangeEventHandler
        
        Public Event SupMR_ShowRowDeleting As SupMR_ShowRowChangeEventHandler
        
        Public Overloads Sub AddSupMR_ShowRow(ByVal row As SupMR_ShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSupMR_ShowRow(ByVal supcode As String, ByVal DSM As String, ByVal mrcode As String, ByVal PMR As String, ByVal Start_Date As Date, ByVal End_Date As Date, ByVal RowNumber As Integer, ByVal TeamDivision As String, ByVal Division As String, ByVal CreateDate As Date, ByVal UpdateDate As Date, ByVal LastUser As String) As SupMR_ShowRow
            Dim rowSupMR_ShowRow As SupMR_ShowRow = CType(Me.NewRow,SupMR_ShowRow)
            rowSupMR_ShowRow.ItemArray = New Object() {supcode, DSM, mrcode, PMR, Start_Date, End_Date, RowNumber, TeamDivision, Division, CreateDate, UpdateDate, LastUser}
            Me.Rows.Add(rowSupMR_ShowRow)
            Return rowSupMR_ShowRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SupMR_ShowDataTable = CType(MyBase.Clone,SupMR_ShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SupMR_ShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnsupcode = Me.Columns("supcode")
            Me.columnDSM = Me.Columns("DSM")
            Me.columnmrcode = Me.Columns("mrcode")
            Me.columnPMR = Me.Columns("PMR")
            Me.columnStart_Date = Me.Columns("Start_Date")
            Me.columnEnd_Date = Me.Columns("End_Date")
            Me.columnRowNumber = Me.Columns("RowNumber")
            Me.columnTeamDivision = Me.Columns("TeamDivision")
            Me.columnDivision = Me.Columns("Division")
            Me.columnCreateDate = Me.Columns("CreateDate")
            Me.columnUpdateDate = Me.Columns("UpdateDate")
            Me.columnLastUser = Me.Columns("LastUser")
        End Sub
        
        Private Sub InitClass()
            Me.columnsupcode = New DataColumn("supcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsupcode)
            Me.columnDSM = New DataColumn("DSM", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDSM)
            Me.columnmrcode = New DataColumn("mrcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmrcode)
            Me.columnPMR = New DataColumn("PMR", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPMR)
            Me.columnStart_Date = New DataColumn("Start_Date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStart_Date)
            Me.columnEnd_Date = New DataColumn("End_Date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEnd_Date)
            Me.columnRowNumber = New DataColumn("RowNumber", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRowNumber)
            Me.columnTeamDivision = New DataColumn("TeamDivision", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTeamDivision)
            Me.columnDivision = New DataColumn("Division", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDivision)
            Me.columnCreateDate = New DataColumn("CreateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreateDate)
            Me.columnUpdateDate = New DataColumn("UpdateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUpdateDate)
            Me.columnLastUser = New DataColumn("LastUser", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLastUser)
        End Sub
        
        Public Function NewSupMR_ShowRow() As SupMR_ShowRow
            Return CType(Me.NewRow,SupMR_ShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SupMR_ShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SupMR_ShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SupMR_ShowRowChangedEvent) Is Nothing) Then
                RaiseEvent SupMR_ShowRowChanged(Me, New SupMR_ShowRowChangeEvent(CType(e.Row,SupMR_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SupMR_ShowRowChangingEvent) Is Nothing) Then
                RaiseEvent SupMR_ShowRowChanging(Me, New SupMR_ShowRowChangeEvent(CType(e.Row,SupMR_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SupMR_ShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent SupMR_ShowRowDeleted(Me, New SupMR_ShowRowChangeEvent(CType(e.Row,SupMR_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SupMR_ShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent SupMR_ShowRowDeleting(Me, New SupMR_ShowRowChangeEvent(CType(e.Row,SupMR_ShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSupMR_ShowRow(ByVal row As SupMR_ShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SupMR_ShowRow
        Inherits DataRow
        
        Private tableSupMR_Show As SupMR_ShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSupMR_Show = CType(Me.Table,SupMR_ShowDataTable)
        End Sub
        
        Public Property supcode As String
            Get
                Try 
                    Return CType(Me(Me.tableSupMR_Show.supcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSupMR_Show.supcodeColumn) = value
            End Set
        End Property
        
        Public Property DSM As String
            Get
                Try 
                    Return CType(Me(Me.tableSupMR_Show.DSMColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSupMR_Show.DSMColumn) = value
            End Set
        End Property
        
        Public Property mrcode As String
            Get
                Try 
                    Return CType(Me(Me.tableSupMR_Show.mrcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSupMR_Show.mrcodeColumn) = value
            End Set
        End Property
        
        Public Property PMR As String
            Get
                Try 
                    Return CType(Me(Me.tableSupMR_Show.PMRColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSupMR_Show.PMRColumn) = value
            End Set
        End Property
        
        Public Property Start_Date As Date
            Get
                Try 
                    Return CType(Me(Me.tableSupMR_Show.Start_DateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSupMR_Show.Start_DateColumn) = value
            End Set
        End Property
        
        Public Property End_Date As Date
            Get
                Try 
                    Return CType(Me(Me.tableSupMR_Show.End_DateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSupMR_Show.End_DateColumn) = value
            End Set
        End Property
        
        Public Property RowNumber As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSupMR_Show.RowNumberColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSupMR_Show.RowNumberColumn) = value
            End Set
        End Property
        
        Public Property TeamDivision As String
            Get
                Try 
                    Return CType(Me(Me.tableSupMR_Show.TeamDivisionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSupMR_Show.TeamDivisionColumn) = value
            End Set
        End Property
        
        Public Property Division As String
            Get
                Try 
                    Return CType(Me(Me.tableSupMR_Show.DivisionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSupMR_Show.DivisionColumn) = value
            End Set
        End Property
        
        Public Property CreateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableSupMR_Show.CreateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSupMR_Show.CreateDateColumn) = value
            End Set
        End Property
        
        Public Property UpdateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableSupMR_Show.UpdateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSupMR_Show.UpdateDateColumn) = value
            End Set
        End Property
        
        Public Property LastUser As String
            Get
                Try 
                    Return CType(Me(Me.tableSupMR_Show.LastUserColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSupMR_Show.LastUserColumn) = value
            End Set
        End Property
        
        Public Function IssupcodeNull() As Boolean
            Return Me.IsNull(Me.tableSupMR_Show.supcodeColumn)
        End Function
        
        Public Sub SetsupcodeNull()
            Me(Me.tableSupMR_Show.supcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDSMNull() As Boolean
            Return Me.IsNull(Me.tableSupMR_Show.DSMColumn)
        End Function
        
        Public Sub SetDSMNull()
            Me(Me.tableSupMR_Show.DSMColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmrcodeNull() As Boolean
            Return Me.IsNull(Me.tableSupMR_Show.mrcodeColumn)
        End Function
        
        Public Sub SetmrcodeNull()
            Me(Me.tableSupMR_Show.mrcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPMRNull() As Boolean
            Return Me.IsNull(Me.tableSupMR_Show.PMRColumn)
        End Function
        
        Public Sub SetPMRNull()
            Me(Me.tableSupMR_Show.PMRColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStart_DateNull() As Boolean
            Return Me.IsNull(Me.tableSupMR_Show.Start_DateColumn)
        End Function
        
        Public Sub SetStart_DateNull()
            Me(Me.tableSupMR_Show.Start_DateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEnd_DateNull() As Boolean
            Return Me.IsNull(Me.tableSupMR_Show.End_DateColumn)
        End Function
        
        Public Sub SetEnd_DateNull()
            Me(Me.tableSupMR_Show.End_DateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRowNumberNull() As Boolean
            Return Me.IsNull(Me.tableSupMR_Show.RowNumberColumn)
        End Function
        
        Public Sub SetRowNumberNull()
            Me(Me.tableSupMR_Show.RowNumberColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTeamDivisionNull() As Boolean
            Return Me.IsNull(Me.tableSupMR_Show.TeamDivisionColumn)
        End Function
        
        Public Sub SetTeamDivisionNull()
            Me(Me.tableSupMR_Show.TeamDivisionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDivisionNull() As Boolean
            Return Me.IsNull(Me.tableSupMR_Show.DivisionColumn)
        End Function
        
        Public Sub SetDivisionNull()
            Me(Me.tableSupMR_Show.DivisionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreateDateNull() As Boolean
            Return Me.IsNull(Me.tableSupMR_Show.CreateDateColumn)
        End Function
        
        Public Sub SetCreateDateNull()
            Me(Me.tableSupMR_Show.CreateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUpdateDateNull() As Boolean
            Return Me.IsNull(Me.tableSupMR_Show.UpdateDateColumn)
        End Function
        
        Public Sub SetUpdateDateNull()
            Me(Me.tableSupMR_Show.UpdateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLastUserNull() As Boolean
            Return Me.IsNull(Me.tableSupMR_Show.LastUserColumn)
        End Function
        
        Public Sub SetLastUserNull()
            Me(Me.tableSupMR_Show.LastUserColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SupMR_ShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SupMR_ShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SupMR_ShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SupMR_ShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SupMR_ShowDSMDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnsupname As DataColumn
        
        Friend Sub New()
            MyBase.New("SupMR_ShowDSM")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property supnameColumn As DataColumn
            Get
                Return Me.columnsupname
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SupMR_ShowDSMRow
            Get
                Return CType(Me.Rows(index),SupMR_ShowDSMRow)
            End Get
        End Property
        
        Public Event SupMR_ShowDSMRowChanged As SupMR_ShowDSMRowChangeEventHandler
        
        Public Event SupMR_ShowDSMRowChanging As SupMR_ShowDSMRowChangeEventHandler
        
        Public Event SupMR_ShowDSMRowDeleted As SupMR_ShowDSMRowChangeEventHandler
        
        Public Event SupMR_ShowDSMRowDeleting As SupMR_ShowDSMRowChangeEventHandler
        
        Public Overloads Sub AddSupMR_ShowDSMRow(ByVal row As SupMR_ShowDSMRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSupMR_ShowDSMRow(ByVal supname As String) As SupMR_ShowDSMRow
            Dim rowSupMR_ShowDSMRow As SupMR_ShowDSMRow = CType(Me.NewRow,SupMR_ShowDSMRow)
            rowSupMR_ShowDSMRow.ItemArray = New Object() {supname}
            Me.Rows.Add(rowSupMR_ShowDSMRow)
            Return rowSupMR_ShowDSMRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SupMR_ShowDSMDataTable = CType(MyBase.Clone,SupMR_ShowDSMDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SupMR_ShowDSMDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnsupname = Me.Columns("supname")
        End Sub
        
        Private Sub InitClass()
            Me.columnsupname = New DataColumn("supname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsupname)
        End Sub
        
        Public Function NewSupMR_ShowDSMRow() As SupMR_ShowDSMRow
            Return CType(Me.NewRow,SupMR_ShowDSMRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SupMR_ShowDSMRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SupMR_ShowDSMRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SupMR_ShowDSMRowChangedEvent) Is Nothing) Then
                RaiseEvent SupMR_ShowDSMRowChanged(Me, New SupMR_ShowDSMRowChangeEvent(CType(e.Row,SupMR_ShowDSMRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SupMR_ShowDSMRowChangingEvent) Is Nothing) Then
                RaiseEvent SupMR_ShowDSMRowChanging(Me, New SupMR_ShowDSMRowChangeEvent(CType(e.Row,SupMR_ShowDSMRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SupMR_ShowDSMRowDeletedEvent) Is Nothing) Then
                RaiseEvent SupMR_ShowDSMRowDeleted(Me, New SupMR_ShowDSMRowChangeEvent(CType(e.Row,SupMR_ShowDSMRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SupMR_ShowDSMRowDeletingEvent) Is Nothing) Then
                RaiseEvent SupMR_ShowDSMRowDeleting(Me, New SupMR_ShowDSMRowChangeEvent(CType(e.Row,SupMR_ShowDSMRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSupMR_ShowDSMRow(ByVal row As SupMR_ShowDSMRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SupMR_ShowDSMRow
        Inherits DataRow
        
        Private tableSupMR_ShowDSM As SupMR_ShowDSMDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSupMR_ShowDSM = CType(Me.Table,SupMR_ShowDSMDataTable)
        End Sub
        
        Public Property supname As String
            Get
                Try 
                    Return CType(Me(Me.tableSupMR_ShowDSM.supnameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSupMR_ShowDSM.supnameColumn) = value
            End Set
        End Property
        
        Public Function IssupnameNull() As Boolean
            Return Me.IsNull(Me.tableSupMR_ShowDSM.supnameColumn)
        End Function
        
        Public Sub SetsupnameNull()
            Me(Me.tableSupMR_ShowDSM.supnameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SupMR_ShowDSMRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SupMR_ShowDSMRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SupMR_ShowDSMRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SupMR_ShowDSMRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SupMR_ShowPMRDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnmrname As DataColumn
        
        Friend Sub New()
            MyBase.New("SupMR_ShowPMR")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property mrnameColumn As DataColumn
            Get
                Return Me.columnmrname
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SupMR_ShowPMRRow
            Get
                Return CType(Me.Rows(index),SupMR_ShowPMRRow)
            End Get
        End Property
        
        Public Event SupMR_ShowPMRRowChanged As SupMR_ShowPMRRowChangeEventHandler
        
        Public Event SupMR_ShowPMRRowChanging As SupMR_ShowPMRRowChangeEventHandler
        
        Public Event SupMR_ShowPMRRowDeleted As SupMR_ShowPMRRowChangeEventHandler
        
        Public Event SupMR_ShowPMRRowDeleting As SupMR_ShowPMRRowChangeEventHandler
        
        Public Overloads Sub AddSupMR_ShowPMRRow(ByVal row As SupMR_ShowPMRRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSupMR_ShowPMRRow(ByVal mrname As String) As SupMR_ShowPMRRow
            Dim rowSupMR_ShowPMRRow As SupMR_ShowPMRRow = CType(Me.NewRow,SupMR_ShowPMRRow)
            rowSupMR_ShowPMRRow.ItemArray = New Object() {mrname}
            Me.Rows.Add(rowSupMR_ShowPMRRow)
            Return rowSupMR_ShowPMRRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SupMR_ShowPMRDataTable = CType(MyBase.Clone,SupMR_ShowPMRDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SupMR_ShowPMRDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnmrname = Me.Columns("mrname")
        End Sub
        
        Private Sub InitClass()
            Me.columnmrname = New DataColumn("mrname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmrname)
        End Sub
        
        Public Function NewSupMR_ShowPMRRow() As SupMR_ShowPMRRow
            Return CType(Me.NewRow,SupMR_ShowPMRRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SupMR_ShowPMRRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SupMR_ShowPMRRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SupMR_ShowPMRRowChangedEvent) Is Nothing) Then
                RaiseEvent SupMR_ShowPMRRowChanged(Me, New SupMR_ShowPMRRowChangeEvent(CType(e.Row,SupMR_ShowPMRRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SupMR_ShowPMRRowChangingEvent) Is Nothing) Then
                RaiseEvent SupMR_ShowPMRRowChanging(Me, New SupMR_ShowPMRRowChangeEvent(CType(e.Row,SupMR_ShowPMRRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SupMR_ShowPMRRowDeletedEvent) Is Nothing) Then
                RaiseEvent SupMR_ShowPMRRowDeleted(Me, New SupMR_ShowPMRRowChangeEvent(CType(e.Row,SupMR_ShowPMRRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SupMR_ShowPMRRowDeletingEvent) Is Nothing) Then
                RaiseEvent SupMR_ShowPMRRowDeleting(Me, New SupMR_ShowPMRRowChangeEvent(CType(e.Row,SupMR_ShowPMRRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSupMR_ShowPMRRow(ByVal row As SupMR_ShowPMRRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SupMR_ShowPMRRow
        Inherits DataRow
        
        Private tableSupMR_ShowPMR As SupMR_ShowPMRDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSupMR_ShowPMR = CType(Me.Table,SupMR_ShowPMRDataTable)
        End Sub
        
        Public Property mrname As String
            Get
                Try 
                    Return CType(Me(Me.tableSupMR_ShowPMR.mrnameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSupMR_ShowPMR.mrnameColumn) = value
            End Set
        End Property
        
        Public Function IsmrnameNull() As Boolean
            Return Me.IsNull(Me.tableSupMR_ShowPMR.mrnameColumn)
        End Function
        
        Public Sub SetmrnameNull()
            Me(Me.tableSupMR_ShowPMR.mrnameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SupMR_ShowPMRRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SupMR_ShowPMRRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SupMR_ShowPMRRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SupMR_ShowPMRRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TeamDivision_ShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columndescription As DataColumn
        
        Friend Sub New()
            MyBase.New("TeamDivision_Show")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property descriptionColumn As DataColumn
            Get
                Return Me.columndescription
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TeamDivision_ShowRow
            Get
                Return CType(Me.Rows(index),TeamDivision_ShowRow)
            End Get
        End Property
        
        Public Event TeamDivision_ShowRowChanged As TeamDivision_ShowRowChangeEventHandler
        
        Public Event TeamDivision_ShowRowChanging As TeamDivision_ShowRowChangeEventHandler
        
        Public Event TeamDivision_ShowRowDeleted As TeamDivision_ShowRowChangeEventHandler
        
        Public Event TeamDivision_ShowRowDeleting As TeamDivision_ShowRowChangeEventHandler
        
        Public Overloads Sub AddTeamDivision_ShowRow(ByVal row As TeamDivision_ShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTeamDivision_ShowRow(ByVal description As String) As TeamDivision_ShowRow
            Dim rowTeamDivision_ShowRow As TeamDivision_ShowRow = CType(Me.NewRow,TeamDivision_ShowRow)
            rowTeamDivision_ShowRow.ItemArray = New Object() {description}
            Me.Rows.Add(rowTeamDivision_ShowRow)
            Return rowTeamDivision_ShowRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TeamDivision_ShowDataTable = CType(MyBase.Clone,TeamDivision_ShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TeamDivision_ShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columndescription = Me.Columns("description")
        End Sub
        
        Private Sub InitClass()
            Me.columndescription = New DataColumn("description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndescription)
        End Sub
        
        Public Function NewTeamDivision_ShowRow() As TeamDivision_ShowRow
            Return CType(Me.NewRow,TeamDivision_ShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TeamDivision_ShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TeamDivision_ShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TeamDivision_ShowRowChangedEvent) Is Nothing) Then
                RaiseEvent TeamDivision_ShowRowChanged(Me, New TeamDivision_ShowRowChangeEvent(CType(e.Row,TeamDivision_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TeamDivision_ShowRowChangingEvent) Is Nothing) Then
                RaiseEvent TeamDivision_ShowRowChanging(Me, New TeamDivision_ShowRowChangeEvent(CType(e.Row,TeamDivision_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TeamDivision_ShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent TeamDivision_ShowRowDeleted(Me, New TeamDivision_ShowRowChangeEvent(CType(e.Row,TeamDivision_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TeamDivision_ShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent TeamDivision_ShowRowDeleting(Me, New TeamDivision_ShowRowChangeEvent(CType(e.Row,TeamDivision_ShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTeamDivision_ShowRow(ByVal row As TeamDivision_ShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TeamDivision_ShowRow
        Inherits DataRow
        
        Private tableTeamDivision_Show As TeamDivision_ShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTeamDivision_Show = CType(Me.Table,TeamDivision_ShowDataTable)
        End Sub
        
        Public Property description As String
            Get
                Try 
                    Return CType(Me(Me.tableTeamDivision_Show.descriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeamDivision_Show.descriptionColumn) = value
            End Set
        End Property
        
        Public Function IsdescriptionNull() As Boolean
            Return Me.IsNull(Me.tableTeamDivision_Show.descriptionColumn)
        End Function
        
        Public Sub SetdescriptionNull()
            Me(Me.tableTeamDivision_Show.descriptionColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TeamDivision_ShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TeamDivision_ShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TeamDivision_ShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TeamDivision_ShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ActDivision_ShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columndiv As DataColumn
        
        Friend Sub New()
            MyBase.New("ActDivision_Show")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property divColumn As DataColumn
            Get
                Return Me.columndiv
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ActDivision_ShowRow
            Get
                Return CType(Me.Rows(index),ActDivision_ShowRow)
            End Get
        End Property
        
        Public Event ActDivision_ShowRowChanged As ActDivision_ShowRowChangeEventHandler
        
        Public Event ActDivision_ShowRowChanging As ActDivision_ShowRowChangeEventHandler
        
        Public Event ActDivision_ShowRowDeleted As ActDivision_ShowRowChangeEventHandler
        
        Public Event ActDivision_ShowRowDeleting As ActDivision_ShowRowChangeEventHandler
        
        Public Overloads Sub AddActDivision_ShowRow(ByVal row As ActDivision_ShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddActDivision_ShowRow(ByVal div As String) As ActDivision_ShowRow
            Dim rowActDivision_ShowRow As ActDivision_ShowRow = CType(Me.NewRow,ActDivision_ShowRow)
            rowActDivision_ShowRow.ItemArray = New Object() {div}
            Me.Rows.Add(rowActDivision_ShowRow)
            Return rowActDivision_ShowRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ActDivision_ShowDataTable = CType(MyBase.Clone,ActDivision_ShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ActDivision_ShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columndiv = Me.Columns("div")
        End Sub
        
        Private Sub InitClass()
            Me.columndiv = New DataColumn("div", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndiv)
        End Sub
        
        Public Function NewActDivision_ShowRow() As ActDivision_ShowRow
            Return CType(Me.NewRow,ActDivision_ShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ActDivision_ShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ActDivision_ShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ActDivision_ShowRowChangedEvent) Is Nothing) Then
                RaiseEvent ActDivision_ShowRowChanged(Me, New ActDivision_ShowRowChangeEvent(CType(e.Row,ActDivision_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ActDivision_ShowRowChangingEvent) Is Nothing) Then
                RaiseEvent ActDivision_ShowRowChanging(Me, New ActDivision_ShowRowChangeEvent(CType(e.Row,ActDivision_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ActDivision_ShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent ActDivision_ShowRowDeleted(Me, New ActDivision_ShowRowChangeEvent(CType(e.Row,ActDivision_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ActDivision_ShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent ActDivision_ShowRowDeleting(Me, New ActDivision_ShowRowChangeEvent(CType(e.Row,ActDivision_ShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveActDivision_ShowRow(ByVal row As ActDivision_ShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ActDivision_ShowRow
        Inherits DataRow
        
        Private tableActDivision_Show As ActDivision_ShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableActDivision_Show = CType(Me.Table,ActDivision_ShowDataTable)
        End Sub
        
        Public Property div As String
            Get
                Try 
                    Return CType(Me(Me.tableActDivision_Show.divColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableActDivision_Show.divColumn) = value
            End Set
        End Property
        
        Public Function IsdivNull() As Boolean
            Return Me.IsNull(Me.tableActDivision_Show.divColumn)
        End Function
        
        Public Sub SetdivNull()
            Me(Me.tableActDivision_Show.divColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ActDivision_ShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ActDivision_ShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ActDivision_ShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ActDivision_ShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MRterri_ShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnprincode As DataColumn
        
        Private columnstart_date As DataColumn
        
        Private columnend_date As DataColumn
        
        Private columnmrcode As DataColumn
        
        Private columnMedRepresentative As DataColumn
        
        Private columnrownumber As DataColumn
        
        Private columnterritorydr As DataColumn
        
        Private columncreatedate As DataColumn
        
        Private columnupdatedate As DataColumn
        
        Private columnlastuser As DataColumn
        
        Friend Sub New()
            MyBase.New("MRterri_Show")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property princodeColumn As DataColumn
            Get
                Return Me.columnprincode
            End Get
        End Property
        
        Friend ReadOnly Property start_dateColumn As DataColumn
            Get
                Return Me.columnstart_date
            End Get
        End Property
        
        Friend ReadOnly Property end_dateColumn As DataColumn
            Get
                Return Me.columnend_date
            End Get
        End Property
        
        Friend ReadOnly Property mrcodeColumn As DataColumn
            Get
                Return Me.columnmrcode
            End Get
        End Property
        
        Friend ReadOnly Property MedRepresentativeColumn As DataColumn
            Get
                Return Me.columnMedRepresentative
            End Get
        End Property
        
        Friend ReadOnly Property rownumberColumn As DataColumn
            Get
                Return Me.columnrownumber
            End Get
        End Property
        
        Friend ReadOnly Property territorydrColumn As DataColumn
            Get
                Return Me.columnterritorydr
            End Get
        End Property
        
        Friend ReadOnly Property createdateColumn As DataColumn
            Get
                Return Me.columncreatedate
            End Get
        End Property
        
        Friend ReadOnly Property updatedateColumn As DataColumn
            Get
                Return Me.columnupdatedate
            End Get
        End Property
        
        Friend ReadOnly Property lastuserColumn As DataColumn
            Get
                Return Me.columnlastuser
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As MRterri_ShowRow
            Get
                Return CType(Me.Rows(index),MRterri_ShowRow)
            End Get
        End Property
        
        Public Event MRterri_ShowRowChanged As MRterri_ShowRowChangeEventHandler
        
        Public Event MRterri_ShowRowChanging As MRterri_ShowRowChangeEventHandler
        
        Public Event MRterri_ShowRowDeleted As MRterri_ShowRowChangeEventHandler
        
        Public Event MRterri_ShowRowDeleting As MRterri_ShowRowChangeEventHandler
        
        Public Overloads Sub AddMRterri_ShowRow(ByVal row As MRterri_ShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMRterri_ShowRow(ByVal princode As String, ByVal start_date As Date, ByVal end_date As Date, ByVal mrcode As String, ByVal MedRepresentative As String, ByVal rownumber As Integer, ByVal territorydr As String, ByVal createdate As Date, ByVal updatedate As Date, ByVal lastuser As String) As MRterri_ShowRow
            Dim rowMRterri_ShowRow As MRterri_ShowRow = CType(Me.NewRow,MRterri_ShowRow)
            rowMRterri_ShowRow.ItemArray = New Object() {princode, start_date, end_date, mrcode, MedRepresentative, rownumber, territorydr, createdate, updatedate, lastuser}
            Me.Rows.Add(rowMRterri_ShowRow)
            Return rowMRterri_ShowRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As MRterri_ShowDataTable = CType(MyBase.Clone,MRterri_ShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New MRterri_ShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnprincode = Me.Columns("princode")
            Me.columnstart_date = Me.Columns("start_date")
            Me.columnend_date = Me.Columns("end_date")
            Me.columnmrcode = Me.Columns("mrcode")
            Me.columnMedRepresentative = Me.Columns("MedRepresentative")
            Me.columnrownumber = Me.Columns("rownumber")
            Me.columnterritorydr = Me.Columns("territorydr")
            Me.columncreatedate = Me.Columns("createdate")
            Me.columnupdatedate = Me.Columns("updatedate")
            Me.columnlastuser = Me.Columns("lastuser")
        End Sub
        
        Private Sub InitClass()
            Me.columnprincode = New DataColumn("princode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprincode)
            Me.columnstart_date = New DataColumn("start_date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstart_date)
            Me.columnend_date = New DataColumn("end_date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnend_date)
            Me.columnmrcode = New DataColumn("mrcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmrcode)
            Me.columnMedRepresentative = New DataColumn("MedRepresentative", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMedRepresentative)
            Me.columnrownumber = New DataColumn("rownumber", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrownumber)
            Me.columnterritorydr = New DataColumn("territorydr", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnterritorydr)
            Me.columncreatedate = New DataColumn("createdate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncreatedate)
            Me.columnupdatedate = New DataColumn("updatedate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnupdatedate)
            Me.columnlastuser = New DataColumn("lastuser", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlastuser)
        End Sub
        
        Public Function NewMRterri_ShowRow() As MRterri_ShowRow
            Return CType(Me.NewRow,MRterri_ShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New MRterri_ShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MRterri_ShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MRterri_ShowRowChangedEvent) Is Nothing) Then
                RaiseEvent MRterri_ShowRowChanged(Me, New MRterri_ShowRowChangeEvent(CType(e.Row,MRterri_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MRterri_ShowRowChangingEvent) Is Nothing) Then
                RaiseEvent MRterri_ShowRowChanging(Me, New MRterri_ShowRowChangeEvent(CType(e.Row,MRterri_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MRterri_ShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent MRterri_ShowRowDeleted(Me, New MRterri_ShowRowChangeEvent(CType(e.Row,MRterri_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MRterri_ShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent MRterri_ShowRowDeleting(Me, New MRterri_ShowRowChangeEvent(CType(e.Row,MRterri_ShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMRterri_ShowRow(ByVal row As MRterri_ShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MRterri_ShowRow
        Inherits DataRow
        
        Private tableMRterri_Show As MRterri_ShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMRterri_Show = CType(Me.Table,MRterri_ShowDataTable)
        End Sub
        
        Public Property princode As String
            Get
                Try 
                    Return CType(Me(Me.tableMRterri_Show.princodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMRterri_Show.princodeColumn) = value
            End Set
        End Property
        
        Public Property start_date As Date
            Get
                Try 
                    Return CType(Me(Me.tableMRterri_Show.start_dateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMRterri_Show.start_dateColumn) = value
            End Set
        End Property
        
        Public Property end_date As Date
            Get
                Try 
                    Return CType(Me(Me.tableMRterri_Show.end_dateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMRterri_Show.end_dateColumn) = value
            End Set
        End Property
        
        Public Property mrcode As String
            Get
                Try 
                    Return CType(Me(Me.tableMRterri_Show.mrcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMRterri_Show.mrcodeColumn) = value
            End Set
        End Property
        
        Public Property MedRepresentative As String
            Get
                Try 
                    Return CType(Me(Me.tableMRterri_Show.MedRepresentativeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMRterri_Show.MedRepresentativeColumn) = value
            End Set
        End Property
        
        Public Property rownumber As Integer
            Get
                Try 
                    Return CType(Me(Me.tableMRterri_Show.rownumberColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMRterri_Show.rownumberColumn) = value
            End Set
        End Property
        
        Public Property territorydr As String
            Get
                Try 
                    Return CType(Me(Me.tableMRterri_Show.territorydrColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMRterri_Show.territorydrColumn) = value
            End Set
        End Property
        
        Public Property createdate As Date
            Get
                Try 
                    Return CType(Me(Me.tableMRterri_Show.createdateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMRterri_Show.createdateColumn) = value
            End Set
        End Property
        
        Public Property updatedate As Date
            Get
                Try 
                    Return CType(Me(Me.tableMRterri_Show.updatedateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMRterri_Show.updatedateColumn) = value
            End Set
        End Property
        
        Public Property lastuser As String
            Get
                Try 
                    Return CType(Me(Me.tableMRterri_Show.lastuserColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMRterri_Show.lastuserColumn) = value
            End Set
        End Property
        
        Public Function IsprincodeNull() As Boolean
            Return Me.IsNull(Me.tableMRterri_Show.princodeColumn)
        End Function
        
        Public Sub SetprincodeNull()
            Me(Me.tableMRterri_Show.princodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isstart_dateNull() As Boolean
            Return Me.IsNull(Me.tableMRterri_Show.start_dateColumn)
        End Function
        
        Public Sub Setstart_dateNull()
            Me(Me.tableMRterri_Show.start_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isend_dateNull() As Boolean
            Return Me.IsNull(Me.tableMRterri_Show.end_dateColumn)
        End Function
        
        Public Sub Setend_dateNull()
            Me(Me.tableMRterri_Show.end_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmrcodeNull() As Boolean
            Return Me.IsNull(Me.tableMRterri_Show.mrcodeColumn)
        End Function
        
        Public Sub SetmrcodeNull()
            Me(Me.tableMRterri_Show.mrcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMedRepresentativeNull() As Boolean
            Return Me.IsNull(Me.tableMRterri_Show.MedRepresentativeColumn)
        End Function
        
        Public Sub SetMedRepresentativeNull()
            Me(Me.tableMRterri_Show.MedRepresentativeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsrownumberNull() As Boolean
            Return Me.IsNull(Me.tableMRterri_Show.rownumberColumn)
        End Function
        
        Public Sub SetrownumberNull()
            Me(Me.tableMRterri_Show.rownumberColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsterritorydrNull() As Boolean
            Return Me.IsNull(Me.tableMRterri_Show.territorydrColumn)
        End Function
        
        Public Sub SetterritorydrNull()
            Me(Me.tableMRterri_Show.territorydrColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscreatedateNull() As Boolean
            Return Me.IsNull(Me.tableMRterri_Show.createdateColumn)
        End Function
        
        Public Sub SetcreatedateNull()
            Me(Me.tableMRterri_Show.createdateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsupdatedateNull() As Boolean
            Return Me.IsNull(Me.tableMRterri_Show.updatedateColumn)
        End Function
        
        Public Sub SetupdatedateNull()
            Me(Me.tableMRterri_Show.updatedateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslastuserNull() As Boolean
            Return Me.IsNull(Me.tableMRterri_Show.lastuserColumn)
        End Function
        
        Public Sub SetlastuserNull()
            Me(Me.tableMRterri_Show.lastuserColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MRterri_ShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As MRterri_ShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As MRterri_ShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As MRterri_ShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MRterriT_ShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnterritorycode As DataColumn
        
        Private columnterritory As DataColumn
        
        Private columnterritorylist As DataColumn
        
        Private columnprovince As DataColumn
        
        Private columnrowid As DataColumn
        
        Friend Sub New()
            MyBase.New("MRterriT_Show")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property territorycodeColumn As DataColumn
            Get
                Return Me.columnterritorycode
            End Get
        End Property
        
        Friend ReadOnly Property territoryColumn As DataColumn
            Get
                Return Me.columnterritory
            End Get
        End Property
        
        Friend ReadOnly Property territorylistColumn As DataColumn
            Get
                Return Me.columnterritorylist
            End Get
        End Property
        
        Friend ReadOnly Property provinceColumn As DataColumn
            Get
                Return Me.columnprovince
            End Get
        End Property
        
        Friend ReadOnly Property rowidColumn As DataColumn
            Get
                Return Me.columnrowid
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As MRterriT_ShowRow
            Get
                Return CType(Me.Rows(index),MRterriT_ShowRow)
            End Get
        End Property
        
        Public Event MRterriT_ShowRowChanged As MRterriT_ShowRowChangeEventHandler
        
        Public Event MRterriT_ShowRowChanging As MRterriT_ShowRowChangeEventHandler
        
        Public Event MRterriT_ShowRowDeleted As MRterriT_ShowRowChangeEventHandler
        
        Public Event MRterriT_ShowRowDeleting As MRterriT_ShowRowChangeEventHandler
        
        Public Overloads Sub AddMRterriT_ShowRow(ByVal row As MRterriT_ShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMRterriT_ShowRow(ByVal territorycode As String, ByVal territory As String, ByVal territorylist As String, ByVal province As String, ByVal rowid As Long) As MRterriT_ShowRow
            Dim rowMRterriT_ShowRow As MRterriT_ShowRow = CType(Me.NewRow,MRterriT_ShowRow)
            rowMRterriT_ShowRow.ItemArray = New Object() {territorycode, territory, territorylist, province, rowid}
            Me.Rows.Add(rowMRterriT_ShowRow)
            Return rowMRterriT_ShowRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As MRterriT_ShowDataTable = CType(MyBase.Clone,MRterriT_ShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New MRterriT_ShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnterritorycode = Me.Columns("territorycode")
            Me.columnterritory = Me.Columns("territory")
            Me.columnterritorylist = Me.Columns("territorylist")
            Me.columnprovince = Me.Columns("province")
            Me.columnrowid = Me.Columns("rowid")
        End Sub
        
        Private Sub InitClass()
            Me.columnterritorycode = New DataColumn("territorycode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnterritorycode)
            Me.columnterritory = New DataColumn("territory", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnterritory)
            Me.columnterritorylist = New DataColumn("territorylist", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnterritorylist)
            Me.columnprovince = New DataColumn("province", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprovince)
            Me.columnrowid = New DataColumn("rowid", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrowid)
        End Sub
        
        Public Function NewMRterriT_ShowRow() As MRterriT_ShowRow
            Return CType(Me.NewRow,MRterriT_ShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New MRterriT_ShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MRterriT_ShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MRterriT_ShowRowChangedEvent) Is Nothing) Then
                RaiseEvent MRterriT_ShowRowChanged(Me, New MRterriT_ShowRowChangeEvent(CType(e.Row,MRterriT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MRterriT_ShowRowChangingEvent) Is Nothing) Then
                RaiseEvent MRterriT_ShowRowChanging(Me, New MRterriT_ShowRowChangeEvent(CType(e.Row,MRterriT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MRterriT_ShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent MRterriT_ShowRowDeleted(Me, New MRterriT_ShowRowChangeEvent(CType(e.Row,MRterriT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MRterriT_ShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent MRterriT_ShowRowDeleting(Me, New MRterriT_ShowRowChangeEvent(CType(e.Row,MRterriT_ShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMRterriT_ShowRow(ByVal row As MRterriT_ShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MRterriT_ShowRow
        Inherits DataRow
        
        Private tableMRterriT_Show As MRterriT_ShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMRterriT_Show = CType(Me.Table,MRterriT_ShowDataTable)
        End Sub
        
        Public Property territorycode As String
            Get
                Try 
                    Return CType(Me(Me.tableMRterriT_Show.territorycodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMRterriT_Show.territorycodeColumn) = value
            End Set
        End Property
        
        Public Property territory As String
            Get
                Try 
                    Return CType(Me(Me.tableMRterriT_Show.territoryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMRterriT_Show.territoryColumn) = value
            End Set
        End Property
        
        Public Property territorylist As String
            Get
                Try 
                    Return CType(Me(Me.tableMRterriT_Show.territorylistColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMRterriT_Show.territorylistColumn) = value
            End Set
        End Property
        
        Public Property province As String
            Get
                Try 
                    Return CType(Me(Me.tableMRterriT_Show.provinceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMRterriT_Show.provinceColumn) = value
            End Set
        End Property
        
        Public Property rowid As Long
            Get
                Try 
                    Return CType(Me(Me.tableMRterriT_Show.rowidColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMRterriT_Show.rowidColumn) = value
            End Set
        End Property
        
        Public Function IsterritorycodeNull() As Boolean
            Return Me.IsNull(Me.tableMRterriT_Show.territorycodeColumn)
        End Function
        
        Public Sub SetterritorycodeNull()
            Me(Me.tableMRterriT_Show.territorycodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsterritoryNull() As Boolean
            Return Me.IsNull(Me.tableMRterriT_Show.territoryColumn)
        End Function
        
        Public Sub SetterritoryNull()
            Me(Me.tableMRterriT_Show.territoryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsterritorylistNull() As Boolean
            Return Me.IsNull(Me.tableMRterriT_Show.territorylistColumn)
        End Function
        
        Public Sub SetterritorylistNull()
            Me(Me.tableMRterriT_Show.territorylistColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsprovinceNull() As Boolean
            Return Me.IsNull(Me.tableMRterriT_Show.provinceColumn)
        End Function
        
        Public Sub SetprovinceNull()
            Me(Me.tableMRterriT_Show.provinceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsrowidNull() As Boolean
            Return Me.IsNull(Me.tableMRterriT_Show.rowidColumn)
        End Function
        
        Public Sub SetrowidNull()
            Me(Me.tableMRterriT_Show.rowidColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MRterriT_ShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As MRterriT_ShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As MRterriT_ShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As MRterriT_ShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MRterriP_ShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnprincode As DataColumn
        
        Private columnprinname As DataColumn
        
        Private columnPrincipalList As DataColumn
        
        Friend Sub New()
            MyBase.New("MRterriP_Show")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property princodeColumn As DataColumn
            Get
                Return Me.columnprincode
            End Get
        End Property
        
        Friend ReadOnly Property prinnameColumn As DataColumn
            Get
                Return Me.columnprinname
            End Get
        End Property
        
        Friend ReadOnly Property PrincipalListColumn As DataColumn
            Get
                Return Me.columnPrincipalList
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As MRterriP_ShowRow
            Get
                Return CType(Me.Rows(index),MRterriP_ShowRow)
            End Get
        End Property
        
        Public Event MRterriP_ShowRowChanged As MRterriP_ShowRowChangeEventHandler
        
        Public Event MRterriP_ShowRowChanging As MRterriP_ShowRowChangeEventHandler
        
        Public Event MRterriP_ShowRowDeleted As MRterriP_ShowRowChangeEventHandler
        
        Public Event MRterriP_ShowRowDeleting As MRterriP_ShowRowChangeEventHandler
        
        Public Overloads Sub AddMRterriP_ShowRow(ByVal row As MRterriP_ShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMRterriP_ShowRow(ByVal princode As String, ByVal prinname As String, ByVal PrincipalList As String) As MRterriP_ShowRow
            Dim rowMRterriP_ShowRow As MRterriP_ShowRow = CType(Me.NewRow,MRterriP_ShowRow)
            rowMRterriP_ShowRow.ItemArray = New Object() {princode, prinname, PrincipalList}
            Me.Rows.Add(rowMRterriP_ShowRow)
            Return rowMRterriP_ShowRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As MRterriP_ShowDataTable = CType(MyBase.Clone,MRterriP_ShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New MRterriP_ShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnprincode = Me.Columns("princode")
            Me.columnprinname = Me.Columns("prinname")
            Me.columnPrincipalList = Me.Columns("PrincipalList")
        End Sub
        
        Private Sub InitClass()
            Me.columnprincode = New DataColumn("princode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprincode)
            Me.columnprinname = New DataColumn("prinname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprinname)
            Me.columnPrincipalList = New DataColumn("PrincipalList", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrincipalList)
        End Sub
        
        Public Function NewMRterriP_ShowRow() As MRterriP_ShowRow
            Return CType(Me.NewRow,MRterriP_ShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New MRterriP_ShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MRterriP_ShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MRterriP_ShowRowChangedEvent) Is Nothing) Then
                RaiseEvent MRterriP_ShowRowChanged(Me, New MRterriP_ShowRowChangeEvent(CType(e.Row,MRterriP_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MRterriP_ShowRowChangingEvent) Is Nothing) Then
                RaiseEvent MRterriP_ShowRowChanging(Me, New MRterriP_ShowRowChangeEvent(CType(e.Row,MRterriP_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MRterriP_ShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent MRterriP_ShowRowDeleted(Me, New MRterriP_ShowRowChangeEvent(CType(e.Row,MRterriP_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MRterriP_ShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent MRterriP_ShowRowDeleting(Me, New MRterriP_ShowRowChangeEvent(CType(e.Row,MRterriP_ShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMRterriP_ShowRow(ByVal row As MRterriP_ShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MRterriP_ShowRow
        Inherits DataRow
        
        Private tableMRterriP_Show As MRterriP_ShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMRterriP_Show = CType(Me.Table,MRterriP_ShowDataTable)
        End Sub
        
        Public Property princode As String
            Get
                Try 
                    Return CType(Me(Me.tableMRterriP_Show.princodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMRterriP_Show.princodeColumn) = value
            End Set
        End Property
        
        Public Property prinname As String
            Get
                Try 
                    Return CType(Me(Me.tableMRterriP_Show.prinnameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMRterriP_Show.prinnameColumn) = value
            End Set
        End Property
        
        Public Property PrincipalList As String
            Get
                Try 
                    Return CType(Me(Me.tableMRterriP_Show.PrincipalListColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMRterriP_Show.PrincipalListColumn) = value
            End Set
        End Property
        
        Public Function IsprincodeNull() As Boolean
            Return Me.IsNull(Me.tableMRterriP_Show.princodeColumn)
        End Function
        
        Public Sub SetprincodeNull()
            Me(Me.tableMRterriP_Show.princodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsprinnameNull() As Boolean
            Return Me.IsNull(Me.tableMRterriP_Show.prinnameColumn)
        End Function
        
        Public Sub SetprinnameNull()
            Me(Me.tableMRterriP_Show.prinnameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPrincipalListNull() As Boolean
            Return Me.IsNull(Me.tableMRterriP_Show.PrincipalListColumn)
        End Function
        
        Public Sub SetPrincipalListNull()
            Me(Me.tableMRterriP_Show.PrincipalListColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MRterriP_ShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As MRterriP_ShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As MRterriP_ShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As MRterriP_ShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MRcombo2DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMedRepA As DataColumn
        
        Friend Sub New()
            MyBase.New("MRcombo2")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property MedRepAColumn As DataColumn
            Get
                Return Me.columnMedRepA
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As MRcombo2Row
            Get
                Return CType(Me.Rows(index),MRcombo2Row)
            End Get
        End Property
        
        Public Event MRcombo2RowChanged As MRcombo2RowChangeEventHandler
        
        Public Event MRcombo2RowChanging As MRcombo2RowChangeEventHandler
        
        Public Event MRcombo2RowDeleted As MRcombo2RowChangeEventHandler
        
        Public Event MRcombo2RowDeleting As MRcombo2RowChangeEventHandler
        
        Public Overloads Sub AddMRcombo2Row(ByVal row As MRcombo2Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMRcombo2Row(ByVal MedRepA As String) As MRcombo2Row
            Dim rowMRcombo2Row As MRcombo2Row = CType(Me.NewRow,MRcombo2Row)
            rowMRcombo2Row.ItemArray = New Object() {MedRepA}
            Me.Rows.Add(rowMRcombo2Row)
            Return rowMRcombo2Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As MRcombo2DataTable = CType(MyBase.Clone,MRcombo2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New MRcombo2DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMedRepA = Me.Columns("MedRepA")
        End Sub
        
        Private Sub InitClass()
            Me.columnMedRepA = New DataColumn("MedRepA", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMedRepA)
        End Sub
        
        Public Function NewMRcombo2Row() As MRcombo2Row
            Return CType(Me.NewRow,MRcombo2Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New MRcombo2Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MRcombo2Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MRcombo2RowChangedEvent) Is Nothing) Then
                RaiseEvent MRcombo2RowChanged(Me, New MRcombo2RowChangeEvent(CType(e.Row,MRcombo2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MRcombo2RowChangingEvent) Is Nothing) Then
                RaiseEvent MRcombo2RowChanging(Me, New MRcombo2RowChangeEvent(CType(e.Row,MRcombo2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MRcombo2RowDeletedEvent) Is Nothing) Then
                RaiseEvent MRcombo2RowDeleted(Me, New MRcombo2RowChangeEvent(CType(e.Row,MRcombo2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MRcombo2RowDeletingEvent) Is Nothing) Then
                RaiseEvent MRcombo2RowDeleting(Me, New MRcombo2RowChangeEvent(CType(e.Row,MRcombo2Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMRcombo2Row(ByVal row As MRcombo2Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MRcombo2Row
        Inherits DataRow
        
        Private tableMRcombo2 As MRcombo2DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMRcombo2 = CType(Me.Table,MRcombo2DataTable)
        End Sub
        
        Public Property MedRepA As String
            Get
                Try 
                    Return CType(Me(Me.tableMRcombo2.MedRepAColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMRcombo2.MedRepAColumn) = value
            End Set
        End Property
        
        Public Function IsMedRepANull() As Boolean
            Return Me.IsNull(Me.tableMRcombo2.MedRepAColumn)
        End Function
        
        Public Sub SetMedRepANull()
            Me(Me.tableMRcombo2.MedRepAColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MRcombo2RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As MRcombo2Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As MRcombo2Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As MRcombo2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BudgetDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnJanuary As DataColumn
        
        Private columnFebruary As DataColumn
        
        Private columnMarch As DataColumn
        
        Private columnApril As DataColumn
        
        Private columnMay As DataColumn
        
        Private columnJune As DataColumn
        
        Private columnJuly As DataColumn
        
        Private columnAugust As DataColumn
        
        Private columnSeptember As DataColumn
        
        Private columnOctober As DataColumn
        
        Private columnNovember As DataColumn
        
        Private columnDecember As DataColumn
        
        Friend Sub New()
            MyBase.New("Budget")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property JanuaryColumn As DataColumn
            Get
                Return Me.columnJanuary
            End Get
        End Property
        
        Friend ReadOnly Property FebruaryColumn As DataColumn
            Get
                Return Me.columnFebruary
            End Get
        End Property
        
        Friend ReadOnly Property MarchColumn As DataColumn
            Get
                Return Me.columnMarch
            End Get
        End Property
        
        Friend ReadOnly Property AprilColumn As DataColumn
            Get
                Return Me.columnApril
            End Get
        End Property
        
        Friend ReadOnly Property MayColumn As DataColumn
            Get
                Return Me.columnMay
            End Get
        End Property
        
        Friend ReadOnly Property JuneColumn As DataColumn
            Get
                Return Me.columnJune
            End Get
        End Property
        
        Friend ReadOnly Property JulyColumn As DataColumn
            Get
                Return Me.columnJuly
            End Get
        End Property
        
        Friend ReadOnly Property AugustColumn As DataColumn
            Get
                Return Me.columnAugust
            End Get
        End Property
        
        Friend ReadOnly Property SeptemberColumn As DataColumn
            Get
                Return Me.columnSeptember
            End Get
        End Property
        
        Friend ReadOnly Property OctoberColumn As DataColumn
            Get
                Return Me.columnOctober
            End Get
        End Property
        
        Friend ReadOnly Property NovemberColumn As DataColumn
            Get
                Return Me.columnNovember
            End Get
        End Property
        
        Friend ReadOnly Property DecemberColumn As DataColumn
            Get
                Return Me.columnDecember
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BudgetRow
            Get
                Return CType(Me.Rows(index),BudgetRow)
            End Get
        End Property
        
        Public Event BudgetRowChanged As BudgetRowChangeEventHandler
        
        Public Event BudgetRowChanging As BudgetRowChangeEventHandler
        
        Public Event BudgetRowDeleted As BudgetRowChangeEventHandler
        
        Public Event BudgetRowDeleting As BudgetRowChangeEventHandler
        
        Public Overloads Sub AddBudgetRow(ByVal row As BudgetRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBudgetRow(ByVal January As Decimal, ByVal February As Decimal, ByVal March As Decimal, ByVal April As Decimal, ByVal May As Decimal, ByVal June As Decimal, ByVal July As Decimal, ByVal August As Decimal, ByVal September As Decimal, ByVal October As Decimal, ByVal November As Decimal, ByVal December As Decimal) As BudgetRow
            Dim rowBudgetRow As BudgetRow = CType(Me.NewRow,BudgetRow)
            rowBudgetRow.ItemArray = New Object() {January, February, March, April, May, June, July, August, September, October, November, December}
            Me.Rows.Add(rowBudgetRow)
            Return rowBudgetRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BudgetDataTable = CType(MyBase.Clone,BudgetDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BudgetDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnJanuary = Me.Columns("January")
            Me.columnFebruary = Me.Columns("February")
            Me.columnMarch = Me.Columns("March")
            Me.columnApril = Me.Columns("April")
            Me.columnMay = Me.Columns("May")
            Me.columnJune = Me.Columns("June")
            Me.columnJuly = Me.Columns("July")
            Me.columnAugust = Me.Columns("August")
            Me.columnSeptember = Me.Columns("September")
            Me.columnOctober = Me.Columns("October")
            Me.columnNovember = Me.Columns("November")
            Me.columnDecember = Me.Columns("December")
        End Sub
        
        Private Sub InitClass()
            Me.columnJanuary = New DataColumn("January", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnJanuary)
            Me.columnFebruary = New DataColumn("February", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFebruary)
            Me.columnMarch = New DataColumn("March", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMarch)
            Me.columnApril = New DataColumn("April", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApril)
            Me.columnMay = New DataColumn("May", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMay)
            Me.columnJune = New DataColumn("June", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnJune)
            Me.columnJuly = New DataColumn("July", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnJuly)
            Me.columnAugust = New DataColumn("August", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAugust)
            Me.columnSeptember = New DataColumn("September", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSeptember)
            Me.columnOctober = New DataColumn("October", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOctober)
            Me.columnNovember = New DataColumn("November", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNovember)
            Me.columnDecember = New DataColumn("December", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDecember)
            Me.columnJuly.AllowDBNull = false
        End Sub
        
        Public Function NewBudgetRow() As BudgetRow
            Return CType(Me.NewRow,BudgetRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BudgetRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BudgetRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BudgetRowChangedEvent) Is Nothing) Then
                RaiseEvent BudgetRowChanged(Me, New BudgetRowChangeEvent(CType(e.Row,BudgetRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BudgetRowChangingEvent) Is Nothing) Then
                RaiseEvent BudgetRowChanging(Me, New BudgetRowChangeEvent(CType(e.Row,BudgetRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BudgetRowDeletedEvent) Is Nothing) Then
                RaiseEvent BudgetRowDeleted(Me, New BudgetRowChangeEvent(CType(e.Row,BudgetRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BudgetRowDeletingEvent) Is Nothing) Then
                RaiseEvent BudgetRowDeleting(Me, New BudgetRowChangeEvent(CType(e.Row,BudgetRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBudgetRow(ByVal row As BudgetRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BudgetRow
        Inherits DataRow
        
        Private tableBudget As BudgetDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBudget = CType(Me.Table,BudgetDataTable)
        End Sub
        
        Public Property January As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableBudget.JanuaryColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBudget.JanuaryColumn) = value
            End Set
        End Property
        
        Public Property February As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableBudget.FebruaryColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBudget.FebruaryColumn) = value
            End Set
        End Property
        
        Public Property March As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableBudget.MarchColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBudget.MarchColumn) = value
            End Set
        End Property
        
        Public Property April As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableBudget.AprilColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBudget.AprilColumn) = value
            End Set
        End Property
        
        Public Property May As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableBudget.MayColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBudget.MayColumn) = value
            End Set
        End Property
        
        Public Property June As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableBudget.JuneColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBudget.JuneColumn) = value
            End Set
        End Property
        
        Public Property July As Decimal
            Get
                Return CType(Me(Me.tableBudget.JulyColumn),Decimal)
            End Get
            Set
                Me(Me.tableBudget.JulyColumn) = value
            End Set
        End Property
        
        Public Property August As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableBudget.AugustColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBudget.AugustColumn) = value
            End Set
        End Property
        
        Public Property September As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableBudget.SeptemberColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBudget.SeptemberColumn) = value
            End Set
        End Property
        
        Public Property October As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableBudget.OctoberColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBudget.OctoberColumn) = value
            End Set
        End Property
        
        Public Property November As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableBudget.NovemberColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBudget.NovemberColumn) = value
            End Set
        End Property
        
        Public Property December As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableBudget.DecemberColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBudget.DecemberColumn) = value
            End Set
        End Property
        
        Public Function IsJanuaryNull() As Boolean
            Return Me.IsNull(Me.tableBudget.JanuaryColumn)
        End Function
        
        Public Sub SetJanuaryNull()
            Me(Me.tableBudget.JanuaryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFebruaryNull() As Boolean
            Return Me.IsNull(Me.tableBudget.FebruaryColumn)
        End Function
        
        Public Sub SetFebruaryNull()
            Me(Me.tableBudget.FebruaryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMarchNull() As Boolean
            Return Me.IsNull(Me.tableBudget.MarchColumn)
        End Function
        
        Public Sub SetMarchNull()
            Me(Me.tableBudget.MarchColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAprilNull() As Boolean
            Return Me.IsNull(Me.tableBudget.AprilColumn)
        End Function
        
        Public Sub SetAprilNull()
            Me(Me.tableBudget.AprilColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMayNull() As Boolean
            Return Me.IsNull(Me.tableBudget.MayColumn)
        End Function
        
        Public Sub SetMayNull()
            Me(Me.tableBudget.MayColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsJuneNull() As Boolean
            Return Me.IsNull(Me.tableBudget.JuneColumn)
        End Function
        
        Public Sub SetJuneNull()
            Me(Me.tableBudget.JuneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAugustNull() As Boolean
            Return Me.IsNull(Me.tableBudget.AugustColumn)
        End Function
        
        Public Sub SetAugustNull()
            Me(Me.tableBudget.AugustColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSeptemberNull() As Boolean
            Return Me.IsNull(Me.tableBudget.SeptemberColumn)
        End Function
        
        Public Sub SetSeptemberNull()
            Me(Me.tableBudget.SeptemberColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOctoberNull() As Boolean
            Return Me.IsNull(Me.tableBudget.OctoberColumn)
        End Function
        
        Public Sub SetOctoberNull()
            Me(Me.tableBudget.OctoberColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNovemberNull() As Boolean
            Return Me.IsNull(Me.tableBudget.NovemberColumn)
        End Function
        
        Public Sub SetNovemberNull()
            Me(Me.tableBudget.NovemberColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDecemberNull() As Boolean
            Return Me.IsNull(Me.tableBudget.DecemberColumn)
        End Function
        
        Public Sub SetDecemberNull()
            Me(Me.tableBudget.DecemberColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BudgetRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BudgetRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BudgetRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BudgetRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class YearDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnYear As DataColumn
        
        Friend Sub New()
            MyBase.New("Year")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property YearColumn As DataColumn
            Get
                Return Me.columnYear
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As YearRow
            Get
                Return CType(Me.Rows(index),YearRow)
            End Get
        End Property
        
        Public Event YearRowChanged As YearRowChangeEventHandler
        
        Public Event YearRowChanging As YearRowChangeEventHandler
        
        Public Event YearRowDeleted As YearRowChangeEventHandler
        
        Public Event YearRowDeleting As YearRowChangeEventHandler
        
        Public Overloads Sub AddYearRow(ByVal row As YearRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddYearRow(ByVal Year As Integer) As YearRow
            Dim rowYearRow As YearRow = CType(Me.NewRow,YearRow)
            rowYearRow.ItemArray = New Object() {Year}
            Me.Rows.Add(rowYearRow)
            Return rowYearRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As YearDataTable = CType(MyBase.Clone,YearDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New YearDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnYear = Me.Columns("Year")
        End Sub
        
        Private Sub InitClass()
            Me.columnYear = New DataColumn("Year", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnYear)
            Me.columnYear.AllowDBNull = false
        End Sub
        
        Public Function NewYearRow() As YearRow
            Return CType(Me.NewRow,YearRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New YearRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(YearRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.YearRowChangedEvent) Is Nothing) Then
                RaiseEvent YearRowChanged(Me, New YearRowChangeEvent(CType(e.Row,YearRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.YearRowChangingEvent) Is Nothing) Then
                RaiseEvent YearRowChanging(Me, New YearRowChangeEvent(CType(e.Row,YearRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.YearRowDeletedEvent) Is Nothing) Then
                RaiseEvent YearRowDeleted(Me, New YearRowChangeEvent(CType(e.Row,YearRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.YearRowDeletingEvent) Is Nothing) Then
                RaiseEvent YearRowDeleting(Me, New YearRowChangeEvent(CType(e.Row,YearRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveYearRow(ByVal row As YearRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class YearRow
        Inherits DataRow
        
        Private tableYear As YearDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableYear = CType(Me.Table,YearDataTable)
        End Sub
        
        Public Property Year As Integer
            Get
                Return CType(Me(Me.tableYear.YearColumn),Integer)
            End Get
            Set
                Me(Me.tableYear.YearColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class YearRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As YearRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As YearRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As YearRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LineItemDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnItemCode As DataColumn
        
        Private columnItemDesc As DataColumn
        
        Private columnStart_Date As DataColumn
        
        Private columnEnd_Date As DataColumn
        
        Private columnQty As DataColumn
        
        Private columnAmount As DataColumn
        
        Private columnrownumber As DataColumn
        
        Private columnCreateDate As DataColumn
        
        Private columnUpdateDate As DataColumn
        
        Private columnLastUser As DataColumn
        
        Friend Sub New()
            MyBase.New("LineItem")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ItemCodeColumn As DataColumn
            Get
                Return Me.columnItemCode
            End Get
        End Property
        
        Friend ReadOnly Property ItemDescColumn As DataColumn
            Get
                Return Me.columnItemDesc
            End Get
        End Property
        
        Friend ReadOnly Property Start_DateColumn As DataColumn
            Get
                Return Me.columnStart_Date
            End Get
        End Property
        
        Friend ReadOnly Property End_DateColumn As DataColumn
            Get
                Return Me.columnEnd_Date
            End Get
        End Property
        
        Friend ReadOnly Property QtyColumn As DataColumn
            Get
                Return Me.columnQty
            End Get
        End Property
        
        Friend ReadOnly Property AmountColumn As DataColumn
            Get
                Return Me.columnAmount
            End Get
        End Property
        
        Friend ReadOnly Property rownumberColumn As DataColumn
            Get
                Return Me.columnrownumber
            End Get
        End Property
        
        Friend ReadOnly Property CreateDateColumn As DataColumn
            Get
                Return Me.columnCreateDate
            End Get
        End Property
        
        Friend ReadOnly Property UpdateDateColumn As DataColumn
            Get
                Return Me.columnUpdateDate
            End Get
        End Property
        
        Friend ReadOnly Property LastUserColumn As DataColumn
            Get
                Return Me.columnLastUser
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As LineItemRow
            Get
                Return CType(Me.Rows(index),LineItemRow)
            End Get
        End Property
        
        Public Event LineItemRowChanged As LineItemRowChangeEventHandler
        
        Public Event LineItemRowChanging As LineItemRowChangeEventHandler
        
        Public Event LineItemRowDeleted As LineItemRowChangeEventHandler
        
        Public Event LineItemRowDeleting As LineItemRowChangeEventHandler
        
        Public Overloads Sub AddLineItemRow(ByVal row As LineItemRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddLineItemRow(ByVal ItemCode As String, ByVal ItemDesc As String, ByVal Start_Date As Date, ByVal End_Date As Date, ByVal Qty As Integer, ByVal Amount As Decimal, ByVal rownumber As Integer, ByVal CreateDate As Date, ByVal UpdateDate As Date, ByVal LastUser As String) As LineItemRow
            Dim rowLineItemRow As LineItemRow = CType(Me.NewRow,LineItemRow)
            rowLineItemRow.ItemArray = New Object() {ItemCode, ItemDesc, Start_Date, End_Date, Qty, Amount, rownumber, CreateDate, UpdateDate, LastUser}
            Me.Rows.Add(rowLineItemRow)
            Return rowLineItemRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As LineItemDataTable = CType(MyBase.Clone,LineItemDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New LineItemDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnItemCode = Me.Columns("ItemCode")
            Me.columnItemDesc = Me.Columns("ItemDesc")
            Me.columnStart_Date = Me.Columns("Start_Date")
            Me.columnEnd_Date = Me.Columns("End_Date")
            Me.columnQty = Me.Columns("Qty")
            Me.columnAmount = Me.Columns("Amount")
            Me.columnrownumber = Me.Columns("rownumber")
            Me.columnCreateDate = Me.Columns("CreateDate")
            Me.columnUpdateDate = Me.Columns("UpdateDate")
            Me.columnLastUser = Me.Columns("LastUser")
        End Sub
        
        Private Sub InitClass()
            Me.columnItemCode = New DataColumn("ItemCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemCode)
            Me.columnItemDesc = New DataColumn("ItemDesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemDesc)
            Me.columnStart_Date = New DataColumn("Start_Date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStart_Date)
            Me.columnEnd_Date = New DataColumn("End_Date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEnd_Date)
            Me.columnQty = New DataColumn("Qty", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQty)
            Me.columnAmount = New DataColumn("Amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAmount)
            Me.columnrownumber = New DataColumn("rownumber", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrownumber)
            Me.columnCreateDate = New DataColumn("CreateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreateDate)
            Me.columnUpdateDate = New DataColumn("UpdateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUpdateDate)
            Me.columnLastUser = New DataColumn("LastUser", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLastUser)
        End Sub
        
        Public Function NewLineItemRow() As LineItemRow
            Return CType(Me.NewRow,LineItemRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New LineItemRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(LineItemRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LineItemRowChangedEvent) Is Nothing) Then
                RaiseEvent LineItemRowChanged(Me, New LineItemRowChangeEvent(CType(e.Row,LineItemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LineItemRowChangingEvent) Is Nothing) Then
                RaiseEvent LineItemRowChanging(Me, New LineItemRowChangeEvent(CType(e.Row,LineItemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LineItemRowDeletedEvent) Is Nothing) Then
                RaiseEvent LineItemRowDeleted(Me, New LineItemRowChangeEvent(CType(e.Row,LineItemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LineItemRowDeletingEvent) Is Nothing) Then
                RaiseEvent LineItemRowDeleting(Me, New LineItemRowChangeEvent(CType(e.Row,LineItemRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveLineItemRow(ByVal row As LineItemRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LineItemRow
        Inherits DataRow
        
        Private tableLineItem As LineItemDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableLineItem = CType(Me.Table,LineItemDataTable)
        End Sub
        
        Public Property ItemCode As String
            Get
                Try 
                    Return CType(Me(Me.tableLineItem.ItemCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLineItem.ItemCodeColumn) = value
            End Set
        End Property
        
        Public Property ItemDesc As String
            Get
                Try 
                    Return CType(Me(Me.tableLineItem.ItemDescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLineItem.ItemDescColumn) = value
            End Set
        End Property
        
        Public Property Start_Date As Date
            Get
                Try 
                    Return CType(Me(Me.tableLineItem.Start_DateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLineItem.Start_DateColumn) = value
            End Set
        End Property
        
        Public Property End_Date As Date
            Get
                Try 
                    Return CType(Me(Me.tableLineItem.End_DateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLineItem.End_DateColumn) = value
            End Set
        End Property
        
        Public Property Qty As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLineItem.QtyColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLineItem.QtyColumn) = value
            End Set
        End Property
        
        Public Property Amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableLineItem.AmountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLineItem.AmountColumn) = value
            End Set
        End Property
        
        Public Property rownumber As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLineItem.rownumberColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLineItem.rownumberColumn) = value
            End Set
        End Property
        
        Public Property CreateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableLineItem.CreateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLineItem.CreateDateColumn) = value
            End Set
        End Property
        
        Public Property UpdateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableLineItem.UpdateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLineItem.UpdateDateColumn) = value
            End Set
        End Property
        
        Public Property LastUser As String
            Get
                Try 
                    Return CType(Me(Me.tableLineItem.LastUserColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLineItem.LastUserColumn) = value
            End Set
        End Property
        
        Public Function IsItemCodeNull() As Boolean
            Return Me.IsNull(Me.tableLineItem.ItemCodeColumn)
        End Function
        
        Public Sub SetItemCodeNull()
            Me(Me.tableLineItem.ItemCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItemDescNull() As Boolean
            Return Me.IsNull(Me.tableLineItem.ItemDescColumn)
        End Function
        
        Public Sub SetItemDescNull()
            Me(Me.tableLineItem.ItemDescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStart_DateNull() As Boolean
            Return Me.IsNull(Me.tableLineItem.Start_DateColumn)
        End Function
        
        Public Sub SetStart_DateNull()
            Me(Me.tableLineItem.Start_DateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEnd_DateNull() As Boolean
            Return Me.IsNull(Me.tableLineItem.End_DateColumn)
        End Function
        
        Public Sub SetEnd_DateNull()
            Me(Me.tableLineItem.End_DateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQtyNull() As Boolean
            Return Me.IsNull(Me.tableLineItem.QtyColumn)
        End Function
        
        Public Sub SetQtyNull()
            Me(Me.tableLineItem.QtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAmountNull() As Boolean
            Return Me.IsNull(Me.tableLineItem.AmountColumn)
        End Function
        
        Public Sub SetAmountNull()
            Me(Me.tableLineItem.AmountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsrownumberNull() As Boolean
            Return Me.IsNull(Me.tableLineItem.rownumberColumn)
        End Function
        
        Public Sub SetrownumberNull()
            Me(Me.tableLineItem.rownumberColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreateDateNull() As Boolean
            Return Me.IsNull(Me.tableLineItem.CreateDateColumn)
        End Function
        
        Public Sub SetCreateDateNull()
            Me(Me.tableLineItem.CreateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUpdateDateNull() As Boolean
            Return Me.IsNull(Me.tableLineItem.UpdateDateColumn)
        End Function
        
        Public Sub SetUpdateDateNull()
            Me(Me.tableLineItem.UpdateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLastUserNull() As Boolean
            Return Me.IsNull(Me.tableLineItem.LastUserColumn)
        End Function
        
        Public Sub SetLastUserNull()
            Me(Me.tableLineItem.LastUserColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LineItemRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As LineItemRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As LineItemRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As LineItemRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ItemBDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnAllItem As DataColumn
        
        Private columnItemUnit As DataColumn
        
        Private columnItmPrincipal As DataColumn
        
        Friend Sub New()
            MyBase.New("ItemB")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property AllItemColumn As DataColumn
            Get
                Return Me.columnAllItem
            End Get
        End Property
        
        Friend ReadOnly Property ItemUnitColumn As DataColumn
            Get
                Return Me.columnItemUnit
            End Get
        End Property
        
        Friend ReadOnly Property ItmPrincipalColumn As DataColumn
            Get
                Return Me.columnItmPrincipal
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ItemBRow
            Get
                Return CType(Me.Rows(index),ItemBRow)
            End Get
        End Property
        
        Public Event ItemBRowChanged As ItemBRowChangeEventHandler
        
        Public Event ItemBRowChanging As ItemBRowChangeEventHandler
        
        Public Event ItemBRowDeleted As ItemBRowChangeEventHandler
        
        Public Event ItemBRowDeleting As ItemBRowChangeEventHandler
        
        Public Overloads Sub AddItemBRow(ByVal row As ItemBRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddItemBRow(ByVal AllItem As String, ByVal ItemUnit As String, ByVal ItmPrincipal As String) As ItemBRow
            Dim rowItemBRow As ItemBRow = CType(Me.NewRow,ItemBRow)
            rowItemBRow.ItemArray = New Object() {AllItem, ItemUnit, ItmPrincipal}
            Me.Rows.Add(rowItemBRow)
            Return rowItemBRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ItemBDataTable = CType(MyBase.Clone,ItemBDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ItemBDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnAllItem = Me.Columns("AllItem")
            Me.columnItemUnit = Me.Columns("ItemUnit")
            Me.columnItmPrincipal = Me.Columns("ItmPrincipal")
        End Sub
        
        Private Sub InitClass()
            Me.columnAllItem = New DataColumn("AllItem", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAllItem)
            Me.columnItemUnit = New DataColumn("ItemUnit", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemUnit)
            Me.columnItmPrincipal = New DataColumn("ItmPrincipal", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItmPrincipal)
        End Sub
        
        Public Function NewItemBRow() As ItemBRow
            Return CType(Me.NewRow,ItemBRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ItemBRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ItemBRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ItemBRowChangedEvent) Is Nothing) Then
                RaiseEvent ItemBRowChanged(Me, New ItemBRowChangeEvent(CType(e.Row,ItemBRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ItemBRowChangingEvent) Is Nothing) Then
                RaiseEvent ItemBRowChanging(Me, New ItemBRowChangeEvent(CType(e.Row,ItemBRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ItemBRowDeletedEvent) Is Nothing) Then
                RaiseEvent ItemBRowDeleted(Me, New ItemBRowChangeEvent(CType(e.Row,ItemBRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ItemBRowDeletingEvent) Is Nothing) Then
                RaiseEvent ItemBRowDeleting(Me, New ItemBRowChangeEvent(CType(e.Row,ItemBRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveItemBRow(ByVal row As ItemBRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ItemBRow
        Inherits DataRow
        
        Private tableItemB As ItemBDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableItemB = CType(Me.Table,ItemBDataTable)
        End Sub
        
        Public Property AllItem As String
            Get
                Try 
                    Return CType(Me(Me.tableItemB.AllItemColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemB.AllItemColumn) = value
            End Set
        End Property
        
        Public Property ItemUnit As String
            Get
                Try 
                    Return CType(Me(Me.tableItemB.ItemUnitColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemB.ItemUnitColumn) = value
            End Set
        End Property
        
        Public Property ItmPrincipal As String
            Get
                Try 
                    Return CType(Me(Me.tableItemB.ItmPrincipalColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemB.ItmPrincipalColumn) = value
            End Set
        End Property
        
        Public Function IsAllItemNull() As Boolean
            Return Me.IsNull(Me.tableItemB.AllItemColumn)
        End Function
        
        Public Sub SetAllItemNull()
            Me(Me.tableItemB.AllItemColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItemUnitNull() As Boolean
            Return Me.IsNull(Me.tableItemB.ItemUnitColumn)
        End Function
        
        Public Sub SetItemUnitNull()
            Me(Me.tableItemB.ItemUnitColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItmPrincipalNull() As Boolean
            Return Me.IsNull(Me.tableItemB.ItmPrincipalColumn)
        End Function
        
        Public Sub SetItmPrincipalNull()
            Me(Me.tableItemB.ItmPrincipalColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ItemBRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ItemBRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ItemBRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ItemBRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ItemBudgetDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnDivision As DataColumn
        
        Private columnStart_Date As DataColumn
        
        Private columnEnd_Date As DataColumn
        
        Private columnQty As DataColumn
        
        Private columnAmount As DataColumn
        
        Private columnRownumber As DataColumn
        
        Private columnCreateDate As DataColumn
        
        Private columnUpdateDate As DataColumn
        
        Friend Sub New()
            MyBase.New("ItemBudget")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property DivisionColumn As DataColumn
            Get
                Return Me.columnDivision
            End Get
        End Property
        
        Friend ReadOnly Property Start_DateColumn As DataColumn
            Get
                Return Me.columnStart_Date
            End Get
        End Property
        
        Friend ReadOnly Property End_DateColumn As DataColumn
            Get
                Return Me.columnEnd_Date
            End Get
        End Property
        
        Friend ReadOnly Property QtyColumn As DataColumn
            Get
                Return Me.columnQty
            End Get
        End Property
        
        Friend ReadOnly Property AmountColumn As DataColumn
            Get
                Return Me.columnAmount
            End Get
        End Property
        
        Friend ReadOnly Property RownumberColumn As DataColumn
            Get
                Return Me.columnRownumber
            End Get
        End Property
        
        Friend ReadOnly Property CreateDateColumn As DataColumn
            Get
                Return Me.columnCreateDate
            End Get
        End Property
        
        Friend ReadOnly Property UpdateDateColumn As DataColumn
            Get
                Return Me.columnUpdateDate
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ItemBudgetRow
            Get
                Return CType(Me.Rows(index),ItemBudgetRow)
            End Get
        End Property
        
        Public Event ItemBudgetRowChanged As ItemBudgetRowChangeEventHandler
        
        Public Event ItemBudgetRowChanging As ItemBudgetRowChangeEventHandler
        
        Public Event ItemBudgetRowDeleted As ItemBudgetRowChangeEventHandler
        
        Public Event ItemBudgetRowDeleting As ItemBudgetRowChangeEventHandler
        
        Public Overloads Sub AddItemBudgetRow(ByVal row As ItemBudgetRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddItemBudgetRow(ByVal Division As String, ByVal Start_Date As Date, ByVal End_Date As Date, ByVal Qty As Decimal, ByVal Amount As Decimal, ByVal Rownumber As Integer, ByVal CreateDate As Date, ByVal UpdateDate As Date) As ItemBudgetRow
            Dim rowItemBudgetRow As ItemBudgetRow = CType(Me.NewRow,ItemBudgetRow)
            rowItemBudgetRow.ItemArray = New Object() {Division, Start_Date, End_Date, Qty, Amount, Rownumber, CreateDate, UpdateDate}
            Me.Rows.Add(rowItemBudgetRow)
            Return rowItemBudgetRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ItemBudgetDataTable = CType(MyBase.Clone,ItemBudgetDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ItemBudgetDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnDivision = Me.Columns("Division")
            Me.columnStart_Date = Me.Columns("Start_Date")
            Me.columnEnd_Date = Me.Columns("End_Date")
            Me.columnQty = Me.Columns("Qty")
            Me.columnAmount = Me.Columns("Amount")
            Me.columnRownumber = Me.Columns("Rownumber")
            Me.columnCreateDate = Me.Columns("CreateDate")
            Me.columnUpdateDate = Me.Columns("UpdateDate")
        End Sub
        
        Private Sub InitClass()
            Me.columnDivision = New DataColumn("Division", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDivision)
            Me.columnStart_Date = New DataColumn("Start_Date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStart_Date)
            Me.columnEnd_Date = New DataColumn("End_Date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEnd_Date)
            Me.columnQty = New DataColumn("Qty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQty)
            Me.columnAmount = New DataColumn("Amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAmount)
            Me.columnRownumber = New DataColumn("Rownumber", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRownumber)
            Me.columnCreateDate = New DataColumn("CreateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreateDate)
            Me.columnUpdateDate = New DataColumn("UpdateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUpdateDate)
        End Sub
        
        Public Function NewItemBudgetRow() As ItemBudgetRow
            Return CType(Me.NewRow,ItemBudgetRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ItemBudgetRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ItemBudgetRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ItemBudgetRowChangedEvent) Is Nothing) Then
                RaiseEvent ItemBudgetRowChanged(Me, New ItemBudgetRowChangeEvent(CType(e.Row,ItemBudgetRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ItemBudgetRowChangingEvent) Is Nothing) Then
                RaiseEvent ItemBudgetRowChanging(Me, New ItemBudgetRowChangeEvent(CType(e.Row,ItemBudgetRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ItemBudgetRowDeletedEvent) Is Nothing) Then
                RaiseEvent ItemBudgetRowDeleted(Me, New ItemBudgetRowChangeEvent(CType(e.Row,ItemBudgetRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ItemBudgetRowDeletingEvent) Is Nothing) Then
                RaiseEvent ItemBudgetRowDeleting(Me, New ItemBudgetRowChangeEvent(CType(e.Row,ItemBudgetRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveItemBudgetRow(ByVal row As ItemBudgetRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ItemBudgetRow
        Inherits DataRow
        
        Private tableItemBudget As ItemBudgetDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableItemBudget = CType(Me.Table,ItemBudgetDataTable)
        End Sub
        
        Public Property Division As String
            Get
                Try 
                    Return CType(Me(Me.tableItemBudget.DivisionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemBudget.DivisionColumn) = value
            End Set
        End Property
        
        Public Property Start_Date As Date
            Get
                Try 
                    Return CType(Me(Me.tableItemBudget.Start_DateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemBudget.Start_DateColumn) = value
            End Set
        End Property
        
        Public Property End_Date As Date
            Get
                Try 
                    Return CType(Me(Me.tableItemBudget.End_DateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemBudget.End_DateColumn) = value
            End Set
        End Property
        
        Public Property Qty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableItemBudget.QtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemBudget.QtyColumn) = value
            End Set
        End Property
        
        Public Property Amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableItemBudget.AmountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemBudget.AmountColumn) = value
            End Set
        End Property
        
        Public Property Rownumber As Integer
            Get
                Try 
                    Return CType(Me(Me.tableItemBudget.RownumberColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemBudget.RownumberColumn) = value
            End Set
        End Property
        
        Public Property CreateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableItemBudget.CreateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemBudget.CreateDateColumn) = value
            End Set
        End Property
        
        Public Property UpdateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableItemBudget.UpdateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemBudget.UpdateDateColumn) = value
            End Set
        End Property
        
        Public Function IsDivisionNull() As Boolean
            Return Me.IsNull(Me.tableItemBudget.DivisionColumn)
        End Function
        
        Public Sub SetDivisionNull()
            Me(Me.tableItemBudget.DivisionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStart_DateNull() As Boolean
            Return Me.IsNull(Me.tableItemBudget.Start_DateColumn)
        End Function
        
        Public Sub SetStart_DateNull()
            Me(Me.tableItemBudget.Start_DateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEnd_DateNull() As Boolean
            Return Me.IsNull(Me.tableItemBudget.End_DateColumn)
        End Function
        
        Public Sub SetEnd_DateNull()
            Me(Me.tableItemBudget.End_DateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQtyNull() As Boolean
            Return Me.IsNull(Me.tableItemBudget.QtyColumn)
        End Function
        
        Public Sub SetQtyNull()
            Me(Me.tableItemBudget.QtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAmountNull() As Boolean
            Return Me.IsNull(Me.tableItemBudget.AmountColumn)
        End Function
        
        Public Sub SetAmountNull()
            Me(Me.tableItemBudget.AmountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRownumberNull() As Boolean
            Return Me.IsNull(Me.tableItemBudget.RownumberColumn)
        End Function
        
        Public Sub SetRownumberNull()
            Me(Me.tableItemBudget.RownumberColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreateDateNull() As Boolean
            Return Me.IsNull(Me.tableItemBudget.CreateDateColumn)
        End Function
        
        Public Sub SetCreateDateNull()
            Me(Me.tableItemBudget.CreateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUpdateDateNull() As Boolean
            Return Me.IsNull(Me.tableItemBudget.UpdateDateColumn)
        End Function
        
        Public Sub SetUpdateDateNull()
            Me(Me.tableItemBudget.UpdateDateColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ItemBudgetRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ItemBudgetRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ItemBudgetRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ItemBudgetRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Sup_Div_ShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnRowid As DataColumn
        
        Private columnDivCode As DataColumn
        
        Private columnDivision As DataColumn
        
        Private columnCreateDate As DataColumn
        
        Private columnUpdateDate As DataColumn
        
        Private columnStartDate As DataColumn
        
        Private columnEndDate As DataColumn
        
        Private columnLastUser As DataColumn
        
        Friend Sub New()
            MyBase.New("Sup_Div_Show")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property RowidColumn As DataColumn
            Get
                Return Me.columnRowid
            End Get
        End Property
        
        Friend ReadOnly Property DivCodeColumn As DataColumn
            Get
                Return Me.columnDivCode
            End Get
        End Property
        
        Friend ReadOnly Property DivisionColumn As DataColumn
            Get
                Return Me.columnDivision
            End Get
        End Property
        
        Friend ReadOnly Property CreateDateColumn As DataColumn
            Get
                Return Me.columnCreateDate
            End Get
        End Property
        
        Friend ReadOnly Property UpdateDateColumn As DataColumn
            Get
                Return Me.columnUpdateDate
            End Get
        End Property
        
        Friend ReadOnly Property StartDateColumn As DataColumn
            Get
                Return Me.columnStartDate
            End Get
        End Property
        
        Friend ReadOnly Property EndDateColumn As DataColumn
            Get
                Return Me.columnEndDate
            End Get
        End Property
        
        Friend ReadOnly Property LastUserColumn As DataColumn
            Get
                Return Me.columnLastUser
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Sup_Div_ShowRow
            Get
                Return CType(Me.Rows(index),Sup_Div_ShowRow)
            End Get
        End Property
        
        Public Event Sup_Div_ShowRowChanged As Sup_Div_ShowRowChangeEventHandler
        
        Public Event Sup_Div_ShowRowChanging As Sup_Div_ShowRowChangeEventHandler
        
        Public Event Sup_Div_ShowRowDeleted As Sup_Div_ShowRowChangeEventHandler
        
        Public Event Sup_Div_ShowRowDeleting As Sup_Div_ShowRowChangeEventHandler
        
        Public Overloads Sub AddSup_Div_ShowRow(ByVal row As Sup_Div_ShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSup_Div_ShowRow(ByVal Rowid As Integer, ByVal DivCode As String, ByVal Division As String, ByVal CreateDate As Date, ByVal UpdateDate As Date, ByVal StartDate As Date, ByVal EndDate As Date, ByVal LastUser As String) As Sup_Div_ShowRow
            Dim rowSup_Div_ShowRow As Sup_Div_ShowRow = CType(Me.NewRow,Sup_Div_ShowRow)
            rowSup_Div_ShowRow.ItemArray = New Object() {Rowid, DivCode, Division, CreateDate, UpdateDate, StartDate, EndDate, LastUser}
            Me.Rows.Add(rowSup_Div_ShowRow)
            Return rowSup_Div_ShowRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Sup_Div_ShowDataTable = CType(MyBase.Clone,Sup_Div_ShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Sup_Div_ShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnRowid = Me.Columns("Rowid")
            Me.columnDivCode = Me.Columns("DivCode")
            Me.columnDivision = Me.Columns("Division")
            Me.columnCreateDate = Me.Columns("CreateDate")
            Me.columnUpdateDate = Me.Columns("UpdateDate")
            Me.columnStartDate = Me.Columns("StartDate")
            Me.columnEndDate = Me.Columns("EndDate")
            Me.columnLastUser = Me.Columns("LastUser")
        End Sub
        
        Private Sub InitClass()
            Me.columnRowid = New DataColumn("Rowid", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRowid)
            Me.columnDivCode = New DataColumn("DivCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDivCode)
            Me.columnDivision = New DataColumn("Division", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDivision)
            Me.columnCreateDate = New DataColumn("CreateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreateDate)
            Me.columnUpdateDate = New DataColumn("UpdateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUpdateDate)
            Me.columnStartDate = New DataColumn("StartDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStartDate)
            Me.columnEndDate = New DataColumn("EndDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEndDate)
            Me.columnLastUser = New DataColumn("LastUser", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLastUser)
        End Sub
        
        Public Function NewSup_Div_ShowRow() As Sup_Div_ShowRow
            Return CType(Me.NewRow,Sup_Div_ShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Sup_Div_ShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Sup_Div_ShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Sup_Div_ShowRowChangedEvent) Is Nothing) Then
                RaiseEvent Sup_Div_ShowRowChanged(Me, New Sup_Div_ShowRowChangeEvent(CType(e.Row,Sup_Div_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Sup_Div_ShowRowChangingEvent) Is Nothing) Then
                RaiseEvent Sup_Div_ShowRowChanging(Me, New Sup_Div_ShowRowChangeEvent(CType(e.Row,Sup_Div_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Sup_Div_ShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent Sup_Div_ShowRowDeleted(Me, New Sup_Div_ShowRowChangeEvent(CType(e.Row,Sup_Div_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Sup_Div_ShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent Sup_Div_ShowRowDeleting(Me, New Sup_Div_ShowRowChangeEvent(CType(e.Row,Sup_Div_ShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSup_Div_ShowRow(ByVal row As Sup_Div_ShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Sup_Div_ShowRow
        Inherits DataRow
        
        Private tableSup_Div_Show As Sup_Div_ShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSup_Div_Show = CType(Me.Table,Sup_Div_ShowDataTable)
        End Sub
        
        Public Property Rowid As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSup_Div_Show.RowidColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSup_Div_Show.RowidColumn) = value
            End Set
        End Property
        
        Public Property DivCode As String
            Get
                Try 
                    Return CType(Me(Me.tableSup_Div_Show.DivCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSup_Div_Show.DivCodeColumn) = value
            End Set
        End Property
        
        Public Property Division As String
            Get
                Try 
                    Return CType(Me(Me.tableSup_Div_Show.DivisionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSup_Div_Show.DivisionColumn) = value
            End Set
        End Property
        
        Public Property CreateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableSup_Div_Show.CreateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSup_Div_Show.CreateDateColumn) = value
            End Set
        End Property
        
        Public Property UpdateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableSup_Div_Show.UpdateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSup_Div_Show.UpdateDateColumn) = value
            End Set
        End Property
        
        Public Property StartDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableSup_Div_Show.StartDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSup_Div_Show.StartDateColumn) = value
            End Set
        End Property
        
        Public Property EndDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableSup_Div_Show.EndDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSup_Div_Show.EndDateColumn) = value
            End Set
        End Property
        
        Public Property LastUser As String
            Get
                Try 
                    Return CType(Me(Me.tableSup_Div_Show.LastUserColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSup_Div_Show.LastUserColumn) = value
            End Set
        End Property
        
        Public Function IsRowidNull() As Boolean
            Return Me.IsNull(Me.tableSup_Div_Show.RowidColumn)
        End Function
        
        Public Sub SetRowidNull()
            Me(Me.tableSup_Div_Show.RowidColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDivCodeNull() As Boolean
            Return Me.IsNull(Me.tableSup_Div_Show.DivCodeColumn)
        End Function
        
        Public Sub SetDivCodeNull()
            Me(Me.tableSup_Div_Show.DivCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDivisionNull() As Boolean
            Return Me.IsNull(Me.tableSup_Div_Show.DivisionColumn)
        End Function
        
        Public Sub SetDivisionNull()
            Me(Me.tableSup_Div_Show.DivisionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreateDateNull() As Boolean
            Return Me.IsNull(Me.tableSup_Div_Show.CreateDateColumn)
        End Function
        
        Public Sub SetCreateDateNull()
            Me(Me.tableSup_Div_Show.CreateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUpdateDateNull() As Boolean
            Return Me.IsNull(Me.tableSup_Div_Show.UpdateDateColumn)
        End Function
        
        Public Sub SetUpdateDateNull()
            Me(Me.tableSup_Div_Show.UpdateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStartDateNull() As Boolean
            Return Me.IsNull(Me.tableSup_Div_Show.StartDateColumn)
        End Function
        
        Public Sub SetStartDateNull()
            Me(Me.tableSup_Div_Show.StartDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEndDateNull() As Boolean
            Return Me.IsNull(Me.tableSup_Div_Show.EndDateColumn)
        End Function
        
        Public Sub SetEndDateNull()
            Me(Me.tableSup_Div_Show.EndDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLastUserNull() As Boolean
            Return Me.IsNull(Me.tableSup_Div_Show.LastUserColumn)
        End Function
        
        Public Sub SetLastUserNull()
            Me(Me.tableSup_Div_Show.LastUserColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Sup_Div_ShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Sup_Div_ShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Sup_Div_ShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Sup_Div_ShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Sup_NSM_ShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnRowid As DataColumn
        
        Private columnNsmCode As DataColumn
        
        Private columnNsmName As DataColumn
        
        Private columnCreateDate As DataColumn
        
        Private columnUpdateDate As DataColumn
        
        Private columnStartDate As DataColumn
        
        Private columnEndDate As DataColumn
        
        Private columnLastUser As DataColumn
        
        Friend Sub New()
            MyBase.New("Sup_NSM_Show")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property RowidColumn As DataColumn
            Get
                Return Me.columnRowid
            End Get
        End Property
        
        Friend ReadOnly Property NsmCodeColumn As DataColumn
            Get
                Return Me.columnNsmCode
            End Get
        End Property
        
        Friend ReadOnly Property NsmNameColumn As DataColumn
            Get
                Return Me.columnNsmName
            End Get
        End Property
        
        Friend ReadOnly Property CreateDateColumn As DataColumn
            Get
                Return Me.columnCreateDate
            End Get
        End Property
        
        Friend ReadOnly Property UpdateDateColumn As DataColumn
            Get
                Return Me.columnUpdateDate
            End Get
        End Property
        
        Friend ReadOnly Property StartDateColumn As DataColumn
            Get
                Return Me.columnStartDate
            End Get
        End Property
        
        Friend ReadOnly Property EndDateColumn As DataColumn
            Get
                Return Me.columnEndDate
            End Get
        End Property
        
        Friend ReadOnly Property LastUserColumn As DataColumn
            Get
                Return Me.columnLastUser
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Sup_NSM_ShowRow
            Get
                Return CType(Me.Rows(index),Sup_NSM_ShowRow)
            End Get
        End Property
        
        Public Event Sup_NSM_ShowRowChanged As Sup_NSM_ShowRowChangeEventHandler
        
        Public Event Sup_NSM_ShowRowChanging As Sup_NSM_ShowRowChangeEventHandler
        
        Public Event Sup_NSM_ShowRowDeleted As Sup_NSM_ShowRowChangeEventHandler
        
        Public Event Sup_NSM_ShowRowDeleting As Sup_NSM_ShowRowChangeEventHandler
        
        Public Overloads Sub AddSup_NSM_ShowRow(ByVal row As Sup_NSM_ShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSup_NSM_ShowRow(ByVal Rowid As Integer, ByVal NsmCode As String, ByVal NsmName As String, ByVal CreateDate As Date, ByVal UpdateDate As Date, ByVal StartDate As Date, ByVal EndDate As Date, ByVal LastUser As String) As Sup_NSM_ShowRow
            Dim rowSup_NSM_ShowRow As Sup_NSM_ShowRow = CType(Me.NewRow,Sup_NSM_ShowRow)
            rowSup_NSM_ShowRow.ItemArray = New Object() {Rowid, NsmCode, NsmName, CreateDate, UpdateDate, StartDate, EndDate, LastUser}
            Me.Rows.Add(rowSup_NSM_ShowRow)
            Return rowSup_NSM_ShowRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Sup_NSM_ShowDataTable = CType(MyBase.Clone,Sup_NSM_ShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Sup_NSM_ShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnRowid = Me.Columns("Rowid")
            Me.columnNsmCode = Me.Columns("NsmCode")
            Me.columnNsmName = Me.Columns("NsmName")
            Me.columnCreateDate = Me.Columns("CreateDate")
            Me.columnUpdateDate = Me.Columns("UpdateDate")
            Me.columnStartDate = Me.Columns("StartDate")
            Me.columnEndDate = Me.Columns("EndDate")
            Me.columnLastUser = Me.Columns("LastUser")
        End Sub
        
        Private Sub InitClass()
            Me.columnRowid = New DataColumn("Rowid", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRowid)
            Me.columnNsmCode = New DataColumn("NsmCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNsmCode)
            Me.columnNsmName = New DataColumn("NsmName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNsmName)
            Me.columnCreateDate = New DataColumn("CreateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreateDate)
            Me.columnUpdateDate = New DataColumn("UpdateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUpdateDate)
            Me.columnStartDate = New DataColumn("StartDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStartDate)
            Me.columnEndDate = New DataColumn("EndDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEndDate)
            Me.columnLastUser = New DataColumn("LastUser", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLastUser)
        End Sub
        
        Public Function NewSup_NSM_ShowRow() As Sup_NSM_ShowRow
            Return CType(Me.NewRow,Sup_NSM_ShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Sup_NSM_ShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Sup_NSM_ShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Sup_NSM_ShowRowChangedEvent) Is Nothing) Then
                RaiseEvent Sup_NSM_ShowRowChanged(Me, New Sup_NSM_ShowRowChangeEvent(CType(e.Row,Sup_NSM_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Sup_NSM_ShowRowChangingEvent) Is Nothing) Then
                RaiseEvent Sup_NSM_ShowRowChanging(Me, New Sup_NSM_ShowRowChangeEvent(CType(e.Row,Sup_NSM_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Sup_NSM_ShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent Sup_NSM_ShowRowDeleted(Me, New Sup_NSM_ShowRowChangeEvent(CType(e.Row,Sup_NSM_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Sup_NSM_ShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent Sup_NSM_ShowRowDeleting(Me, New Sup_NSM_ShowRowChangeEvent(CType(e.Row,Sup_NSM_ShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSup_NSM_ShowRow(ByVal row As Sup_NSM_ShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Sup_NSM_ShowRow
        Inherits DataRow
        
        Private tableSup_NSM_Show As Sup_NSM_ShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSup_NSM_Show = CType(Me.Table,Sup_NSM_ShowDataTable)
        End Sub
        
        Public Property Rowid As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSup_NSM_Show.RowidColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSup_NSM_Show.RowidColumn) = value
            End Set
        End Property
        
        Public Property NsmCode As String
            Get
                Try 
                    Return CType(Me(Me.tableSup_NSM_Show.NsmCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSup_NSM_Show.NsmCodeColumn) = value
            End Set
        End Property
        
        Public Property NsmName As String
            Get
                Try 
                    Return CType(Me(Me.tableSup_NSM_Show.NsmNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSup_NSM_Show.NsmNameColumn) = value
            End Set
        End Property
        
        Public Property CreateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableSup_NSM_Show.CreateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSup_NSM_Show.CreateDateColumn) = value
            End Set
        End Property
        
        Public Property UpdateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableSup_NSM_Show.UpdateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSup_NSM_Show.UpdateDateColumn) = value
            End Set
        End Property
        
        Public Property StartDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableSup_NSM_Show.StartDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSup_NSM_Show.StartDateColumn) = value
            End Set
        End Property
        
        Public Property EndDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableSup_NSM_Show.EndDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSup_NSM_Show.EndDateColumn) = value
            End Set
        End Property
        
        Public Property LastUser As String
            Get
                Try 
                    Return CType(Me(Me.tableSup_NSM_Show.LastUserColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSup_NSM_Show.LastUserColumn) = value
            End Set
        End Property
        
        Public Function IsRowidNull() As Boolean
            Return Me.IsNull(Me.tableSup_NSM_Show.RowidColumn)
        End Function
        
        Public Sub SetRowidNull()
            Me(Me.tableSup_NSM_Show.RowidColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNsmCodeNull() As Boolean
            Return Me.IsNull(Me.tableSup_NSM_Show.NsmCodeColumn)
        End Function
        
        Public Sub SetNsmCodeNull()
            Me(Me.tableSup_NSM_Show.NsmCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNsmNameNull() As Boolean
            Return Me.IsNull(Me.tableSup_NSM_Show.NsmNameColumn)
        End Function
        
        Public Sub SetNsmNameNull()
            Me(Me.tableSup_NSM_Show.NsmNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreateDateNull() As Boolean
            Return Me.IsNull(Me.tableSup_NSM_Show.CreateDateColumn)
        End Function
        
        Public Sub SetCreateDateNull()
            Me(Me.tableSup_NSM_Show.CreateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUpdateDateNull() As Boolean
            Return Me.IsNull(Me.tableSup_NSM_Show.UpdateDateColumn)
        End Function
        
        Public Sub SetUpdateDateNull()
            Me(Me.tableSup_NSM_Show.UpdateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStartDateNull() As Boolean
            Return Me.IsNull(Me.tableSup_NSM_Show.StartDateColumn)
        End Function
        
        Public Sub SetStartDateNull()
            Me(Me.tableSup_NSM_Show.StartDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEndDateNull() As Boolean
            Return Me.IsNull(Me.tableSup_NSM_Show.EndDateColumn)
        End Function
        
        Public Sub SetEndDateNull()
            Me(Me.tableSup_NSM_Show.EndDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLastUserNull() As Boolean
            Return Me.IsNull(Me.tableSup_NSM_Show.LastUserColumn)
        End Function
        
        Public Sub SetLastUserNull()
            Me(Me.tableSup_NSM_Show.LastUserColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Sup_NSM_ShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Sup_NSM_ShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Sup_NSM_ShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Sup_NSM_ShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NSM_ComboDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnNSMcode As DataColumn
        
        Friend Sub New()
            MyBase.New("NSM_Combo")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property NSMcodeColumn As DataColumn
            Get
                Return Me.columnNSMcode
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As NSM_ComboRow
            Get
                Return CType(Me.Rows(index),NSM_ComboRow)
            End Get
        End Property
        
        Public Event NSM_ComboRowChanged As NSM_ComboRowChangeEventHandler
        
        Public Event NSM_ComboRowChanging As NSM_ComboRowChangeEventHandler
        
        Public Event NSM_ComboRowDeleted As NSM_ComboRowChangeEventHandler
        
        Public Event NSM_ComboRowDeleting As NSM_ComboRowChangeEventHandler
        
        Public Overloads Sub AddNSM_ComboRow(ByVal row As NSM_ComboRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddNSM_ComboRow(ByVal NSMcode As String) As NSM_ComboRow
            Dim rowNSM_ComboRow As NSM_ComboRow = CType(Me.NewRow,NSM_ComboRow)
            rowNSM_ComboRow.ItemArray = New Object() {NSMcode}
            Me.Rows.Add(rowNSM_ComboRow)
            Return rowNSM_ComboRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As NSM_ComboDataTable = CType(MyBase.Clone,NSM_ComboDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New NSM_ComboDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnNSMcode = Me.Columns("NSMcode")
        End Sub
        
        Private Sub InitClass()
            Me.columnNSMcode = New DataColumn("NSMcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNSMcode)
            Me.columnNSMcode.ReadOnly = true
        End Sub
        
        Public Function NewNSM_ComboRow() As NSM_ComboRow
            Return CType(Me.NewRow,NSM_ComboRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New NSM_ComboRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(NSM_ComboRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NSM_ComboRowChangedEvent) Is Nothing) Then
                RaiseEvent NSM_ComboRowChanged(Me, New NSM_ComboRowChangeEvent(CType(e.Row,NSM_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NSM_ComboRowChangingEvent) Is Nothing) Then
                RaiseEvent NSM_ComboRowChanging(Me, New NSM_ComboRowChangeEvent(CType(e.Row,NSM_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NSM_ComboRowDeletedEvent) Is Nothing) Then
                RaiseEvent NSM_ComboRowDeleted(Me, New NSM_ComboRowChangeEvent(CType(e.Row,NSM_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NSM_ComboRowDeletingEvent) Is Nothing) Then
                RaiseEvent NSM_ComboRowDeleting(Me, New NSM_ComboRowChangeEvent(CType(e.Row,NSM_ComboRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveNSM_ComboRow(ByVal row As NSM_ComboRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NSM_ComboRow
        Inherits DataRow
        
        Private tableNSM_Combo As NSM_ComboDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableNSM_Combo = CType(Me.Table,NSM_ComboDataTable)
        End Sub
        
        Public Property NSMcode As String
            Get
                Try 
                    Return CType(Me(Me.tableNSM_Combo.NSMcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNSM_Combo.NSMcodeColumn) = value
            End Set
        End Property
        
        Public Function IsNSMcodeNull() As Boolean
            Return Me.IsNull(Me.tableNSM_Combo.NSMcodeColumn)
        End Function
        
        Public Sub SetNSMcodeNull()
            Me(Me.tableNSM_Combo.NSMcodeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NSM_ComboRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As NSM_ComboRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As NSM_ComboRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As NSM_ComboRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Div_ComboDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnDivision As DataColumn
        
        Friend Sub New()
            MyBase.New("Div_Combo")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property DivisionColumn As DataColumn
            Get
                Return Me.columnDivision
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Div_ComboRow
            Get
                Return CType(Me.Rows(index),Div_ComboRow)
            End Get
        End Property
        
        Public Event Div_ComboRowChanged As Div_ComboRowChangeEventHandler
        
        Public Event Div_ComboRowChanging As Div_ComboRowChangeEventHandler
        
        Public Event Div_ComboRowDeleted As Div_ComboRowChangeEventHandler
        
        Public Event Div_ComboRowDeleting As Div_ComboRowChangeEventHandler
        
        Public Overloads Sub AddDiv_ComboRow(ByVal row As Div_ComboRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDiv_ComboRow(ByVal Division As String) As Div_ComboRow
            Dim rowDiv_ComboRow As Div_ComboRow = CType(Me.NewRow,Div_ComboRow)
            rowDiv_ComboRow.ItemArray = New Object() {Division}
            Me.Rows.Add(rowDiv_ComboRow)
            Return rowDiv_ComboRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Div_ComboDataTable = CType(MyBase.Clone,Div_ComboDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Div_ComboDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnDivision = Me.Columns("Division")
        End Sub
        
        Private Sub InitClass()
            Me.columnDivision = New DataColumn("Division", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDivision)
            Me.columnDivision.ReadOnly = true
        End Sub
        
        Public Function NewDiv_ComboRow() As Div_ComboRow
            Return CType(Me.NewRow,Div_ComboRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Div_ComboRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Div_ComboRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Div_ComboRowChangedEvent) Is Nothing) Then
                RaiseEvent Div_ComboRowChanged(Me, New Div_ComboRowChangeEvent(CType(e.Row,Div_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Div_ComboRowChangingEvent) Is Nothing) Then
                RaiseEvent Div_ComboRowChanging(Me, New Div_ComboRowChangeEvent(CType(e.Row,Div_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Div_ComboRowDeletedEvent) Is Nothing) Then
                RaiseEvent Div_ComboRowDeleted(Me, New Div_ComboRowChangeEvent(CType(e.Row,Div_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Div_ComboRowDeletingEvent) Is Nothing) Then
                RaiseEvent Div_ComboRowDeleting(Me, New Div_ComboRowChangeEvent(CType(e.Row,Div_ComboRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDiv_ComboRow(ByVal row As Div_ComboRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Div_ComboRow
        Inherits DataRow
        
        Private tableDiv_Combo As Div_ComboDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDiv_Combo = CType(Me.Table,Div_ComboDataTable)
        End Sub
        
        Public Property Division As String
            Get
                Try 
                    Return CType(Me(Me.tableDiv_Combo.DivisionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDiv_Combo.DivisionColumn) = value
            End Set
        End Property
        
        Public Function IsDivisionNull() As Boolean
            Return Me.IsNull(Me.tableDiv_Combo.DivisionColumn)
        End Function
        
        Public Sub SetDivisionNull()
            Me(Me.tableDiv_Combo.DivisionColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Div_ComboRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Div_ComboRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Div_ComboRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Div_ComboRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DivSubGrp_ShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnRowid As DataColumn
        
        Private columnSubCode As DataColumn
        
        Private columnDivSubGrp As DataColumn
        
        Friend Sub New()
            MyBase.New("DivSubGrp_Show")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property RowidColumn As DataColumn
            Get
                Return Me.columnRowid
            End Get
        End Property
        
        Friend ReadOnly Property SubCodeColumn As DataColumn
            Get
                Return Me.columnSubCode
            End Get
        End Property
        
        Friend ReadOnly Property DivSubGrpColumn As DataColumn
            Get
                Return Me.columnDivSubGrp
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As DivSubGrp_ShowRow
            Get
                Return CType(Me.Rows(index),DivSubGrp_ShowRow)
            End Get
        End Property
        
        Public Event DivSubGrp_ShowRowChanged As DivSubGrp_ShowRowChangeEventHandler
        
        Public Event DivSubGrp_ShowRowChanging As DivSubGrp_ShowRowChangeEventHandler
        
        Public Event DivSubGrp_ShowRowDeleted As DivSubGrp_ShowRowChangeEventHandler
        
        Public Event DivSubGrp_ShowRowDeleting As DivSubGrp_ShowRowChangeEventHandler
        
        Public Overloads Sub AddDivSubGrp_ShowRow(ByVal row As DivSubGrp_ShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDivSubGrp_ShowRow(ByVal Rowid As Integer, ByVal SubCode As String, ByVal DivSubGrp As String) As DivSubGrp_ShowRow
            Dim rowDivSubGrp_ShowRow As DivSubGrp_ShowRow = CType(Me.NewRow,DivSubGrp_ShowRow)
            rowDivSubGrp_ShowRow.ItemArray = New Object() {Rowid, SubCode, DivSubGrp}
            Me.Rows.Add(rowDivSubGrp_ShowRow)
            Return rowDivSubGrp_ShowRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As DivSubGrp_ShowDataTable = CType(MyBase.Clone,DivSubGrp_ShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New DivSubGrp_ShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnRowid = Me.Columns("Rowid")
            Me.columnSubCode = Me.Columns("SubCode")
            Me.columnDivSubGrp = Me.Columns("DivSubGrp")
        End Sub
        
        Private Sub InitClass()
            Me.columnRowid = New DataColumn("Rowid", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRowid)
            Me.columnSubCode = New DataColumn("SubCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSubCode)
            Me.columnDivSubGrp = New DataColumn("DivSubGrp", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDivSubGrp)
        End Sub
        
        Public Function NewDivSubGrp_ShowRow() As DivSubGrp_ShowRow
            Return CType(Me.NewRow,DivSubGrp_ShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New DivSubGrp_ShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DivSubGrp_ShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DivSubGrp_ShowRowChangedEvent) Is Nothing) Then
                RaiseEvent DivSubGrp_ShowRowChanged(Me, New DivSubGrp_ShowRowChangeEvent(CType(e.Row,DivSubGrp_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DivSubGrp_ShowRowChangingEvent) Is Nothing) Then
                RaiseEvent DivSubGrp_ShowRowChanging(Me, New DivSubGrp_ShowRowChangeEvent(CType(e.Row,DivSubGrp_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DivSubGrp_ShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent DivSubGrp_ShowRowDeleted(Me, New DivSubGrp_ShowRowChangeEvent(CType(e.Row,DivSubGrp_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DivSubGrp_ShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent DivSubGrp_ShowRowDeleting(Me, New DivSubGrp_ShowRowChangeEvent(CType(e.Row,DivSubGrp_ShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDivSubGrp_ShowRow(ByVal row As DivSubGrp_ShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DivSubGrp_ShowRow
        Inherits DataRow
        
        Private tableDivSubGrp_Show As DivSubGrp_ShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDivSubGrp_Show = CType(Me.Table,DivSubGrp_ShowDataTable)
        End Sub
        
        Public Property Rowid As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDivSubGrp_Show.RowidColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDivSubGrp_Show.RowidColumn) = value
            End Set
        End Property
        
        Public Property SubCode As String
            Get
                Try 
                    Return CType(Me(Me.tableDivSubGrp_Show.SubCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDivSubGrp_Show.SubCodeColumn) = value
            End Set
        End Property
        
        Public Property DivSubGrp As String
            Get
                Try 
                    Return CType(Me(Me.tableDivSubGrp_Show.DivSubGrpColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDivSubGrp_Show.DivSubGrpColumn) = value
            End Set
        End Property
        
        Public Function IsRowidNull() As Boolean
            Return Me.IsNull(Me.tableDivSubGrp_Show.RowidColumn)
        End Function
        
        Public Sub SetRowidNull()
            Me(Me.tableDivSubGrp_Show.RowidColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSubCodeNull() As Boolean
            Return Me.IsNull(Me.tableDivSubGrp_Show.SubCodeColumn)
        End Function
        
        Public Sub SetSubCodeNull()
            Me(Me.tableDivSubGrp_Show.SubCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDivSubGrpNull() As Boolean
            Return Me.IsNull(Me.tableDivSubGrp_Show.DivSubGrpColumn)
        End Function
        
        Public Sub SetDivSubGrpNull()
            Me(Me.tableDivSubGrp_Show.DivSubGrpColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DivSubGrp_ShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As DivSubGrp_ShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As DivSubGrp_ShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As DivSubGrp_ShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DivSubGrp_ComboDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSubGrp As DataColumn
        
        Friend Sub New()
            MyBase.New("DivSubGrp_Combo")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SubGrpColumn As DataColumn
            Get
                Return Me.columnSubGrp
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As DivSubGrp_ComboRow
            Get
                Return CType(Me.Rows(index),DivSubGrp_ComboRow)
            End Get
        End Property
        
        Public Event DivSubGrp_ComboRowChanged As DivSubGrp_ComboRowChangeEventHandler
        
        Public Event DivSubGrp_ComboRowChanging As DivSubGrp_ComboRowChangeEventHandler
        
        Public Event DivSubGrp_ComboRowDeleted As DivSubGrp_ComboRowChangeEventHandler
        
        Public Event DivSubGrp_ComboRowDeleting As DivSubGrp_ComboRowChangeEventHandler
        
        Public Overloads Sub AddDivSubGrp_ComboRow(ByVal row As DivSubGrp_ComboRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDivSubGrp_ComboRow(ByVal SubGrp As String) As DivSubGrp_ComboRow
            Dim rowDivSubGrp_ComboRow As DivSubGrp_ComboRow = CType(Me.NewRow,DivSubGrp_ComboRow)
            rowDivSubGrp_ComboRow.ItemArray = New Object() {SubGrp}
            Me.Rows.Add(rowDivSubGrp_ComboRow)
            Return rowDivSubGrp_ComboRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As DivSubGrp_ComboDataTable = CType(MyBase.Clone,DivSubGrp_ComboDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New DivSubGrp_ComboDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSubGrp = Me.Columns("SubGrp")
        End Sub
        
        Private Sub InitClass()
            Me.columnSubGrp = New DataColumn("SubGrp", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSubGrp)
        End Sub
        
        Public Function NewDivSubGrp_ComboRow() As DivSubGrp_ComboRow
            Return CType(Me.NewRow,DivSubGrp_ComboRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New DivSubGrp_ComboRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DivSubGrp_ComboRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DivSubGrp_ComboRowChangedEvent) Is Nothing) Then
                RaiseEvent DivSubGrp_ComboRowChanged(Me, New DivSubGrp_ComboRowChangeEvent(CType(e.Row,DivSubGrp_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DivSubGrp_ComboRowChangingEvent) Is Nothing) Then
                RaiseEvent DivSubGrp_ComboRowChanging(Me, New DivSubGrp_ComboRowChangeEvent(CType(e.Row,DivSubGrp_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DivSubGrp_ComboRowDeletedEvent) Is Nothing) Then
                RaiseEvent DivSubGrp_ComboRowDeleted(Me, New DivSubGrp_ComboRowChangeEvent(CType(e.Row,DivSubGrp_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DivSubGrp_ComboRowDeletingEvent) Is Nothing) Then
                RaiseEvent DivSubGrp_ComboRowDeleting(Me, New DivSubGrp_ComboRowChangeEvent(CType(e.Row,DivSubGrp_ComboRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDivSubGrp_ComboRow(ByVal row As DivSubGrp_ComboRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DivSubGrp_ComboRow
        Inherits DataRow
        
        Private tableDivSubGrp_Combo As DivSubGrp_ComboDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDivSubGrp_Combo = CType(Me.Table,DivSubGrp_ComboDataTable)
        End Sub
        
        Public Property SubGrp As String
            Get
                Try 
                    Return CType(Me(Me.tableDivSubGrp_Combo.SubGrpColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDivSubGrp_Combo.SubGrpColumn) = value
            End Set
        End Property
        
        Public Function IsSubGrpNull() As Boolean
            Return Me.IsNull(Me.tableDivSubGrp_Combo.SubGrpColumn)
        End Function
        
        Public Sub SetSubGrpNull()
            Me(Me.tableDivSubGrp_Combo.SubGrpColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DivSubGrp_ComboRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As DivSubGrp_ComboRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As DivSubGrp_ComboRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As DivSubGrp_ComboRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class IsCT_ShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnrowid As DataColumn
        
        Private columnCustomer As DataColumn
        
        Private columnAddress1 As DataColumn
        
        Private columnAddress2 As DataColumn
        
        Private columnTerritoryDesc As DataColumn
        
        Private columnProvince As DataColumn
        
        Private columnGroup As DataColumn
        
        Private columnrefcode As DataColumn
        
        Private columnrefdate As DataColumn
        
        Private column_Item As DataColumn
        
        Private columnPrincipal As DataColumn
        
        Private columnDivision As DataColumn
        
        Private columnqtysold As DataColumn
        
        Private columnqtyfree As DataColumn
        
        Private columnunitprice As DataColumn
        
        Private columnamountsold As DataColumn
        
        Private columncreditedamount As DataColumn
        
        Private columncommissiondate As DataColumn
        
        Private columnMedrep As DataColumn
        
        Private columnSupervisor As DataColumn
        
        Private columnNsm As DataColumn
        
        Private columnoutofstock As DataColumn
        
        Private columnsaletype As DataColumn
        
        Private columnsubsaletype As DataColumn
        
        Private columnsubsubsaletype As DataColumn
        
        Private columnsalesclass As DataColumn
        
        Private columncreatedate As DataColumn
        
        Private columnupdatedate As DataColumn
        
        Friend Sub New()
            MyBase.New("IsCT_Show")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property rowidColumn As DataColumn
            Get
                Return Me.columnrowid
            End Get
        End Property
        
        Friend ReadOnly Property CustomerColumn As DataColumn
            Get
                Return Me.columnCustomer
            End Get
        End Property
        
        Friend ReadOnly Property Address1Column As DataColumn
            Get
                Return Me.columnAddress1
            End Get
        End Property
        
        Friend ReadOnly Property Address2Column As DataColumn
            Get
                Return Me.columnAddress2
            End Get
        End Property
        
        Friend ReadOnly Property TerritoryDescColumn As DataColumn
            Get
                Return Me.columnTerritoryDesc
            End Get
        End Property
        
        Friend ReadOnly Property ProvinceColumn As DataColumn
            Get
                Return Me.columnProvince
            End Get
        End Property
        
        Friend ReadOnly Property GroupColumn As DataColumn
            Get
                Return Me.columnGroup
            End Get
        End Property
        
        Friend ReadOnly Property refcodeColumn As DataColumn
            Get
                Return Me.columnrefcode
            End Get
        End Property
        
        Friend ReadOnly Property refdateColumn As DataColumn
            Get
                Return Me.columnrefdate
            End Get
        End Property
        
        Friend ReadOnly Property _ItemColumn As DataColumn
            Get
                Return Me.column_Item
            End Get
        End Property
        
        Friend ReadOnly Property PrincipalColumn As DataColumn
            Get
                Return Me.columnPrincipal
            End Get
        End Property
        
        Friend ReadOnly Property DivisionColumn As DataColumn
            Get
                Return Me.columnDivision
            End Get
        End Property
        
        Friend ReadOnly Property qtysoldColumn As DataColumn
            Get
                Return Me.columnqtysold
            End Get
        End Property
        
        Friend ReadOnly Property qtyfreeColumn As DataColumn
            Get
                Return Me.columnqtyfree
            End Get
        End Property
        
        Friend ReadOnly Property unitpriceColumn As DataColumn
            Get
                Return Me.columnunitprice
            End Get
        End Property
        
        Friend ReadOnly Property amountsoldColumn As DataColumn
            Get
                Return Me.columnamountsold
            End Get
        End Property
        
        Friend ReadOnly Property creditedamountColumn As DataColumn
            Get
                Return Me.columncreditedamount
            End Get
        End Property
        
        Friend ReadOnly Property commissiondateColumn As DataColumn
            Get
                Return Me.columncommissiondate
            End Get
        End Property
        
        Friend ReadOnly Property MedrepColumn As DataColumn
            Get
                Return Me.columnMedrep
            End Get
        End Property
        
        Friend ReadOnly Property SupervisorColumn As DataColumn
            Get
                Return Me.columnSupervisor
            End Get
        End Property
        
        Friend ReadOnly Property NsmColumn As DataColumn
            Get
                Return Me.columnNsm
            End Get
        End Property
        
        Friend ReadOnly Property outofstockColumn As DataColumn
            Get
                Return Me.columnoutofstock
            End Get
        End Property
        
        Friend ReadOnly Property saletypeColumn As DataColumn
            Get
                Return Me.columnsaletype
            End Get
        End Property
        
        Friend ReadOnly Property subsaletypeColumn As DataColumn
            Get
                Return Me.columnsubsaletype
            End Get
        End Property
        
        Friend ReadOnly Property subsubsaletypeColumn As DataColumn
            Get
                Return Me.columnsubsubsaletype
            End Get
        End Property
        
        Friend ReadOnly Property salesclassColumn As DataColumn
            Get
                Return Me.columnsalesclass
            End Get
        End Property
        
        Friend ReadOnly Property createdateColumn As DataColumn
            Get
                Return Me.columncreatedate
            End Get
        End Property
        
        Friend ReadOnly Property updatedateColumn As DataColumn
            Get
                Return Me.columnupdatedate
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As IsCT_ShowRow
            Get
                Return CType(Me.Rows(index),IsCT_ShowRow)
            End Get
        End Property
        
        Public Event IsCT_ShowRowChanged As IsCT_ShowRowChangeEventHandler
        
        Public Event IsCT_ShowRowChanging As IsCT_ShowRowChangeEventHandler
        
        Public Event IsCT_ShowRowDeleted As IsCT_ShowRowChangeEventHandler
        
        Public Event IsCT_ShowRowDeleting As IsCT_ShowRowChangeEventHandler
        
        Public Overloads Sub AddIsCT_ShowRow(ByVal row As IsCT_ShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddIsCT_ShowRow( _
                    ByVal Customer As String,  _
                    ByVal Address1 As String,  _
                    ByVal Address2 As String,  _
                    ByVal TerritoryDesc As String,  _
                    ByVal Province As String,  _
                    ByVal Group As String,  _
                    ByVal refcode As String,  _
                    ByVal refdate As Date,  _
                    ByVal _Item As String,  _
                    ByVal Principal As String,  _
                    ByVal Division As String,  _
                    ByVal qtysold As Long,  _
                    ByVal qtyfree As Long,  _
                    ByVal unitprice As Decimal,  _
                    ByVal amountsold As Decimal,  _
                    ByVal creditedamount As Decimal,  _
                    ByVal commissiondate As Date,  _
                    ByVal Medrep As String,  _
                    ByVal Supervisor As String,  _
                    ByVal Nsm As String,  _
                    ByVal outofstock As Integer,  _
                    ByVal saletype As String,  _
                    ByVal subsaletype As String,  _
                    ByVal subsubsaletype As String,  _
                    ByVal salesclass As String,  _
                    ByVal createdate As Date,  _
                    ByVal updatedate As Date) As IsCT_ShowRow
            Dim rowIsCT_ShowRow As IsCT_ShowRow = CType(Me.NewRow,IsCT_ShowRow)
            rowIsCT_ShowRow.ItemArray = New Object() {Nothing, Customer, Address1, Address2, TerritoryDesc, Province, Group, refcode, refdate, _Item, Principal, Division, qtysold, qtyfree, unitprice, amountsold, creditedamount, commissiondate, Medrep, Supervisor, Nsm, outofstock, saletype, subsaletype, subsubsaletype, salesclass, createdate, updatedate}
            Me.Rows.Add(rowIsCT_ShowRow)
            Return rowIsCT_ShowRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As IsCT_ShowDataTable = CType(MyBase.Clone,IsCT_ShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New IsCT_ShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnrowid = Me.Columns("rowid")
            Me.columnCustomer = Me.Columns("Customer")
            Me.columnAddress1 = Me.Columns("Address1")
            Me.columnAddress2 = Me.Columns("Address2")
            Me.columnTerritoryDesc = Me.Columns("TerritoryDesc")
            Me.columnProvince = Me.Columns("Province")
            Me.columnGroup = Me.Columns("Group")
            Me.columnrefcode = Me.Columns("refcode")
            Me.columnrefdate = Me.Columns("refdate")
            Me.column_Item = Me.Columns("Item")
            Me.columnPrincipal = Me.Columns("Principal")
            Me.columnDivision = Me.Columns("Division")
            Me.columnqtysold = Me.Columns("qtysold")
            Me.columnqtyfree = Me.Columns("qtyfree")
            Me.columnunitprice = Me.Columns("unitprice")
            Me.columnamountsold = Me.Columns("amountsold")
            Me.columncreditedamount = Me.Columns("creditedamount")
            Me.columncommissiondate = Me.Columns("commissiondate")
            Me.columnMedrep = Me.Columns("Medrep")
            Me.columnSupervisor = Me.Columns("Supervisor")
            Me.columnNsm = Me.Columns("Nsm")
            Me.columnoutofstock = Me.Columns("outofstock")
            Me.columnsaletype = Me.Columns("saletype")
            Me.columnsubsaletype = Me.Columns("subsaletype")
            Me.columnsubsubsaletype = Me.Columns("subsubsaletype")
            Me.columnsalesclass = Me.Columns("salesclass")
            Me.columncreatedate = Me.Columns("createdate")
            Me.columnupdatedate = Me.Columns("updatedate")
        End Sub
        
        Private Sub InitClass()
            Me.columnrowid = New DataColumn("rowid", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrowid)
            Me.columnCustomer = New DataColumn("Customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCustomer)
            Me.columnAddress1 = New DataColumn("Address1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAddress1)
            Me.columnAddress2 = New DataColumn("Address2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAddress2)
            Me.columnTerritoryDesc = New DataColumn("TerritoryDesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTerritoryDesc)
            Me.columnProvince = New DataColumn("Province", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnProvince)
            Me.columnGroup = New DataColumn("Group", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGroup)
            Me.columnrefcode = New DataColumn("refcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefcode)
            Me.columnrefdate = New DataColumn("refdate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefdate)
            Me.column_Item = New DataColumn("Item", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_Item)
            Me.columnPrincipal = New DataColumn("Principal", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrincipal)
            Me.columnDivision = New DataColumn("Division", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDivision)
            Me.columnqtysold = New DataColumn("qtysold", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnqtysold)
            Me.columnqtyfree = New DataColumn("qtyfree", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnqtyfree)
            Me.columnunitprice = New DataColumn("unitprice", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnunitprice)
            Me.columnamountsold = New DataColumn("amountsold", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamountsold)
            Me.columncreditedamount = New DataColumn("creditedamount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncreditedamount)
            Me.columncommissiondate = New DataColumn("commissiondate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncommissiondate)
            Me.columnMedrep = New DataColumn("Medrep", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMedrep)
            Me.columnSupervisor = New DataColumn("Supervisor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSupervisor)
            Me.columnNsm = New DataColumn("Nsm", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNsm)
            Me.columnoutofstock = New DataColumn("outofstock", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnoutofstock)
            Me.columnsaletype = New DataColumn("saletype", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsaletype)
            Me.columnsubsaletype = New DataColumn("subsaletype", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsubsaletype)
            Me.columnsubsubsaletype = New DataColumn("subsubsaletype", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsubsubsaletype)
            Me.columnsalesclass = New DataColumn("salesclass", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsalesclass)
            Me.columncreatedate = New DataColumn("createdate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncreatedate)
            Me.columnupdatedate = New DataColumn("updatedate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnupdatedate)
            Me.columnrowid.AutoIncrement = true
            Me.columnrowid.AllowDBNull = false
            Me.columnrowid.ReadOnly = true
            Me.columnCustomer.ReadOnly = true
            Me.columnTerritoryDesc.ReadOnly = true
            Me.columnProvince.ReadOnly = true
            Me.columnGroup.ReadOnly = true
            Me.column_Item.ReadOnly = true
            Me.columnPrincipal.ReadOnly = true
            Me.columnDivision.ReadOnly = true
            Me.columnMedrep.ReadOnly = true
            Me.columnSupervisor.ReadOnly = true
            Me.columnNsm.ReadOnly = true
            Me.columnoutofstock.AllowDBNull = false
        End Sub
        
        Public Function NewIsCT_ShowRow() As IsCT_ShowRow
            Return CType(Me.NewRow,IsCT_ShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New IsCT_ShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(IsCT_ShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IsCT_ShowRowChangedEvent) Is Nothing) Then
                RaiseEvent IsCT_ShowRowChanged(Me, New IsCT_ShowRowChangeEvent(CType(e.Row,IsCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IsCT_ShowRowChangingEvent) Is Nothing) Then
                RaiseEvent IsCT_ShowRowChanging(Me, New IsCT_ShowRowChangeEvent(CType(e.Row,IsCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IsCT_ShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent IsCT_ShowRowDeleted(Me, New IsCT_ShowRowChangeEvent(CType(e.Row,IsCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IsCT_ShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent IsCT_ShowRowDeleting(Me, New IsCT_ShowRowChangeEvent(CType(e.Row,IsCT_ShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveIsCT_ShowRow(ByVal row As IsCT_ShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class IsCT_ShowRow
        Inherits DataRow
        
        Private tableIsCT_Show As IsCT_ShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableIsCT_Show = CType(Me.Table,IsCT_ShowDataTable)
        End Sub
        
        Public Property rowid As Decimal
            Get
                Return CType(Me(Me.tableIsCT_Show.rowidColumn),Decimal)
            End Get
            Set
                Me(Me.tableIsCT_Show.rowidColumn) = value
            End Set
        End Property
        
        Public Property Customer As String
            Get
                Try 
                    Return CType(Me(Me.tableIsCT_Show.CustomerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIsCT_Show.CustomerColumn) = value
            End Set
        End Property
        
        Public Property Address1 As String
            Get
                Try 
                    Return CType(Me(Me.tableIsCT_Show.Address1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIsCT_Show.Address1Column) = value
            End Set
        End Property
        
        Public Property Address2 As String
            Get
                Try 
                    Return CType(Me(Me.tableIsCT_Show.Address2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIsCT_Show.Address2Column) = value
            End Set
        End Property
        
        Public Property TerritoryDesc As String
            Get
                Try 
                    Return CType(Me(Me.tableIsCT_Show.TerritoryDescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIsCT_Show.TerritoryDescColumn) = value
            End Set
        End Property
        
        Public Property Province As String
            Get
                Try 
                    Return CType(Me(Me.tableIsCT_Show.ProvinceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIsCT_Show.ProvinceColumn) = value
            End Set
        End Property
        
        Public Property Group As String
            Get
                Try 
                    Return CType(Me(Me.tableIsCT_Show.GroupColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIsCT_Show.GroupColumn) = value
            End Set
        End Property
        
        Public Property refcode As String
            Get
                Try 
                    Return CType(Me(Me.tableIsCT_Show.refcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIsCT_Show.refcodeColumn) = value
            End Set
        End Property
        
        Public Property refdate As Date
            Get
                Try 
                    Return CType(Me(Me.tableIsCT_Show.refdateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIsCT_Show.refdateColumn) = value
            End Set
        End Property
        
        Public Property _Item As String
            Get
                Try 
                    Return CType(Me(Me.tableIsCT_Show._ItemColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIsCT_Show._ItemColumn) = value
            End Set
        End Property
        
        Public Property Principal As String
            Get
                Try 
                    Return CType(Me(Me.tableIsCT_Show.PrincipalColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIsCT_Show.PrincipalColumn) = value
            End Set
        End Property
        
        Public Property Division As String
            Get
                Try 
                    Return CType(Me(Me.tableIsCT_Show.DivisionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIsCT_Show.DivisionColumn) = value
            End Set
        End Property
        
        Public Property qtysold As Long
            Get
                Try 
                    Return CType(Me(Me.tableIsCT_Show.qtysoldColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIsCT_Show.qtysoldColumn) = value
            End Set
        End Property
        
        Public Property qtyfree As Long
            Get
                Try 
                    Return CType(Me(Me.tableIsCT_Show.qtyfreeColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIsCT_Show.qtyfreeColumn) = value
            End Set
        End Property
        
        Public Property unitprice As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableIsCT_Show.unitpriceColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIsCT_Show.unitpriceColumn) = value
            End Set
        End Property
        
        Public Property amountsold As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableIsCT_Show.amountsoldColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIsCT_Show.amountsoldColumn) = value
            End Set
        End Property
        
        Public Property creditedamount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableIsCT_Show.creditedamountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIsCT_Show.creditedamountColumn) = value
            End Set
        End Property
        
        Public Property commissiondate As Date
            Get
                Try 
                    Return CType(Me(Me.tableIsCT_Show.commissiondateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIsCT_Show.commissiondateColumn) = value
            End Set
        End Property
        
        Public Property Medrep As String
            Get
                Try 
                    Return CType(Me(Me.tableIsCT_Show.MedrepColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIsCT_Show.MedrepColumn) = value
            End Set
        End Property
        
        Public Property Supervisor As String
            Get
                Try 
                    Return CType(Me(Me.tableIsCT_Show.SupervisorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIsCT_Show.SupervisorColumn) = value
            End Set
        End Property
        
        Public Property Nsm As String
            Get
                Try 
                    Return CType(Me(Me.tableIsCT_Show.NsmColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIsCT_Show.NsmColumn) = value
            End Set
        End Property
        
        Public Property outofstock As Integer
            Get
                Return CType(Me(Me.tableIsCT_Show.outofstockColumn),Integer)
            End Get
            Set
                Me(Me.tableIsCT_Show.outofstockColumn) = value
            End Set
        End Property
        
        Public Property saletype As String
            Get
                Try 
                    Return CType(Me(Me.tableIsCT_Show.saletypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIsCT_Show.saletypeColumn) = value
            End Set
        End Property
        
        Public Property subsaletype As String
            Get
                Try 
                    Return CType(Me(Me.tableIsCT_Show.subsaletypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIsCT_Show.subsaletypeColumn) = value
            End Set
        End Property
        
        Public Property subsubsaletype As String
            Get
                Try 
                    Return CType(Me(Me.tableIsCT_Show.subsubsaletypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIsCT_Show.subsubsaletypeColumn) = value
            End Set
        End Property
        
        Public Property salesclass As String
            Get
                Try 
                    Return CType(Me(Me.tableIsCT_Show.salesclassColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIsCT_Show.salesclassColumn) = value
            End Set
        End Property
        
        Public Property createdate As Date
            Get
                Try 
                    Return CType(Me(Me.tableIsCT_Show.createdateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIsCT_Show.createdateColumn) = value
            End Set
        End Property
        
        Public Property updatedate As Date
            Get
                Try 
                    Return CType(Me(Me.tableIsCT_Show.updatedateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIsCT_Show.updatedateColumn) = value
            End Set
        End Property
        
        Public Function IsCustomerNull() As Boolean
            Return Me.IsNull(Me.tableIsCT_Show.CustomerColumn)
        End Function
        
        Public Sub SetCustomerNull()
            Me(Me.tableIsCT_Show.CustomerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAddress1Null() As Boolean
            Return Me.IsNull(Me.tableIsCT_Show.Address1Column)
        End Function
        
        Public Sub SetAddress1Null()
            Me(Me.tableIsCT_Show.Address1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsAddress2Null() As Boolean
            Return Me.IsNull(Me.tableIsCT_Show.Address2Column)
        End Function
        
        Public Sub SetAddress2Null()
            Me(Me.tableIsCT_Show.Address2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsTerritoryDescNull() As Boolean
            Return Me.IsNull(Me.tableIsCT_Show.TerritoryDescColumn)
        End Function
        
        Public Sub SetTerritoryDescNull()
            Me(Me.tableIsCT_Show.TerritoryDescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsProvinceNull() As Boolean
            Return Me.IsNull(Me.tableIsCT_Show.ProvinceColumn)
        End Function
        
        Public Sub SetProvinceNull()
            Me(Me.tableIsCT_Show.ProvinceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGroupNull() As Boolean
            Return Me.IsNull(Me.tableIsCT_Show.GroupColumn)
        End Function
        
        Public Sub SetGroupNull()
            Me(Me.tableIsCT_Show.GroupColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsrefcodeNull() As Boolean
            Return Me.IsNull(Me.tableIsCT_Show.refcodeColumn)
        End Function
        
        Public Sub SetrefcodeNull()
            Me(Me.tableIsCT_Show.refcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsrefdateNull() As Boolean
            Return Me.IsNull(Me.tableIsCT_Show.refdateColumn)
        End Function
        
        Public Sub SetrefdateNull()
            Me(Me.tableIsCT_Show.refdateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Is_ItemNull() As Boolean
            Return Me.IsNull(Me.tableIsCT_Show._ItemColumn)
        End Function
        
        Public Sub Set_ItemNull()
            Me(Me.tableIsCT_Show._ItemColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPrincipalNull() As Boolean
            Return Me.IsNull(Me.tableIsCT_Show.PrincipalColumn)
        End Function
        
        Public Sub SetPrincipalNull()
            Me(Me.tableIsCT_Show.PrincipalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDivisionNull() As Boolean
            Return Me.IsNull(Me.tableIsCT_Show.DivisionColumn)
        End Function
        
        Public Sub SetDivisionNull()
            Me(Me.tableIsCT_Show.DivisionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsqtysoldNull() As Boolean
            Return Me.IsNull(Me.tableIsCT_Show.qtysoldColumn)
        End Function
        
        Public Sub SetqtysoldNull()
            Me(Me.tableIsCT_Show.qtysoldColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsqtyfreeNull() As Boolean
            Return Me.IsNull(Me.tableIsCT_Show.qtyfreeColumn)
        End Function
        
        Public Sub SetqtyfreeNull()
            Me(Me.tableIsCT_Show.qtyfreeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsunitpriceNull() As Boolean
            Return Me.IsNull(Me.tableIsCT_Show.unitpriceColumn)
        End Function
        
        Public Sub SetunitpriceNull()
            Me(Me.tableIsCT_Show.unitpriceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsamountsoldNull() As Boolean
            Return Me.IsNull(Me.tableIsCT_Show.amountsoldColumn)
        End Function
        
        Public Sub SetamountsoldNull()
            Me(Me.tableIsCT_Show.amountsoldColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscreditedamountNull() As Boolean
            Return Me.IsNull(Me.tableIsCT_Show.creditedamountColumn)
        End Function
        
        Public Sub SetcreditedamountNull()
            Me(Me.tableIsCT_Show.creditedamountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscommissiondateNull() As Boolean
            Return Me.IsNull(Me.tableIsCT_Show.commissiondateColumn)
        End Function
        
        Public Sub SetcommissiondateNull()
            Me(Me.tableIsCT_Show.commissiondateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMedrepNull() As Boolean
            Return Me.IsNull(Me.tableIsCT_Show.MedrepColumn)
        End Function
        
        Public Sub SetMedrepNull()
            Me(Me.tableIsCT_Show.MedrepColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSupervisorNull() As Boolean
            Return Me.IsNull(Me.tableIsCT_Show.SupervisorColumn)
        End Function
        
        Public Sub SetSupervisorNull()
            Me(Me.tableIsCT_Show.SupervisorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNsmNull() As Boolean
            Return Me.IsNull(Me.tableIsCT_Show.NsmColumn)
        End Function
        
        Public Sub SetNsmNull()
            Me(Me.tableIsCT_Show.NsmColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssaletypeNull() As Boolean
            Return Me.IsNull(Me.tableIsCT_Show.saletypeColumn)
        End Function
        
        Public Sub SetsaletypeNull()
            Me(Me.tableIsCT_Show.saletypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssubsaletypeNull() As Boolean
            Return Me.IsNull(Me.tableIsCT_Show.subsaletypeColumn)
        End Function
        
        Public Sub SetsubsaletypeNull()
            Me(Me.tableIsCT_Show.subsaletypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssubsubsaletypeNull() As Boolean
            Return Me.IsNull(Me.tableIsCT_Show.subsubsaletypeColumn)
        End Function
        
        Public Sub SetsubsubsaletypeNull()
            Me(Me.tableIsCT_Show.subsubsaletypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssalesclassNull() As Boolean
            Return Me.IsNull(Me.tableIsCT_Show.salesclassColumn)
        End Function
        
        Public Sub SetsalesclassNull()
            Me(Me.tableIsCT_Show.salesclassColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscreatedateNull() As Boolean
            Return Me.IsNull(Me.tableIsCT_Show.createdateColumn)
        End Function
        
        Public Sub SetcreatedateNull()
            Me(Me.tableIsCT_Show.createdateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsupdatedateNull() As Boolean
            Return Me.IsNull(Me.tableIsCT_Show.updatedateColumn)
        End Function
        
        Public Sub SetupdatedateNull()
            Me(Me.tableIsCT_Show.updatedateColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class IsCT_ShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As IsCT_ShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As IsCT_ShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As IsCT_ShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class IsMercCTDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnrowid As DataColumn
        
        Private columnitems As DataColumn
        
        Private columnrefdate As DataColumn
        
        Private columnbranch As DataColumn
        
        Private columnaddress1 As DataColumn
        
        Private columnaddress2 As DataColumn
        
        Private columnunitprice As DataColumn
        
        Private columnqty As DataColumn
        
        Private columnamount As DataColumn
        
        Private columnpmr As DataColumn
        
        Private columndsm As DataColumn
        
        Friend Sub New()
            MyBase.New("IsMercCT")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property rowidColumn As DataColumn
            Get
                Return Me.columnrowid
            End Get
        End Property
        
        Friend ReadOnly Property itemsColumn As DataColumn
            Get
                Return Me.columnitems
            End Get
        End Property
        
        Friend ReadOnly Property refdateColumn As DataColumn
            Get
                Return Me.columnrefdate
            End Get
        End Property
        
        Friend ReadOnly Property branchColumn As DataColumn
            Get
                Return Me.columnbranch
            End Get
        End Property
        
        Friend ReadOnly Property address1Column As DataColumn
            Get
                Return Me.columnaddress1
            End Get
        End Property
        
        Friend ReadOnly Property address2Column As DataColumn
            Get
                Return Me.columnaddress2
            End Get
        End Property
        
        Friend ReadOnly Property unitpriceColumn As DataColumn
            Get
                Return Me.columnunitprice
            End Get
        End Property
        
        Friend ReadOnly Property qtyColumn As DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        Friend ReadOnly Property amountColumn As DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        Friend ReadOnly Property pmrColumn As DataColumn
            Get
                Return Me.columnpmr
            End Get
        End Property
        
        Friend ReadOnly Property dsmColumn As DataColumn
            Get
                Return Me.columndsm
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As IsMercCTRow
            Get
                Return CType(Me.Rows(index),IsMercCTRow)
            End Get
        End Property
        
        Public Event IsMercCTRowChanged As IsMercCTRowChangeEventHandler
        
        Public Event IsMercCTRowChanging As IsMercCTRowChangeEventHandler
        
        Public Event IsMercCTRowDeleted As IsMercCTRowChangeEventHandler
        
        Public Event IsMercCTRowDeleting As IsMercCTRowChangeEventHandler
        
        Public Overloads Sub AddIsMercCTRow(ByVal row As IsMercCTRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddIsMercCTRow(ByVal rowid As Integer, ByVal items As String, ByVal refdate As Date, ByVal branch As String, ByVal address1 As String, ByVal address2 As String, ByVal unitprice As Double, ByVal qty As Integer, ByVal amount As Double, ByVal pmr As String, ByVal dsm As String) As IsMercCTRow
            Dim rowIsMercCTRow As IsMercCTRow = CType(Me.NewRow,IsMercCTRow)
            rowIsMercCTRow.ItemArray = New Object() {rowid, items, refdate, branch, address1, address2, unitprice, qty, amount, pmr, dsm}
            Me.Rows.Add(rowIsMercCTRow)
            Return rowIsMercCTRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As IsMercCTDataTable = CType(MyBase.Clone,IsMercCTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New IsMercCTDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnrowid = Me.Columns("rowid")
            Me.columnitems = Me.Columns("items")
            Me.columnrefdate = Me.Columns("refdate")
            Me.columnbranch = Me.Columns("branch")
            Me.columnaddress1 = Me.Columns("address1")
            Me.columnaddress2 = Me.Columns("address2")
            Me.columnunitprice = Me.Columns("unitprice")
            Me.columnqty = Me.Columns("qty")
            Me.columnamount = Me.Columns("amount")
            Me.columnpmr = Me.Columns("pmr")
            Me.columndsm = Me.Columns("dsm")
        End Sub
        
        Private Sub InitClass()
            Me.columnrowid = New DataColumn("rowid", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrowid)
            Me.columnitems = New DataColumn("items", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitems)
            Me.columnrefdate = New DataColumn("refdate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefdate)
            Me.columnbranch = New DataColumn("branch", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbranch)
            Me.columnaddress1 = New DataColumn("address1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaddress1)
            Me.columnaddress2 = New DataColumn("address2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaddress2)
            Me.columnunitprice = New DataColumn("unitprice", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnunitprice)
            Me.columnqty = New DataColumn("qty", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnqty)
            Me.columnamount = New DataColumn("amount", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount)
            Me.columnpmr = New DataColumn("pmr", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpmr)
            Me.columndsm = New DataColumn("dsm", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndsm)
        End Sub
        
        Public Function NewIsMercCTRow() As IsMercCTRow
            Return CType(Me.NewRow,IsMercCTRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New IsMercCTRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(IsMercCTRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IsMercCTRowChangedEvent) Is Nothing) Then
                RaiseEvent IsMercCTRowChanged(Me, New IsMercCTRowChangeEvent(CType(e.Row,IsMercCTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IsMercCTRowChangingEvent) Is Nothing) Then
                RaiseEvent IsMercCTRowChanging(Me, New IsMercCTRowChangeEvent(CType(e.Row,IsMercCTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IsMercCTRowDeletedEvent) Is Nothing) Then
                RaiseEvent IsMercCTRowDeleted(Me, New IsMercCTRowChangeEvent(CType(e.Row,IsMercCTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IsMercCTRowDeletingEvent) Is Nothing) Then
                RaiseEvent IsMercCTRowDeleting(Me, New IsMercCTRowChangeEvent(CType(e.Row,IsMercCTRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveIsMercCTRow(ByVal row As IsMercCTRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class IsMercCTRow
        Inherits DataRow
        
        Private tableIsMercCT As IsMercCTDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableIsMercCT = CType(Me.Table,IsMercCTDataTable)
        End Sub
        
        Public Property rowid As Integer
            Get
                Try 
                    Return CType(Me(Me.tableIsMercCT.rowidColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIsMercCT.rowidColumn) = value
            End Set
        End Property
        
        Public Property items As String
            Get
                Try 
                    Return CType(Me(Me.tableIsMercCT.itemsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIsMercCT.itemsColumn) = value
            End Set
        End Property
        
        Public Property refdate As Date
            Get
                Try 
                    Return CType(Me(Me.tableIsMercCT.refdateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIsMercCT.refdateColumn) = value
            End Set
        End Property
        
        Public Property branch As String
            Get
                Try 
                    Return CType(Me(Me.tableIsMercCT.branchColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIsMercCT.branchColumn) = value
            End Set
        End Property
        
        Public Property address1 As String
            Get
                Try 
                    Return CType(Me(Me.tableIsMercCT.address1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIsMercCT.address1Column) = value
            End Set
        End Property
        
        Public Property address2 As String
            Get
                Try 
                    Return CType(Me(Me.tableIsMercCT.address2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIsMercCT.address2Column) = value
            End Set
        End Property
        
        Public Property unitprice As Double
            Get
                Try 
                    Return CType(Me(Me.tableIsMercCT.unitpriceColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIsMercCT.unitpriceColumn) = value
            End Set
        End Property
        
        Public Property qty As Integer
            Get
                Try 
                    Return CType(Me(Me.tableIsMercCT.qtyColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIsMercCT.qtyColumn) = value
            End Set
        End Property
        
        Public Property amount As Double
            Get
                Try 
                    Return CType(Me(Me.tableIsMercCT.amountColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIsMercCT.amountColumn) = value
            End Set
        End Property
        
        Public Property pmr As String
            Get
                Try 
                    Return CType(Me(Me.tableIsMercCT.pmrColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIsMercCT.pmrColumn) = value
            End Set
        End Property
        
        Public Property dsm As String
            Get
                Try 
                    Return CType(Me(Me.tableIsMercCT.dsmColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIsMercCT.dsmColumn) = value
            End Set
        End Property
        
        Public Function IsrowidNull() As Boolean
            Return Me.IsNull(Me.tableIsMercCT.rowidColumn)
        End Function
        
        Public Sub SetrowidNull()
            Me(Me.tableIsMercCT.rowidColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsitemsNull() As Boolean
            Return Me.IsNull(Me.tableIsMercCT.itemsColumn)
        End Function
        
        Public Sub SetitemsNull()
            Me(Me.tableIsMercCT.itemsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsrefdateNull() As Boolean
            Return Me.IsNull(Me.tableIsMercCT.refdateColumn)
        End Function
        
        Public Sub SetrefdateNull()
            Me(Me.tableIsMercCT.refdateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsbranchNull() As Boolean
            Return Me.IsNull(Me.tableIsMercCT.branchColumn)
        End Function
        
        Public Sub SetbranchNull()
            Me(Me.tableIsMercCT.branchColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isaddress1Null() As Boolean
            Return Me.IsNull(Me.tableIsMercCT.address1Column)
        End Function
        
        Public Sub Setaddress1Null()
            Me(Me.tableIsMercCT.address1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isaddress2Null() As Boolean
            Return Me.IsNull(Me.tableIsMercCT.address2Column)
        End Function
        
        Public Sub Setaddress2Null()
            Me(Me.tableIsMercCT.address2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsunitpriceNull() As Boolean
            Return Me.IsNull(Me.tableIsMercCT.unitpriceColumn)
        End Function
        
        Public Sub SetunitpriceNull()
            Me(Me.tableIsMercCT.unitpriceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsqtyNull() As Boolean
            Return Me.IsNull(Me.tableIsMercCT.qtyColumn)
        End Function
        
        Public Sub SetqtyNull()
            Me(Me.tableIsMercCT.qtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsamountNull() As Boolean
            Return Me.IsNull(Me.tableIsMercCT.amountColumn)
        End Function
        
        Public Sub SetamountNull()
            Me(Me.tableIsMercCT.amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspmrNull() As Boolean
            Return Me.IsNull(Me.tableIsMercCT.pmrColumn)
        End Function
        
        Public Sub SetpmrNull()
            Me(Me.tableIsMercCT.pmrColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdsmNull() As Boolean
            Return Me.IsNull(Me.tableIsMercCT.dsmColumn)
        End Function
        
        Public Sub SetdsmNull()
            Me(Me.tableIsMercCT.dsmColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class IsMercCTRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As IsMercCTRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As IsMercCTRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As IsMercCTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UserTabCT_ShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnRowid As DataColumn
        
        Private columnUserId As DataColumn
        
        Private columnUserName As DataColumn
        
        Private columnPassword As DataColumn
        
        Private columnRole As DataColumn
        
        Private columnCreateDate As DataColumn
        
        Private columnUpdateDate As DataColumn
        
        Private columnEncoder As DataColumn
        
        Friend Sub New()
            MyBase.New("UserTabCT_Show")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property RowidColumn As DataColumn
            Get
                Return Me.columnRowid
            End Get
        End Property
        
        Friend ReadOnly Property UserIdColumn As DataColumn
            Get
                Return Me.columnUserId
            End Get
        End Property
        
        Friend ReadOnly Property UserNameColumn As DataColumn
            Get
                Return Me.columnUserName
            End Get
        End Property
        
        Friend ReadOnly Property PasswordColumn As DataColumn
            Get
                Return Me.columnPassword
            End Get
        End Property
        
        Friend ReadOnly Property RoleColumn As DataColumn
            Get
                Return Me.columnRole
            End Get
        End Property
        
        Friend ReadOnly Property CreateDateColumn As DataColumn
            Get
                Return Me.columnCreateDate
            End Get
        End Property
        
        Friend ReadOnly Property UpdateDateColumn As DataColumn
            Get
                Return Me.columnUpdateDate
            End Get
        End Property
        
        Friend ReadOnly Property EncoderColumn As DataColumn
            Get
                Return Me.columnEncoder
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As UserTabCT_ShowRow
            Get
                Return CType(Me.Rows(index),UserTabCT_ShowRow)
            End Get
        End Property
        
        Public Event UserTabCT_ShowRowChanged As UserTabCT_ShowRowChangeEventHandler
        
        Public Event UserTabCT_ShowRowChanging As UserTabCT_ShowRowChangeEventHandler
        
        Public Event UserTabCT_ShowRowDeleted As UserTabCT_ShowRowChangeEventHandler
        
        Public Event UserTabCT_ShowRowDeleting As UserTabCT_ShowRowChangeEventHandler
        
        Public Overloads Sub AddUserTabCT_ShowRow(ByVal row As UserTabCT_ShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddUserTabCT_ShowRow(ByVal Rowid As String, ByVal UserId As String, ByVal UserName As String, ByVal Password As String, ByVal Role As String, ByVal CreateDate As Date, ByVal UpdateDate As Date, ByVal Encoder As String) As UserTabCT_ShowRow
            Dim rowUserTabCT_ShowRow As UserTabCT_ShowRow = CType(Me.NewRow,UserTabCT_ShowRow)
            rowUserTabCT_ShowRow.ItemArray = New Object() {Rowid, UserId, UserName, Password, Role, CreateDate, UpdateDate, Encoder}
            Me.Rows.Add(rowUserTabCT_ShowRow)
            Return rowUserTabCT_ShowRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As UserTabCT_ShowDataTable = CType(MyBase.Clone,UserTabCT_ShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New UserTabCT_ShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnRowid = Me.Columns("Rowid")
            Me.columnUserId = Me.Columns("UserId")
            Me.columnUserName = Me.Columns("UserName")
            Me.columnPassword = Me.Columns("Password")
            Me.columnRole = Me.Columns("Role")
            Me.columnCreateDate = Me.Columns("CreateDate")
            Me.columnUpdateDate = Me.Columns("UpdateDate")
            Me.columnEncoder = Me.Columns("Encoder")
        End Sub
        
        Private Sub InitClass()
            Me.columnRowid = New DataColumn("Rowid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRowid)
            Me.columnUserId = New DataColumn("UserId", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUserId)
            Me.columnUserName = New DataColumn("UserName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUserName)
            Me.columnPassword = New DataColumn("Password", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPassword)
            Me.columnRole = New DataColumn("Role", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRole)
            Me.columnCreateDate = New DataColumn("CreateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreateDate)
            Me.columnUpdateDate = New DataColumn("UpdateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUpdateDate)
            Me.columnEncoder = New DataColumn("Encoder", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEncoder)
        End Sub
        
        Public Function NewUserTabCT_ShowRow() As UserTabCT_ShowRow
            Return CType(Me.NewRow,UserTabCT_ShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New UserTabCT_ShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(UserTabCT_ShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UserTabCT_ShowRowChangedEvent) Is Nothing) Then
                RaiseEvent UserTabCT_ShowRowChanged(Me, New UserTabCT_ShowRowChangeEvent(CType(e.Row,UserTabCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UserTabCT_ShowRowChangingEvent) Is Nothing) Then
                RaiseEvent UserTabCT_ShowRowChanging(Me, New UserTabCT_ShowRowChangeEvent(CType(e.Row,UserTabCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UserTabCT_ShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent UserTabCT_ShowRowDeleted(Me, New UserTabCT_ShowRowChangeEvent(CType(e.Row,UserTabCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UserTabCT_ShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent UserTabCT_ShowRowDeleting(Me, New UserTabCT_ShowRowChangeEvent(CType(e.Row,UserTabCT_ShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveUserTabCT_ShowRow(ByVal row As UserTabCT_ShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UserTabCT_ShowRow
        Inherits DataRow
        
        Private tableUserTabCT_Show As UserTabCT_ShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableUserTabCT_Show = CType(Me.Table,UserTabCT_ShowDataTable)
        End Sub
        
        Public Property Rowid As String
            Get
                Try 
                    Return CType(Me(Me.tableUserTabCT_Show.RowidColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUserTabCT_Show.RowidColumn) = value
            End Set
        End Property
        
        Public Property UserId As String
            Get
                Try 
                    Return CType(Me(Me.tableUserTabCT_Show.UserIdColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUserTabCT_Show.UserIdColumn) = value
            End Set
        End Property
        
        Public Property UserName As String
            Get
                Try 
                    Return CType(Me(Me.tableUserTabCT_Show.UserNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUserTabCT_Show.UserNameColumn) = value
            End Set
        End Property
        
        Public Property Password As String
            Get
                Try 
                    Return CType(Me(Me.tableUserTabCT_Show.PasswordColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUserTabCT_Show.PasswordColumn) = value
            End Set
        End Property
        
        Public Property Role As String
            Get
                Try 
                    Return CType(Me(Me.tableUserTabCT_Show.RoleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUserTabCT_Show.RoleColumn) = value
            End Set
        End Property
        
        Public Property CreateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableUserTabCT_Show.CreateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUserTabCT_Show.CreateDateColumn) = value
            End Set
        End Property
        
        Public Property UpdateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableUserTabCT_Show.UpdateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUserTabCT_Show.UpdateDateColumn) = value
            End Set
        End Property
        
        Public Property Encoder As String
            Get
                Try 
                    Return CType(Me(Me.tableUserTabCT_Show.EncoderColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUserTabCT_Show.EncoderColumn) = value
            End Set
        End Property
        
        Public Function IsRowidNull() As Boolean
            Return Me.IsNull(Me.tableUserTabCT_Show.RowidColumn)
        End Function
        
        Public Sub SetRowidNull()
            Me(Me.tableUserTabCT_Show.RowidColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUserIdNull() As Boolean
            Return Me.IsNull(Me.tableUserTabCT_Show.UserIdColumn)
        End Function
        
        Public Sub SetUserIdNull()
            Me(Me.tableUserTabCT_Show.UserIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUserNameNull() As Boolean
            Return Me.IsNull(Me.tableUserTabCT_Show.UserNameColumn)
        End Function
        
        Public Sub SetUserNameNull()
            Me(Me.tableUserTabCT_Show.UserNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPasswordNull() As Boolean
            Return Me.IsNull(Me.tableUserTabCT_Show.PasswordColumn)
        End Function
        
        Public Sub SetPasswordNull()
            Me(Me.tableUserTabCT_Show.PasswordColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRoleNull() As Boolean
            Return Me.IsNull(Me.tableUserTabCT_Show.RoleColumn)
        End Function
        
        Public Sub SetRoleNull()
            Me(Me.tableUserTabCT_Show.RoleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreateDateNull() As Boolean
            Return Me.IsNull(Me.tableUserTabCT_Show.CreateDateColumn)
        End Function
        
        Public Sub SetCreateDateNull()
            Me(Me.tableUserTabCT_Show.CreateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUpdateDateNull() As Boolean
            Return Me.IsNull(Me.tableUserTabCT_Show.UpdateDateColumn)
        End Function
        
        Public Sub SetUpdateDateNull()
            Me(Me.tableUserTabCT_Show.UpdateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEncoderNull() As Boolean
            Return Me.IsNull(Me.tableUserTabCT_Show.EncoderColumn)
        End Function
        
        Public Sub SetEncoderNull()
            Me(Me.tableUserTabCT_Show.EncoderColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UserTabCT_ShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As UserTabCT_ShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As UserTabCT_ShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As UserTabCT_ShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TerKeyProduct_ShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnRowid As DataColumn
        
        Private columnTeamDivision As DataColumn
        
        Private columnLine As DataColumn
        
        Private columnStart_Date As DataColumn
        
        Private columnEnd_Date As DataColumn
        
        Friend Sub New()
            MyBase.New("TerKeyProduct_Show")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property RowidColumn As DataColumn
            Get
                Return Me.columnRowid
            End Get
        End Property
        
        Friend ReadOnly Property TeamDivisionColumn As DataColumn
            Get
                Return Me.columnTeamDivision
            End Get
        End Property
        
        Friend ReadOnly Property LineColumn As DataColumn
            Get
                Return Me.columnLine
            End Get
        End Property
        
        Friend ReadOnly Property Start_DateColumn As DataColumn
            Get
                Return Me.columnStart_Date
            End Get
        End Property
        
        Friend ReadOnly Property End_DateColumn As DataColumn
            Get
                Return Me.columnEnd_Date
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TerKeyProduct_ShowRow
            Get
                Return CType(Me.Rows(index),TerKeyProduct_ShowRow)
            End Get
        End Property
        
        Public Event TerKeyProduct_ShowRowChanged As TerKeyProduct_ShowRowChangeEventHandler
        
        Public Event TerKeyProduct_ShowRowChanging As TerKeyProduct_ShowRowChangeEventHandler
        
        Public Event TerKeyProduct_ShowRowDeleted As TerKeyProduct_ShowRowChangeEventHandler
        
        Public Event TerKeyProduct_ShowRowDeleting As TerKeyProduct_ShowRowChangeEventHandler
        
        Public Overloads Sub AddTerKeyProduct_ShowRow(ByVal row As TerKeyProduct_ShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTerKeyProduct_ShowRow(ByVal TeamDivision As String, ByVal Line As String, ByVal Start_Date As Date, ByVal End_Date As Date) As TerKeyProduct_ShowRow
            Dim rowTerKeyProduct_ShowRow As TerKeyProduct_ShowRow = CType(Me.NewRow,TerKeyProduct_ShowRow)
            rowTerKeyProduct_ShowRow.ItemArray = New Object() {Nothing, TeamDivision, Line, Start_Date, End_Date}
            Me.Rows.Add(rowTerKeyProduct_ShowRow)
            Return rowTerKeyProduct_ShowRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TerKeyProduct_ShowDataTable = CType(MyBase.Clone,TerKeyProduct_ShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TerKeyProduct_ShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnRowid = Me.Columns("Rowid")
            Me.columnTeamDivision = Me.Columns("TeamDivision")
            Me.columnLine = Me.Columns("Line")
            Me.columnStart_Date = Me.Columns("Start_Date")
            Me.columnEnd_Date = Me.Columns("End_Date")
        End Sub
        
        Private Sub InitClass()
            Me.columnRowid = New DataColumn("Rowid", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRowid)
            Me.columnTeamDivision = New DataColumn("TeamDivision", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTeamDivision)
            Me.columnLine = New DataColumn("Line", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLine)
            Me.columnStart_Date = New DataColumn("Start_Date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStart_Date)
            Me.columnEnd_Date = New DataColumn("End_Date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEnd_Date)
            Me.columnRowid.AutoIncrement = true
            Me.columnRowid.AllowDBNull = false
            Me.columnRowid.ReadOnly = true
            Me.columnTeamDivision.ReadOnly = true
            Me.columnLine.ReadOnly = true
            Me.columnStart_Date.AllowDBNull = false
            Me.columnEnd_Date.AllowDBNull = false
        End Sub
        
        Public Function NewTerKeyProduct_ShowRow() As TerKeyProduct_ShowRow
            Return CType(Me.NewRow,TerKeyProduct_ShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TerKeyProduct_ShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TerKeyProduct_ShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TerKeyProduct_ShowRowChangedEvent) Is Nothing) Then
                RaiseEvent TerKeyProduct_ShowRowChanged(Me, New TerKeyProduct_ShowRowChangeEvent(CType(e.Row,TerKeyProduct_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TerKeyProduct_ShowRowChangingEvent) Is Nothing) Then
                RaiseEvent TerKeyProduct_ShowRowChanging(Me, New TerKeyProduct_ShowRowChangeEvent(CType(e.Row,TerKeyProduct_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TerKeyProduct_ShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent TerKeyProduct_ShowRowDeleted(Me, New TerKeyProduct_ShowRowChangeEvent(CType(e.Row,TerKeyProduct_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TerKeyProduct_ShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent TerKeyProduct_ShowRowDeleting(Me, New TerKeyProduct_ShowRowChangeEvent(CType(e.Row,TerKeyProduct_ShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTerKeyProduct_ShowRow(ByVal row As TerKeyProduct_ShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TerKeyProduct_ShowRow
        Inherits DataRow
        
        Private tableTerKeyProduct_Show As TerKeyProduct_ShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTerKeyProduct_Show = CType(Me.Table,TerKeyProduct_ShowDataTable)
        End Sub
        
        Public Property Rowid As Decimal
            Get
                Return CType(Me(Me.tableTerKeyProduct_Show.RowidColumn),Decimal)
            End Get
            Set
                Me(Me.tableTerKeyProduct_Show.RowidColumn) = value
            End Set
        End Property
        
        Public Property TeamDivision As String
            Get
                Try 
                    Return CType(Me(Me.tableTerKeyProduct_Show.TeamDivisionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTerKeyProduct_Show.TeamDivisionColumn) = value
            End Set
        End Property
        
        Public Property Line As String
            Get
                Try 
                    Return CType(Me(Me.tableTerKeyProduct_Show.LineColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTerKeyProduct_Show.LineColumn) = value
            End Set
        End Property
        
        Public Property Start_Date As Date
            Get
                Return CType(Me(Me.tableTerKeyProduct_Show.Start_DateColumn),Date)
            End Get
            Set
                Me(Me.tableTerKeyProduct_Show.Start_DateColumn) = value
            End Set
        End Property
        
        Public Property End_Date As Date
            Get
                Return CType(Me(Me.tableTerKeyProduct_Show.End_DateColumn),Date)
            End Get
            Set
                Me(Me.tableTerKeyProduct_Show.End_DateColumn) = value
            End Set
        End Property
        
        Public Function IsTeamDivisionNull() As Boolean
            Return Me.IsNull(Me.tableTerKeyProduct_Show.TeamDivisionColumn)
        End Function
        
        Public Sub SetTeamDivisionNull()
            Me(Me.tableTerKeyProduct_Show.TeamDivisionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLineNull() As Boolean
            Return Me.IsNull(Me.tableTerKeyProduct_Show.LineColumn)
        End Function
        
        Public Sub SetLineNull()
            Me(Me.tableTerKeyProduct_Show.LineColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TerKeyProduct_ShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TerKeyProduct_ShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TerKeyProduct_ShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TerKeyProduct_ShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class IMSB_ShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnimsbrickcode As DataColumn
        
        Private columnimsbrickdesc As DataColumn
        
        Private columnterritorycode As DataColumn
        
        Private columnterritory As DataColumn
        
        Private columncode As DataColumn
        
        Private columngroupp As DataColumn
        
        Private columnpro_code As DataColumn
        
        Private columnprovince As DataColumn
        
        Private columnterritoryrowid As DataColumn
        
        Friend Sub New()
            MyBase.New("IMSB_Show")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property imsbrickcodeColumn As DataColumn
            Get
                Return Me.columnimsbrickcode
            End Get
        End Property
        
        Friend ReadOnly Property imsbrickdescColumn As DataColumn
            Get
                Return Me.columnimsbrickdesc
            End Get
        End Property
        
        Friend ReadOnly Property territorycodeColumn As DataColumn
            Get
                Return Me.columnterritorycode
            End Get
        End Property
        
        Friend ReadOnly Property territoryColumn As DataColumn
            Get
                Return Me.columnterritory
            End Get
        End Property
        
        Friend ReadOnly Property codeColumn As DataColumn
            Get
                Return Me.columncode
            End Get
        End Property
        
        Friend ReadOnly Property grouppColumn As DataColumn
            Get
                Return Me.columngroupp
            End Get
        End Property
        
        Friend ReadOnly Property pro_codeColumn As DataColumn
            Get
                Return Me.columnpro_code
            End Get
        End Property
        
        Friend ReadOnly Property provinceColumn As DataColumn
            Get
                Return Me.columnprovince
            End Get
        End Property
        
        Friend ReadOnly Property territoryrowidColumn As DataColumn
            Get
                Return Me.columnterritoryrowid
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As IMSB_ShowRow
            Get
                Return CType(Me.Rows(index),IMSB_ShowRow)
            End Get
        End Property
        
        Public Event IMSB_ShowRowChanged As IMSB_ShowRowChangeEventHandler
        
        Public Event IMSB_ShowRowChanging As IMSB_ShowRowChangeEventHandler
        
        Public Event IMSB_ShowRowDeleted As IMSB_ShowRowChangeEventHandler
        
        Public Event IMSB_ShowRowDeleting As IMSB_ShowRowChangeEventHandler
        
        Public Overloads Sub AddIMSB_ShowRow(ByVal row As IMSB_ShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddIMSB_ShowRow(ByVal imsbrickcode As String, ByVal imsbrickdesc As String, ByVal territorycode As String, ByVal territory As String, ByVal code As String, ByVal groupp As String, ByVal pro_code As String, ByVal province As String, ByVal territoryrowid As String) As IMSB_ShowRow
            Dim rowIMSB_ShowRow As IMSB_ShowRow = CType(Me.NewRow,IMSB_ShowRow)
            rowIMSB_ShowRow.ItemArray = New Object() {imsbrickcode, imsbrickdesc, territorycode, territory, code, groupp, pro_code, province, territoryrowid}
            Me.Rows.Add(rowIMSB_ShowRow)
            Return rowIMSB_ShowRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As IMSB_ShowDataTable = CType(MyBase.Clone,IMSB_ShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New IMSB_ShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnimsbrickcode = Me.Columns("imsbrickcode")
            Me.columnimsbrickdesc = Me.Columns("imsbrickdesc")
            Me.columnterritorycode = Me.Columns("territorycode")
            Me.columnterritory = Me.Columns("territory")
            Me.columncode = Me.Columns("code")
            Me.columngroupp = Me.Columns("groupp")
            Me.columnpro_code = Me.Columns("pro_code")
            Me.columnprovince = Me.Columns("province")
            Me.columnterritoryrowid = Me.Columns("territoryrowid")
        End Sub
        
        Private Sub InitClass()
            Me.columnimsbrickcode = New DataColumn("imsbrickcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnimsbrickcode)
            Me.columnimsbrickdesc = New DataColumn("imsbrickdesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnimsbrickdesc)
            Me.columnterritorycode = New DataColumn("territorycode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnterritorycode)
            Me.columnterritory = New DataColumn("territory", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnterritory)
            Me.columncode = New DataColumn("code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncode)
            Me.columngroupp = New DataColumn("groupp", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngroupp)
            Me.columnpro_code = New DataColumn("pro_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpro_code)
            Me.columnprovince = New DataColumn("province", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprovince)
            Me.columnterritoryrowid = New DataColumn("territoryrowid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnterritoryrowid)
        End Sub
        
        Public Function NewIMSB_ShowRow() As IMSB_ShowRow
            Return CType(Me.NewRow,IMSB_ShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New IMSB_ShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(IMSB_ShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IMSB_ShowRowChangedEvent) Is Nothing) Then
                RaiseEvent IMSB_ShowRowChanged(Me, New IMSB_ShowRowChangeEvent(CType(e.Row,IMSB_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IMSB_ShowRowChangingEvent) Is Nothing) Then
                RaiseEvent IMSB_ShowRowChanging(Me, New IMSB_ShowRowChangeEvent(CType(e.Row,IMSB_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IMSB_ShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent IMSB_ShowRowDeleted(Me, New IMSB_ShowRowChangeEvent(CType(e.Row,IMSB_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IMSB_ShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent IMSB_ShowRowDeleting(Me, New IMSB_ShowRowChangeEvent(CType(e.Row,IMSB_ShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveIMSB_ShowRow(ByVal row As IMSB_ShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class IMSB_ShowRow
        Inherits DataRow
        
        Private tableIMSB_Show As IMSB_ShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableIMSB_Show = CType(Me.Table,IMSB_ShowDataTable)
        End Sub
        
        Public Property imsbrickcode As String
            Get
                Try 
                    Return CType(Me(Me.tableIMSB_Show.imsbrickcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMSB_Show.imsbrickcodeColumn) = value
            End Set
        End Property
        
        Public Property imsbrickdesc As String
            Get
                Try 
                    Return CType(Me(Me.tableIMSB_Show.imsbrickdescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMSB_Show.imsbrickdescColumn) = value
            End Set
        End Property
        
        Public Property territorycode As String
            Get
                Try 
                    Return CType(Me(Me.tableIMSB_Show.territorycodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMSB_Show.territorycodeColumn) = value
            End Set
        End Property
        
        Public Property territory As String
            Get
                Try 
                    Return CType(Me(Me.tableIMSB_Show.territoryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMSB_Show.territoryColumn) = value
            End Set
        End Property
        
        Public Property code As String
            Get
                Try 
                    Return CType(Me(Me.tableIMSB_Show.codeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMSB_Show.codeColumn) = value
            End Set
        End Property
        
        Public Property groupp As String
            Get
                Try 
                    Return CType(Me(Me.tableIMSB_Show.grouppColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMSB_Show.grouppColumn) = value
            End Set
        End Property
        
        Public Property pro_code As String
            Get
                Try 
                    Return CType(Me(Me.tableIMSB_Show.pro_codeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMSB_Show.pro_codeColumn) = value
            End Set
        End Property
        
        Public Property province As String
            Get
                Try 
                    Return CType(Me(Me.tableIMSB_Show.provinceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMSB_Show.provinceColumn) = value
            End Set
        End Property
        
        Public Property territoryrowid As String
            Get
                Try 
                    Return CType(Me(Me.tableIMSB_Show.territoryrowidColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMSB_Show.territoryrowidColumn) = value
            End Set
        End Property
        
        Public Function IsimsbrickcodeNull() As Boolean
            Return Me.IsNull(Me.tableIMSB_Show.imsbrickcodeColumn)
        End Function
        
        Public Sub SetimsbrickcodeNull()
            Me(Me.tableIMSB_Show.imsbrickcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsimsbrickdescNull() As Boolean
            Return Me.IsNull(Me.tableIMSB_Show.imsbrickdescColumn)
        End Function
        
        Public Sub SetimsbrickdescNull()
            Me(Me.tableIMSB_Show.imsbrickdescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsterritorycodeNull() As Boolean
            Return Me.IsNull(Me.tableIMSB_Show.territorycodeColumn)
        End Function
        
        Public Sub SetterritorycodeNull()
            Me(Me.tableIMSB_Show.territorycodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsterritoryNull() As Boolean
            Return Me.IsNull(Me.tableIMSB_Show.territoryColumn)
        End Function
        
        Public Sub SetterritoryNull()
            Me(Me.tableIMSB_Show.territoryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscodeNull() As Boolean
            Return Me.IsNull(Me.tableIMSB_Show.codeColumn)
        End Function
        
        Public Sub SetcodeNull()
            Me(Me.tableIMSB_Show.codeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsgrouppNull() As Boolean
            Return Me.IsNull(Me.tableIMSB_Show.grouppColumn)
        End Function
        
        Public Sub SetgrouppNull()
            Me(Me.tableIMSB_Show.grouppColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispro_codeNull() As Boolean
            Return Me.IsNull(Me.tableIMSB_Show.pro_codeColumn)
        End Function
        
        Public Sub Setpro_codeNull()
            Me(Me.tableIMSB_Show.pro_codeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsprovinceNull() As Boolean
            Return Me.IsNull(Me.tableIMSB_Show.provinceColumn)
        End Function
        
        Public Sub SetprovinceNull()
            Me(Me.tableIMSB_Show.provinceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsterritoryrowidNull() As Boolean
            Return Me.IsNull(Me.tableIMSB_Show.territoryrowidColumn)
        End Function
        
        Public Sub SetterritoryrowidNull()
            Me(Me.tableIMSB_Show.territoryrowidColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class IMSB_ShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As IMSB_ShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As IMSB_ShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As IMSB_ShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TerritoryLstDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnrowid As DataColumn
        
        Private columnterritorycode As DataColumn
        
        Private columnterritory As DataColumn
        
        Private columngroupc As DataColumn
        
        Private columngroupd As DataColumn
        
        Private columnprovincec As DataColumn
        
        Private columnprovinced As DataColumn
        
        Friend Sub New()
            MyBase.New("TerritoryLst")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property rowidColumn As DataColumn
            Get
                Return Me.columnrowid
            End Get
        End Property
        
        Friend ReadOnly Property territorycodeColumn As DataColumn
            Get
                Return Me.columnterritorycode
            End Get
        End Property
        
        Friend ReadOnly Property territoryColumn As DataColumn
            Get
                Return Me.columnterritory
            End Get
        End Property
        
        Friend ReadOnly Property groupcColumn As DataColumn
            Get
                Return Me.columngroupc
            End Get
        End Property
        
        Friend ReadOnly Property groupdColumn As DataColumn
            Get
                Return Me.columngroupd
            End Get
        End Property
        
        Friend ReadOnly Property provincecColumn As DataColumn
            Get
                Return Me.columnprovincec
            End Get
        End Property
        
        Friend ReadOnly Property provincedColumn As DataColumn
            Get
                Return Me.columnprovinced
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TerritoryLstRow
            Get
                Return CType(Me.Rows(index),TerritoryLstRow)
            End Get
        End Property
        
        Public Event TerritoryLstRowChanged As TerritoryLstRowChangeEventHandler
        
        Public Event TerritoryLstRowChanging As TerritoryLstRowChangeEventHandler
        
        Public Event TerritoryLstRowDeleted As TerritoryLstRowChangeEventHandler
        
        Public Event TerritoryLstRowDeleting As TerritoryLstRowChangeEventHandler
        
        Public Overloads Sub AddTerritoryLstRow(ByVal row As TerritoryLstRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTerritoryLstRow(ByVal rowid As Single, ByVal territorycode As String, ByVal territory As String, ByVal groupc As String, ByVal groupd As String, ByVal provincec As String, ByVal provinced As String) As TerritoryLstRow
            Dim rowTerritoryLstRow As TerritoryLstRow = CType(Me.NewRow,TerritoryLstRow)
            rowTerritoryLstRow.ItemArray = New Object() {rowid, territorycode, territory, groupc, groupd, provincec, provinced}
            Me.Rows.Add(rowTerritoryLstRow)
            Return rowTerritoryLstRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TerritoryLstDataTable = CType(MyBase.Clone,TerritoryLstDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TerritoryLstDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnrowid = Me.Columns("rowid")
            Me.columnterritorycode = Me.Columns("territorycode")
            Me.columnterritory = Me.Columns("territory")
            Me.columngroupc = Me.Columns("groupc")
            Me.columngroupd = Me.Columns("groupd")
            Me.columnprovincec = Me.Columns("provincec")
            Me.columnprovinced = Me.Columns("provinced")
        End Sub
        
        Private Sub InitClass()
            Me.columnrowid = New DataColumn("rowid", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrowid)
            Me.columnterritorycode = New DataColumn("territorycode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnterritorycode)
            Me.columnterritory = New DataColumn("territory", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnterritory)
            Me.columngroupc = New DataColumn("groupc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngroupc)
            Me.columngroupd = New DataColumn("groupd", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngroupd)
            Me.columnprovincec = New DataColumn("provincec", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprovincec)
            Me.columnprovinced = New DataColumn("provinced", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprovinced)
        End Sub
        
        Public Function NewTerritoryLstRow() As TerritoryLstRow
            Return CType(Me.NewRow,TerritoryLstRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TerritoryLstRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TerritoryLstRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TerritoryLstRowChangedEvent) Is Nothing) Then
                RaiseEvent TerritoryLstRowChanged(Me, New TerritoryLstRowChangeEvent(CType(e.Row,TerritoryLstRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TerritoryLstRowChangingEvent) Is Nothing) Then
                RaiseEvent TerritoryLstRowChanging(Me, New TerritoryLstRowChangeEvent(CType(e.Row,TerritoryLstRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TerritoryLstRowDeletedEvent) Is Nothing) Then
                RaiseEvent TerritoryLstRowDeleted(Me, New TerritoryLstRowChangeEvent(CType(e.Row,TerritoryLstRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TerritoryLstRowDeletingEvent) Is Nothing) Then
                RaiseEvent TerritoryLstRowDeleting(Me, New TerritoryLstRowChangeEvent(CType(e.Row,TerritoryLstRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTerritoryLstRow(ByVal row As TerritoryLstRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TerritoryLstRow
        Inherits DataRow
        
        Private tableTerritoryLst As TerritoryLstDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTerritoryLst = CType(Me.Table,TerritoryLstDataTable)
        End Sub
        
        Public Property rowid As Single
            Get
                Try 
                    Return CType(Me(Me.tableTerritoryLst.rowidColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTerritoryLst.rowidColumn) = value
            End Set
        End Property
        
        Public Property territorycode As String
            Get
                Try 
                    Return CType(Me(Me.tableTerritoryLst.territorycodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTerritoryLst.territorycodeColumn) = value
            End Set
        End Property
        
        Public Property territory As String
            Get
                Try 
                    Return CType(Me(Me.tableTerritoryLst.territoryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTerritoryLst.territoryColumn) = value
            End Set
        End Property
        
        Public Property groupc As String
            Get
                Try 
                    Return CType(Me(Me.tableTerritoryLst.groupcColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTerritoryLst.groupcColumn) = value
            End Set
        End Property
        
        Public Property groupd As String
            Get
                Try 
                    Return CType(Me(Me.tableTerritoryLst.groupdColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTerritoryLst.groupdColumn) = value
            End Set
        End Property
        
        Public Property provincec As String
            Get
                Try 
                    Return CType(Me(Me.tableTerritoryLst.provincecColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTerritoryLst.provincecColumn) = value
            End Set
        End Property
        
        Public Property provinced As String
            Get
                Try 
                    Return CType(Me(Me.tableTerritoryLst.provincedColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTerritoryLst.provincedColumn) = value
            End Set
        End Property
        
        Public Function IsrowidNull() As Boolean
            Return Me.IsNull(Me.tableTerritoryLst.rowidColumn)
        End Function
        
        Public Sub SetrowidNull()
            Me(Me.tableTerritoryLst.rowidColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsterritorycodeNull() As Boolean
            Return Me.IsNull(Me.tableTerritoryLst.territorycodeColumn)
        End Function
        
        Public Sub SetterritorycodeNull()
            Me(Me.tableTerritoryLst.territorycodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsterritoryNull() As Boolean
            Return Me.IsNull(Me.tableTerritoryLst.territoryColumn)
        End Function
        
        Public Sub SetterritoryNull()
            Me(Me.tableTerritoryLst.territoryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsgroupcNull() As Boolean
            Return Me.IsNull(Me.tableTerritoryLst.groupcColumn)
        End Function
        
        Public Sub SetgroupcNull()
            Me(Me.tableTerritoryLst.groupcColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsgroupdNull() As Boolean
            Return Me.IsNull(Me.tableTerritoryLst.groupdColumn)
        End Function
        
        Public Sub SetgroupdNull()
            Me(Me.tableTerritoryLst.groupdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsprovincecNull() As Boolean
            Return Me.IsNull(Me.tableTerritoryLst.provincecColumn)
        End Function
        
        Public Sub SetprovincecNull()
            Me(Me.tableTerritoryLst.provincecColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsprovincedNull() As Boolean
            Return Me.IsNull(Me.tableTerritoryLst.provincedColumn)
        End Function
        
        Public Sub SetprovincedNull()
            Me(Me.tableTerritoryLst.provincedColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TerritoryLstRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TerritoryLstRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TerritoryLstRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TerritoryLstRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ExcludeCustomerZue_ShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnRowid As DataColumn
        
        Private columnCustomerCode As DataColumn
        
        Private columnCustomerName As DataColumn
        
        Private columnSalesClass As DataColumn
        
        Private columnSubSubSaleType As DataColumn
        
        Private columnStart_Date As DataColumn
        
        Private columnEnd_Date As DataColumn
        
        Private columnCreateDate As DataColumn
        
        Private columnUpdateDate As DataColumn
        
        Private columnLastUser As DataColumn
        
        Friend Sub New()
            MyBase.New("ExcludeCustomerZue_Show")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property RowidColumn As DataColumn
            Get
                Return Me.columnRowid
            End Get
        End Property
        
        Friend ReadOnly Property CustomerCodeColumn As DataColumn
            Get
                Return Me.columnCustomerCode
            End Get
        End Property
        
        Friend ReadOnly Property CustomerNameColumn As DataColumn
            Get
                Return Me.columnCustomerName
            End Get
        End Property
        
        Friend ReadOnly Property SalesClassColumn As DataColumn
            Get
                Return Me.columnSalesClass
            End Get
        End Property
        
        Friend ReadOnly Property SubSubSaleTypeColumn As DataColumn
            Get
                Return Me.columnSubSubSaleType
            End Get
        End Property
        
        Friend ReadOnly Property Start_DateColumn As DataColumn
            Get
                Return Me.columnStart_Date
            End Get
        End Property
        
        Friend ReadOnly Property End_DateColumn As DataColumn
            Get
                Return Me.columnEnd_Date
            End Get
        End Property
        
        Friend ReadOnly Property CreateDateColumn As DataColumn
            Get
                Return Me.columnCreateDate
            End Get
        End Property
        
        Friend ReadOnly Property UpdateDateColumn As DataColumn
            Get
                Return Me.columnUpdateDate
            End Get
        End Property
        
        Friend ReadOnly Property LastUserColumn As DataColumn
            Get
                Return Me.columnLastUser
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ExcludeCustomerZue_ShowRow
            Get
                Return CType(Me.Rows(index),ExcludeCustomerZue_ShowRow)
            End Get
        End Property
        
        Public Event ExcludeCustomerZue_ShowRowChanged As ExcludeCustomerZue_ShowRowChangeEventHandler
        
        Public Event ExcludeCustomerZue_ShowRowChanging As ExcludeCustomerZue_ShowRowChangeEventHandler
        
        Public Event ExcludeCustomerZue_ShowRowDeleted As ExcludeCustomerZue_ShowRowChangeEventHandler
        
        Public Event ExcludeCustomerZue_ShowRowDeleting As ExcludeCustomerZue_ShowRowChangeEventHandler
        
        Public Overloads Sub AddExcludeCustomerZue_ShowRow(ByVal row As ExcludeCustomerZue_ShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddExcludeCustomerZue_ShowRow(ByVal Rowid As Integer, ByVal CustomerCode As String, ByVal CustomerName As String, ByVal SalesClass As String, ByVal SubSubSaleType As String, ByVal Start_Date As Date, ByVal End_Date As Date, ByVal CreateDate As Date, ByVal UpdateDate As Date, ByVal LastUser As String) As ExcludeCustomerZue_ShowRow
            Dim rowExcludeCustomerZue_ShowRow As ExcludeCustomerZue_ShowRow = CType(Me.NewRow,ExcludeCustomerZue_ShowRow)
            rowExcludeCustomerZue_ShowRow.ItemArray = New Object() {Rowid, CustomerCode, CustomerName, SalesClass, SubSubSaleType, Start_Date, End_Date, CreateDate, UpdateDate, LastUser}
            Me.Rows.Add(rowExcludeCustomerZue_ShowRow)
            Return rowExcludeCustomerZue_ShowRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ExcludeCustomerZue_ShowDataTable = CType(MyBase.Clone,ExcludeCustomerZue_ShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ExcludeCustomerZue_ShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnRowid = Me.Columns("Rowid")
            Me.columnCustomerCode = Me.Columns("CustomerCode")
            Me.columnCustomerName = Me.Columns("CustomerName")
            Me.columnSalesClass = Me.Columns("SalesClass")
            Me.columnSubSubSaleType = Me.Columns("SubSubSaleType")
            Me.columnStart_Date = Me.Columns("Start_Date")
            Me.columnEnd_Date = Me.Columns("End_Date")
            Me.columnCreateDate = Me.Columns("CreateDate")
            Me.columnUpdateDate = Me.Columns("UpdateDate")
            Me.columnLastUser = Me.Columns("LastUser")
        End Sub
        
        Private Sub InitClass()
            Me.columnRowid = New DataColumn("Rowid", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRowid)
            Me.columnCustomerCode = New DataColumn("CustomerCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCustomerCode)
            Me.columnCustomerName = New DataColumn("CustomerName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCustomerName)
            Me.columnSalesClass = New DataColumn("SalesClass", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSalesClass)
            Me.columnSubSubSaleType = New DataColumn("SubSubSaleType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSubSubSaleType)
            Me.columnStart_Date = New DataColumn("Start_Date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStart_Date)
            Me.columnEnd_Date = New DataColumn("End_Date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEnd_Date)
            Me.columnCreateDate = New DataColumn("CreateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreateDate)
            Me.columnUpdateDate = New DataColumn("UpdateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUpdateDate)
            Me.columnLastUser = New DataColumn("LastUser", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLastUser)
        End Sub
        
        Public Function NewExcludeCustomerZue_ShowRow() As ExcludeCustomerZue_ShowRow
            Return CType(Me.NewRow,ExcludeCustomerZue_ShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ExcludeCustomerZue_ShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ExcludeCustomerZue_ShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ExcludeCustomerZue_ShowRowChangedEvent) Is Nothing) Then
                RaiseEvent ExcludeCustomerZue_ShowRowChanged(Me, New ExcludeCustomerZue_ShowRowChangeEvent(CType(e.Row,ExcludeCustomerZue_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ExcludeCustomerZue_ShowRowChangingEvent) Is Nothing) Then
                RaiseEvent ExcludeCustomerZue_ShowRowChanging(Me, New ExcludeCustomerZue_ShowRowChangeEvent(CType(e.Row,ExcludeCustomerZue_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ExcludeCustomerZue_ShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent ExcludeCustomerZue_ShowRowDeleted(Me, New ExcludeCustomerZue_ShowRowChangeEvent(CType(e.Row,ExcludeCustomerZue_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ExcludeCustomerZue_ShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent ExcludeCustomerZue_ShowRowDeleting(Me, New ExcludeCustomerZue_ShowRowChangeEvent(CType(e.Row,ExcludeCustomerZue_ShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveExcludeCustomerZue_ShowRow(ByVal row As ExcludeCustomerZue_ShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ExcludeCustomerZue_ShowRow
        Inherits DataRow
        
        Private tableExcludeCustomerZue_Show As ExcludeCustomerZue_ShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableExcludeCustomerZue_Show = CType(Me.Table,ExcludeCustomerZue_ShowDataTable)
        End Sub
        
        Public Property Rowid As Integer
            Get
                Try 
                    Return CType(Me(Me.tableExcludeCustomerZue_Show.RowidColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExcludeCustomerZue_Show.RowidColumn) = value
            End Set
        End Property
        
        Public Property CustomerCode As String
            Get
                Try 
                    Return CType(Me(Me.tableExcludeCustomerZue_Show.CustomerCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExcludeCustomerZue_Show.CustomerCodeColumn) = value
            End Set
        End Property
        
        Public Property CustomerName As String
            Get
                Try 
                    Return CType(Me(Me.tableExcludeCustomerZue_Show.CustomerNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExcludeCustomerZue_Show.CustomerNameColumn) = value
            End Set
        End Property
        
        Public Property SalesClass As String
            Get
                Try 
                    Return CType(Me(Me.tableExcludeCustomerZue_Show.SalesClassColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExcludeCustomerZue_Show.SalesClassColumn) = value
            End Set
        End Property
        
        Public Property SubSubSaleType As String
            Get
                Try 
                    Return CType(Me(Me.tableExcludeCustomerZue_Show.SubSubSaleTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExcludeCustomerZue_Show.SubSubSaleTypeColumn) = value
            End Set
        End Property
        
        Public Property Start_Date As Date
            Get
                Try 
                    Return CType(Me(Me.tableExcludeCustomerZue_Show.Start_DateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExcludeCustomerZue_Show.Start_DateColumn) = value
            End Set
        End Property
        
        Public Property End_Date As Date
            Get
                Try 
                    Return CType(Me(Me.tableExcludeCustomerZue_Show.End_DateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExcludeCustomerZue_Show.End_DateColumn) = value
            End Set
        End Property
        
        Public Property CreateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableExcludeCustomerZue_Show.CreateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExcludeCustomerZue_Show.CreateDateColumn) = value
            End Set
        End Property
        
        Public Property UpdateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableExcludeCustomerZue_Show.UpdateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExcludeCustomerZue_Show.UpdateDateColumn) = value
            End Set
        End Property
        
        Public Property LastUser As String
            Get
                Try 
                    Return CType(Me(Me.tableExcludeCustomerZue_Show.LastUserColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExcludeCustomerZue_Show.LastUserColumn) = value
            End Set
        End Property
        
        Public Function IsRowidNull() As Boolean
            Return Me.IsNull(Me.tableExcludeCustomerZue_Show.RowidColumn)
        End Function
        
        Public Sub SetRowidNull()
            Me(Me.tableExcludeCustomerZue_Show.RowidColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCustomerCodeNull() As Boolean
            Return Me.IsNull(Me.tableExcludeCustomerZue_Show.CustomerCodeColumn)
        End Function
        
        Public Sub SetCustomerCodeNull()
            Me(Me.tableExcludeCustomerZue_Show.CustomerCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCustomerNameNull() As Boolean
            Return Me.IsNull(Me.tableExcludeCustomerZue_Show.CustomerNameColumn)
        End Function
        
        Public Sub SetCustomerNameNull()
            Me(Me.tableExcludeCustomerZue_Show.CustomerNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSalesClassNull() As Boolean
            Return Me.IsNull(Me.tableExcludeCustomerZue_Show.SalesClassColumn)
        End Function
        
        Public Sub SetSalesClassNull()
            Me(Me.tableExcludeCustomerZue_Show.SalesClassColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSubSubSaleTypeNull() As Boolean
            Return Me.IsNull(Me.tableExcludeCustomerZue_Show.SubSubSaleTypeColumn)
        End Function
        
        Public Sub SetSubSubSaleTypeNull()
            Me(Me.tableExcludeCustomerZue_Show.SubSubSaleTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStart_DateNull() As Boolean
            Return Me.IsNull(Me.tableExcludeCustomerZue_Show.Start_DateColumn)
        End Function
        
        Public Sub SetStart_DateNull()
            Me(Me.tableExcludeCustomerZue_Show.Start_DateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEnd_DateNull() As Boolean
            Return Me.IsNull(Me.tableExcludeCustomerZue_Show.End_DateColumn)
        End Function
        
        Public Sub SetEnd_DateNull()
            Me(Me.tableExcludeCustomerZue_Show.End_DateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreateDateNull() As Boolean
            Return Me.IsNull(Me.tableExcludeCustomerZue_Show.CreateDateColumn)
        End Function
        
        Public Sub SetCreateDateNull()
            Me(Me.tableExcludeCustomerZue_Show.CreateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUpdateDateNull() As Boolean
            Return Me.IsNull(Me.tableExcludeCustomerZue_Show.UpdateDateColumn)
        End Function
        
        Public Sub SetUpdateDateNull()
            Me(Me.tableExcludeCustomerZue_Show.UpdateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLastUserNull() As Boolean
            Return Me.IsNull(Me.tableExcludeCustomerZue_Show.LastUserColumn)
        End Function
        
        Public Sub SetLastUserNull()
            Me(Me.tableExcludeCustomerZue_Show.LastUserColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ExcludeCustomerZue_ShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ExcludeCustomerZue_ShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ExcludeCustomerZue_ShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ExcludeCustomerZue_ShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cboListDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columntmpcode As DataColumn
        
        Private columntmpdesc As DataColumn
        
        Private columntmphire As DataColumn
        
        Private columntmpresign As DataColumn
        
        Friend Sub New()
            MyBase.New("cboList")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property tmpcodeColumn As DataColumn
            Get
                Return Me.columntmpcode
            End Get
        End Property
        
        Friend ReadOnly Property tmpdescColumn As DataColumn
            Get
                Return Me.columntmpdesc
            End Get
        End Property
        
        Friend ReadOnly Property tmphireColumn As DataColumn
            Get
                Return Me.columntmphire
            End Get
        End Property
        
        Friend ReadOnly Property tmpresignColumn As DataColumn
            Get
                Return Me.columntmpresign
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As cboListRow
            Get
                Return CType(Me.Rows(index),cboListRow)
            End Get
        End Property
        
        Public Event cboListRowChanged As cboListRowChangeEventHandler
        
        Public Event cboListRowChanging As cboListRowChangeEventHandler
        
        Public Event cboListRowDeleted As cboListRowChangeEventHandler
        
        Public Event cboListRowDeleting As cboListRowChangeEventHandler
        
        Public Overloads Sub AddcboListRow(ByVal row As cboListRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddcboListRow(ByVal tmpcode As String, ByVal tmpdesc As String, ByVal tmphire As Date, ByVal tmpresign As Date) As cboListRow
            Dim rowcboListRow As cboListRow = CType(Me.NewRow,cboListRow)
            rowcboListRow.ItemArray = New Object() {tmpcode, tmpdesc, tmphire, tmpresign}
            Me.Rows.Add(rowcboListRow)
            Return rowcboListRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As cboListDataTable = CType(MyBase.Clone,cboListDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New cboListDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columntmpcode = Me.Columns("tmpcode")
            Me.columntmpdesc = Me.Columns("tmpdesc")
            Me.columntmphire = Me.Columns("tmphire")
            Me.columntmpresign = Me.Columns("tmpresign")
        End Sub
        
        Private Sub InitClass()
            Me.columntmpcode = New DataColumn("tmpcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntmpcode)
            Me.columntmpdesc = New DataColumn("tmpdesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntmpdesc)
            Me.columntmphire = New DataColumn("tmphire", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntmphire)
            Me.columntmpresign = New DataColumn("tmpresign", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntmpresign)
        End Sub
        
        Public Function NewcboListRow() As cboListRow
            Return CType(Me.NewRow,cboListRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New cboListRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(cboListRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.cboListRowChangedEvent) Is Nothing) Then
                RaiseEvent cboListRowChanged(Me, New cboListRowChangeEvent(CType(e.Row,cboListRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.cboListRowChangingEvent) Is Nothing) Then
                RaiseEvent cboListRowChanging(Me, New cboListRowChangeEvent(CType(e.Row,cboListRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.cboListRowDeletedEvent) Is Nothing) Then
                RaiseEvent cboListRowDeleted(Me, New cboListRowChangeEvent(CType(e.Row,cboListRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.cboListRowDeletingEvent) Is Nothing) Then
                RaiseEvent cboListRowDeleting(Me, New cboListRowChangeEvent(CType(e.Row,cboListRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovecboListRow(ByVal row As cboListRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cboListRow
        Inherits DataRow
        
        Private tablecboList As cboListDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablecboList = CType(Me.Table,cboListDataTable)
        End Sub
        
        Public Property tmpcode As String
            Get
                Try 
                    Return CType(Me(Me.tablecboList.tmpcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecboList.tmpcodeColumn) = value
            End Set
        End Property
        
        Public Property tmpdesc As String
            Get
                Try 
                    Return CType(Me(Me.tablecboList.tmpdescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecboList.tmpdescColumn) = value
            End Set
        End Property
        
        Public Property tmphire As Date
            Get
                Try 
                    Return CType(Me(Me.tablecboList.tmphireColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecboList.tmphireColumn) = value
            End Set
        End Property
        
        Public Property tmpresign As Date
            Get
                Try 
                    Return CType(Me(Me.tablecboList.tmpresignColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecboList.tmpresignColumn) = value
            End Set
        End Property
        
        Public Function IstmpcodeNull() As Boolean
            Return Me.IsNull(Me.tablecboList.tmpcodeColumn)
        End Function
        
        Public Sub SettmpcodeNull()
            Me(Me.tablecboList.tmpcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstmpdescNull() As Boolean
            Return Me.IsNull(Me.tablecboList.tmpdescColumn)
        End Function
        
        Public Sub SettmpdescNull()
            Me(Me.tablecboList.tmpdescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstmphireNull() As Boolean
            Return Me.IsNull(Me.tablecboList.tmphireColumn)
        End Function
        
        Public Sub SettmphireNull()
            Me(Me.tablecboList.tmphireColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstmpresignNull() As Boolean
            Return Me.IsNull(Me.tablecboList.tmpresignColumn)
        End Function
        
        Public Sub SettmpresignNull()
            Me(Me.tablecboList.tmpresignColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cboListRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As cboListRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As cboListRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As cboListRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class dg4listDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnfld1 As DataColumn
        
        Private columnfld2 As DataColumn
        
        Private columnfld3 As DataColumn
        
        Private columnfld4 As DataColumn
        
        Private columnfld5 As DataColumn
        
        Private columnfld6 As DataColumn
        
        Private columnfld7 As DataColumn
        
        Private columnfld8 As DataColumn
        
        Private columnfld9 As DataColumn
        
        Private columnfld10 As DataColumn
        
        Private columnfld11 As DataColumn
        
        Private columnfld12 As DataColumn
        
        Private columnfld13 As DataColumn
        
        Private columnfld14 As DataColumn
        
        Private columnfld15 As DataColumn
        
        Friend Sub New()
            MyBase.New("dg4list")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property fld1Column As DataColumn
            Get
                Return Me.columnfld1
            End Get
        End Property
        
        Friend ReadOnly Property fld2Column As DataColumn
            Get
                Return Me.columnfld2
            End Get
        End Property
        
        Friend ReadOnly Property fld3Column As DataColumn
            Get
                Return Me.columnfld3
            End Get
        End Property
        
        Friend ReadOnly Property fld4Column As DataColumn
            Get
                Return Me.columnfld4
            End Get
        End Property
        
        Friend ReadOnly Property fld5Column As DataColumn
            Get
                Return Me.columnfld5
            End Get
        End Property
        
        Friend ReadOnly Property fld6Column As DataColumn
            Get
                Return Me.columnfld6
            End Get
        End Property
        
        Friend ReadOnly Property fld7Column As DataColumn
            Get
                Return Me.columnfld7
            End Get
        End Property
        
        Friend ReadOnly Property fld8Column As DataColumn
            Get
                Return Me.columnfld8
            End Get
        End Property
        
        Friend ReadOnly Property fld9Column As DataColumn
            Get
                Return Me.columnfld9
            End Get
        End Property
        
        Friend ReadOnly Property fld10Column As DataColumn
            Get
                Return Me.columnfld10
            End Get
        End Property
        
        Friend ReadOnly Property fld11Column As DataColumn
            Get
                Return Me.columnfld11
            End Get
        End Property
        
        Friend ReadOnly Property fld12Column As DataColumn
            Get
                Return Me.columnfld12
            End Get
        End Property
        
        Friend ReadOnly Property fld13Column As DataColumn
            Get
                Return Me.columnfld13
            End Get
        End Property
        
        Friend ReadOnly Property fld14Column As DataColumn
            Get
                Return Me.columnfld14
            End Get
        End Property
        
        Friend ReadOnly Property fld15Column As DataColumn
            Get
                Return Me.columnfld15
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As dg4listRow
            Get
                Return CType(Me.Rows(index),dg4listRow)
            End Get
        End Property
        
        Public Event dg4listRowChanged As dg4listRowChangeEventHandler
        
        Public Event dg4listRowChanging As dg4listRowChangeEventHandler
        
        Public Event dg4listRowDeleted As dg4listRowChangeEventHandler
        
        Public Event dg4listRowDeleting As dg4listRowChangeEventHandler
        
        Public Overloads Sub Adddg4listRow(ByVal row As dg4listRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Adddg4listRow(ByVal fld1 As String, ByVal fld2 As String, ByVal fld3 As String, ByVal fld4 As String, ByVal fld5 As String, ByVal fld6 As String, ByVal fld7 As String, ByVal fld8 As String, ByVal fld9 As String, ByVal fld10 As String, ByVal fld11 As String, ByVal fld12 As String, ByVal fld13 As String, ByVal fld14 As String, ByVal fld15 As String) As dg4listRow
            Dim rowdg4listRow As dg4listRow = CType(Me.NewRow,dg4listRow)
            rowdg4listRow.ItemArray = New Object() {fld1, fld2, fld3, fld4, fld5, fld6, fld7, fld8, fld9, fld10, fld11, fld12, fld13, fld14, fld15}
            Me.Rows.Add(rowdg4listRow)
            Return rowdg4listRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As dg4listDataTable = CType(MyBase.Clone,dg4listDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New dg4listDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnfld1 = Me.Columns("fld1")
            Me.columnfld2 = Me.Columns("fld2")
            Me.columnfld3 = Me.Columns("fld3")
            Me.columnfld4 = Me.Columns("fld4")
            Me.columnfld5 = Me.Columns("fld5")
            Me.columnfld6 = Me.Columns("fld6")
            Me.columnfld7 = Me.Columns("fld7")
            Me.columnfld8 = Me.Columns("fld8")
            Me.columnfld9 = Me.Columns("fld9")
            Me.columnfld10 = Me.Columns("fld10")
            Me.columnfld11 = Me.Columns("fld11")
            Me.columnfld12 = Me.Columns("fld12")
            Me.columnfld13 = Me.Columns("fld13")
            Me.columnfld14 = Me.Columns("fld14")
            Me.columnfld15 = Me.Columns("fld15")
        End Sub
        
        Private Sub InitClass()
            Me.columnfld1 = New DataColumn("fld1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld1)
            Me.columnfld2 = New DataColumn("fld2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld2)
            Me.columnfld3 = New DataColumn("fld3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld3)
            Me.columnfld4 = New DataColumn("fld4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld4)
            Me.columnfld5 = New DataColumn("fld5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld5)
            Me.columnfld6 = New DataColumn("fld6", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld6)
            Me.columnfld7 = New DataColumn("fld7", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld7)
            Me.columnfld8 = New DataColumn("fld8", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld8)
            Me.columnfld9 = New DataColumn("fld9", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld9)
            Me.columnfld10 = New DataColumn("fld10", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld10)
            Me.columnfld11 = New DataColumn("fld11", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld11)
            Me.columnfld12 = New DataColumn("fld12", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld12)
            Me.columnfld13 = New DataColumn("fld13", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld13)
            Me.columnfld14 = New DataColumn("fld14", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld14)
            Me.columnfld15 = New DataColumn("fld15", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld15)
        End Sub
        
        Public Function Newdg4listRow() As dg4listRow
            Return CType(Me.NewRow,dg4listRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New dg4listRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(dg4listRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dg4listRowChangedEvent) Is Nothing) Then
                RaiseEvent dg4listRowChanged(Me, New dg4listRowChangeEvent(CType(e.Row,dg4listRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dg4listRowChangingEvent) Is Nothing) Then
                RaiseEvent dg4listRowChanging(Me, New dg4listRowChangeEvent(CType(e.Row,dg4listRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dg4listRowDeletedEvent) Is Nothing) Then
                RaiseEvent dg4listRowDeleted(Me, New dg4listRowChangeEvent(CType(e.Row,dg4listRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dg4listRowDeletingEvent) Is Nothing) Then
                RaiseEvent dg4listRowDeleting(Me, New dg4listRowChangeEvent(CType(e.Row,dg4listRow), e.Action))
            End If
        End Sub
        
        Public Sub Removedg4listRow(ByVal row As dg4listRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class dg4listRow
        Inherits DataRow
        
        Private tabledg4list As dg4listDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabledg4list = CType(Me.Table,dg4listDataTable)
        End Sub
        
        Public Property fld1 As String
            Get
                Try 
                    Return CType(Me(Me.tabledg4list.fld1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledg4list.fld1Column) = value
            End Set
        End Property
        
        Public Property fld2 As String
            Get
                Try 
                    Return CType(Me(Me.tabledg4list.fld2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledg4list.fld2Column) = value
            End Set
        End Property
        
        Public Property fld3 As String
            Get
                Try 
                    Return CType(Me(Me.tabledg4list.fld3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledg4list.fld3Column) = value
            End Set
        End Property
        
        Public Property fld4 As String
            Get
                Try 
                    Return CType(Me(Me.tabledg4list.fld4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledg4list.fld4Column) = value
            End Set
        End Property
        
        Public Property fld5 As String
            Get
                Try 
                    Return CType(Me(Me.tabledg4list.fld5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledg4list.fld5Column) = value
            End Set
        End Property
        
        Public Property fld6 As String
            Get
                Try 
                    Return CType(Me(Me.tabledg4list.fld6Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledg4list.fld6Column) = value
            End Set
        End Property
        
        Public Property fld7 As String
            Get
                Try 
                    Return CType(Me(Me.tabledg4list.fld7Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledg4list.fld7Column) = value
            End Set
        End Property
        
        Public Property fld8 As String
            Get
                Try 
                    Return CType(Me(Me.tabledg4list.fld8Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledg4list.fld8Column) = value
            End Set
        End Property
        
        Public Property fld9 As String
            Get
                Try 
                    Return CType(Me(Me.tabledg4list.fld9Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledg4list.fld9Column) = value
            End Set
        End Property
        
        Public Property fld10 As String
            Get
                Try 
                    Return CType(Me(Me.tabledg4list.fld10Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledg4list.fld10Column) = value
            End Set
        End Property
        
        Public Property fld11 As String
            Get
                Try 
                    Return CType(Me(Me.tabledg4list.fld11Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledg4list.fld11Column) = value
            End Set
        End Property
        
        Public Property fld12 As String
            Get
                Try 
                    Return CType(Me(Me.tabledg4list.fld12Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledg4list.fld12Column) = value
            End Set
        End Property
        
        Public Property fld13 As String
            Get
                Try 
                    Return CType(Me(Me.tabledg4list.fld13Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledg4list.fld13Column) = value
            End Set
        End Property
        
        Public Property fld14 As String
            Get
                Try 
                    Return CType(Me(Me.tabledg4list.fld14Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledg4list.fld14Column) = value
            End Set
        End Property
        
        Public Property fld15 As String
            Get
                Try 
                    Return CType(Me(Me.tabledg4list.fld15Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledg4list.fld15Column) = value
            End Set
        End Property
        
        Public Function Isfld1Null() As Boolean
            Return Me.IsNull(Me.tabledg4list.fld1Column)
        End Function
        
        Public Sub Setfld1Null()
            Me(Me.tabledg4list.fld1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld2Null() As Boolean
            Return Me.IsNull(Me.tabledg4list.fld2Column)
        End Function
        
        Public Sub Setfld2Null()
            Me(Me.tabledg4list.fld2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld3Null() As Boolean
            Return Me.IsNull(Me.tabledg4list.fld3Column)
        End Function
        
        Public Sub Setfld3Null()
            Me(Me.tabledg4list.fld3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld4Null() As Boolean
            Return Me.IsNull(Me.tabledg4list.fld4Column)
        End Function
        
        Public Sub Setfld4Null()
            Me(Me.tabledg4list.fld4Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld5Null() As Boolean
            Return Me.IsNull(Me.tabledg4list.fld5Column)
        End Function
        
        Public Sub Setfld5Null()
            Me(Me.tabledg4list.fld5Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld6Null() As Boolean
            Return Me.IsNull(Me.tabledg4list.fld6Column)
        End Function
        
        Public Sub Setfld6Null()
            Me(Me.tabledg4list.fld6Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld7Null() As Boolean
            Return Me.IsNull(Me.tabledg4list.fld7Column)
        End Function
        
        Public Sub Setfld7Null()
            Me(Me.tabledg4list.fld7Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld8Null() As Boolean
            Return Me.IsNull(Me.tabledg4list.fld8Column)
        End Function
        
        Public Sub Setfld8Null()
            Me(Me.tabledg4list.fld8Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld9Null() As Boolean
            Return Me.IsNull(Me.tabledg4list.fld9Column)
        End Function
        
        Public Sub Setfld9Null()
            Me(Me.tabledg4list.fld9Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld10Null() As Boolean
            Return Me.IsNull(Me.tabledg4list.fld10Column)
        End Function
        
        Public Sub Setfld10Null()
            Me(Me.tabledg4list.fld10Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld11Null() As Boolean
            Return Me.IsNull(Me.tabledg4list.fld11Column)
        End Function
        
        Public Sub Setfld11Null()
            Me(Me.tabledg4list.fld11Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld12Null() As Boolean
            Return Me.IsNull(Me.tabledg4list.fld12Column)
        End Function
        
        Public Sub Setfld12Null()
            Me(Me.tabledg4list.fld12Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld13Null() As Boolean
            Return Me.IsNull(Me.tabledg4list.fld13Column)
        End Function
        
        Public Sub Setfld13Null()
            Me(Me.tabledg4list.fld13Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld14Null() As Boolean
            Return Me.IsNull(Me.tabledg4list.fld14Column)
        End Function
        
        Public Sub Setfld14Null()
            Me(Me.tabledg4list.fld14Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld15Null() As Boolean
            Return Me.IsNull(Me.tabledg4list.fld15Column)
        End Function
        
        Public Sub Setfld15Null()
            Me(Me.tabledg4list.fld15Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class dg4listRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As dg4listRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As dg4listRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As dg4listRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
