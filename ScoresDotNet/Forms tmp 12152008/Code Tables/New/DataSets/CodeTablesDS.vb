'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2407
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class CodeTablesDS
    Inherits DataSet
    
    Private tableDivisionCT_Show As DivisionCT_ShowDataTable
    
    Private tableGroupCT_Show As GroupCT_ShowDataTable
    
    Private tableItemCT_Show As ItemCT_ShowDataTable
    
    Private tablePrincipal_Combo As Principal_ComboDataTable
    
    Private tableProvinceCT_Show As ProvinceCT_ShowDataTable
    
    Private tableProductLines_Combo As ProductLines_ComboDataTable
    
    Private tableMercuryBranchCT_Show As MercuryBranchCT_ShowDataTable
    
    Private tableTerritory_Combo As Territory_ComboDataTable
    
    Private tableMercuryItemCT_Show As MercuryItemCT_ShowDataTable
    
    Private tableItem_Combo As Item_ComboDataTable
    
    Private tableSubKeyProduct_Show As SubKeyProduct_ShowDataTable
    
    Private tableDivision_Combo As Division_ComboDataTable
    
    Private tableGroup_Combo As Group_ComboDataTable
    
    Private tableProvince_Combo As Province_ComboDataTable
    
    Private tableTerritoryCT_Show As TerritoryCT_ShowDataTable
    
    Private tableKeyProducts_Show As KeyProducts_ShowDataTable
    
    Private tableTeamDivisionCT_Show As TeamDivisionCT_ShowDataTable
    
    Private tableProductLinesCT_Show As ProductLinesCT_ShowDataTable
    
    Private tableCustomerType_Combo As CustomerType_ComboDataTable
    
    Private tableCallRateBudgetCT_Show As CallRateBudgetCT_ShowDataTable
    
    Private tableMedrep_Combo As Medrep_ComboDataTable
    
    Private tableNsmCT_Show As NsmCT_ShowDataTable
    
    Private tableSuperDivCT_Show As SuperDivCT_ShowDataTable
    
    Private tableSupervisor_Combo As Supervisor_ComboDataTable
    
    Private tableCallRateTransCT_Show As CallRateTransCT_ShowDataTable
    
    Private tableQpiTerritoryBudgetCT_Show As QpiTerritoryBudgetCT_ShowDataTable
    
    Private tableDSm_Combo As DSm_ComboDataTable
    
    Private tableNSM_Combo As NSM_ComboDataTable
    
    Private tableCustomer_Combo As Customer_ComboDataTable
    
    Private tableCallRate_Calenderized As CallRate_CalenderizedDataTable
    
    Private tableCallRate_Monthly As CallRate_MonthlyDataTable
    
    Private tableBudgetOsCT_Show As BudgetOsCT_ShowDataTable
    
    Private tableItemCodTab_Show As ItemCodTab_ShowDataTable
    
    Private tablePrincipalCodTab_Show As PrincipalCodTab_ShowDataTable
    
    Private tableProdManCT_Show As ProdManCT_ShowDataTable
    
    Private tableItemPriceHist_DS_Show As ItemPriceHist_DS_ShowDataTable
    
    Private tableItemDivision_Show As ItemDivision_ShowDataTable
    
    Private tableItemPrincipal_Show As ItemPrincipal_ShowDataTable
    
    Private tableItemNSM_Show As ItemNSM_ShowDataTable
    
    Private tableItemProdMan_Show As ItemProdMan_ShowDataTable
    
    Private tableitmSP As itmSPDataTable
    
    Private tablePM_Combo As PM_ComboDataTable
    
    Private tableQpiTerritory_Combo As QpiTerritory_ComboDataTable
    
    Private tableCustomerCodTab_Show As CustomerCodTab_ShowDataTable
    
    Private tableQPIareaCode_Combo As QPIareaCode_ComboDataTable
    
    Private tableExcludeCustomerListCT_Show As ExcludeCustomerListCT_ShowDataTable
    
    Private tableCustLookup As CustLookupDataTable
    
    Private tableQPIAC_Show As QPIAC_ShowDataTable
    
    Private tableMedRepCT_Show As MedRepCT_ShowDataTable
    
    Private tableSupervisorCT_Show As SupervisorCT_ShowDataTable
    
    Private tableItemDivSubGrp_Show As ItemDivSubGrp_ShowDataTable
    
    Private relationItemCT_Show_Principal_Combo As DataRelation
    
    Private relationItem_Combo_SubKeyProduct_Show As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("DivisionCT_Show")) Is Nothing) Then
                Me.Tables.Add(New DivisionCT_ShowDataTable(ds.Tables("DivisionCT_Show")))
            End If
            If (Not (ds.Tables("GroupCT_Show")) Is Nothing) Then
                Me.Tables.Add(New GroupCT_ShowDataTable(ds.Tables("GroupCT_Show")))
            End If
            If (Not (ds.Tables("ItemCT_Show")) Is Nothing) Then
                Me.Tables.Add(New ItemCT_ShowDataTable(ds.Tables("ItemCT_Show")))
            End If
            If (Not (ds.Tables("Principal_Combo")) Is Nothing) Then
                Me.Tables.Add(New Principal_ComboDataTable(ds.Tables("Principal_Combo")))
            End If
            If (Not (ds.Tables("ProvinceCT_Show")) Is Nothing) Then
                Me.Tables.Add(New ProvinceCT_ShowDataTable(ds.Tables("ProvinceCT_Show")))
            End If
            If (Not (ds.Tables("ProductLines_Combo")) Is Nothing) Then
                Me.Tables.Add(New ProductLines_ComboDataTable(ds.Tables("ProductLines_Combo")))
            End If
            If (Not (ds.Tables("MercuryBranchCT_Show")) Is Nothing) Then
                Me.Tables.Add(New MercuryBranchCT_ShowDataTable(ds.Tables("MercuryBranchCT_Show")))
            End If
            If (Not (ds.Tables("Territory_Combo")) Is Nothing) Then
                Me.Tables.Add(New Territory_ComboDataTable(ds.Tables("Territory_Combo")))
            End If
            If (Not (ds.Tables("MercuryItemCT_Show")) Is Nothing) Then
                Me.Tables.Add(New MercuryItemCT_ShowDataTable(ds.Tables("MercuryItemCT_Show")))
            End If
            If (Not (ds.Tables("Item_Combo")) Is Nothing) Then
                Me.Tables.Add(New Item_ComboDataTable(ds.Tables("Item_Combo")))
            End If
            If (Not (ds.Tables("SubKeyProduct_Show")) Is Nothing) Then
                Me.Tables.Add(New SubKeyProduct_ShowDataTable(ds.Tables("SubKeyProduct_Show")))
            End If
            If (Not (ds.Tables("Division_Combo")) Is Nothing) Then
                Me.Tables.Add(New Division_ComboDataTable(ds.Tables("Division_Combo")))
            End If
            If (Not (ds.Tables("Group_Combo")) Is Nothing) Then
                Me.Tables.Add(New Group_ComboDataTable(ds.Tables("Group_Combo")))
            End If
            If (Not (ds.Tables("Province_Combo")) Is Nothing) Then
                Me.Tables.Add(New Province_ComboDataTable(ds.Tables("Province_Combo")))
            End If
            If (Not (ds.Tables("TerritoryCT_Show")) Is Nothing) Then
                Me.Tables.Add(New TerritoryCT_ShowDataTable(ds.Tables("TerritoryCT_Show")))
            End If
            If (Not (ds.Tables("KeyProducts_Show")) Is Nothing) Then
                Me.Tables.Add(New KeyProducts_ShowDataTable(ds.Tables("KeyProducts_Show")))
            End If
            If (Not (ds.Tables("TeamDivisionCT_Show")) Is Nothing) Then
                Me.Tables.Add(New TeamDivisionCT_ShowDataTable(ds.Tables("TeamDivisionCT_Show")))
            End If
            If (Not (ds.Tables("ProductLinesCT_Show")) Is Nothing) Then
                Me.Tables.Add(New ProductLinesCT_ShowDataTable(ds.Tables("ProductLinesCT_Show")))
            End If
            If (Not (ds.Tables("CustomerType_Combo")) Is Nothing) Then
                Me.Tables.Add(New CustomerType_ComboDataTable(ds.Tables("CustomerType_Combo")))
            End If
            If (Not (ds.Tables("CallRateBudgetCT_Show")) Is Nothing) Then
                Me.Tables.Add(New CallRateBudgetCT_ShowDataTable(ds.Tables("CallRateBudgetCT_Show")))
            End If
            If (Not (ds.Tables("Medrep_Combo")) Is Nothing) Then
                Me.Tables.Add(New Medrep_ComboDataTable(ds.Tables("Medrep_Combo")))
            End If
            If (Not (ds.Tables("NsmCT_Show")) Is Nothing) Then
                Me.Tables.Add(New NsmCT_ShowDataTable(ds.Tables("NsmCT_Show")))
            End If
            If (Not (ds.Tables("SuperDivCT_Show")) Is Nothing) Then
                Me.Tables.Add(New SuperDivCT_ShowDataTable(ds.Tables("SuperDivCT_Show")))
            End If
            If (Not (ds.Tables("Supervisor_Combo")) Is Nothing) Then
                Me.Tables.Add(New Supervisor_ComboDataTable(ds.Tables("Supervisor_Combo")))
            End If
            If (Not (ds.Tables("CallRateTransCT_Show")) Is Nothing) Then
                Me.Tables.Add(New CallRateTransCT_ShowDataTable(ds.Tables("CallRateTransCT_Show")))
            End If
            If (Not (ds.Tables("QpiTerritoryBudgetCT_Show")) Is Nothing) Then
                Me.Tables.Add(New QpiTerritoryBudgetCT_ShowDataTable(ds.Tables("QpiTerritoryBudgetCT_Show")))
            End If
            If (Not (ds.Tables("DSm_Combo")) Is Nothing) Then
                Me.Tables.Add(New DSm_ComboDataTable(ds.Tables("DSm_Combo")))
            End If
            If (Not (ds.Tables("NSM_Combo")) Is Nothing) Then
                Me.Tables.Add(New NSM_ComboDataTable(ds.Tables("NSM_Combo")))
            End If
            If (Not (ds.Tables("Customer_Combo")) Is Nothing) Then
                Me.Tables.Add(New Customer_ComboDataTable(ds.Tables("Customer_Combo")))
            End If
            If (Not (ds.Tables("CallRate_Calenderized")) Is Nothing) Then
                Me.Tables.Add(New CallRate_CalenderizedDataTable(ds.Tables("CallRate_Calenderized")))
            End If
            If (Not (ds.Tables("CallRate_Monthly")) Is Nothing) Then
                Me.Tables.Add(New CallRate_MonthlyDataTable(ds.Tables("CallRate_Monthly")))
            End If
            If (Not (ds.Tables("BudgetOsCT_Show")) Is Nothing) Then
                Me.Tables.Add(New BudgetOsCT_ShowDataTable(ds.Tables("BudgetOsCT_Show")))
            End If
            If (Not (ds.Tables("ItemCodTab_Show")) Is Nothing) Then
                Me.Tables.Add(New ItemCodTab_ShowDataTable(ds.Tables("ItemCodTab_Show")))
            End If
            If (Not (ds.Tables("PrincipalCodTab_Show")) Is Nothing) Then
                Me.Tables.Add(New PrincipalCodTab_ShowDataTable(ds.Tables("PrincipalCodTab_Show")))
            End If
            If (Not (ds.Tables("ProdManCT_Show")) Is Nothing) Then
                Me.Tables.Add(New ProdManCT_ShowDataTable(ds.Tables("ProdManCT_Show")))
            End If
            If (Not (ds.Tables("ItemPriceHist_DS_Show")) Is Nothing) Then
                Me.Tables.Add(New ItemPriceHist_DS_ShowDataTable(ds.Tables("ItemPriceHist_DS_Show")))
            End If
            If (Not (ds.Tables("ItemDivision_Show")) Is Nothing) Then
                Me.Tables.Add(New ItemDivision_ShowDataTable(ds.Tables("ItemDivision_Show")))
            End If
            If (Not (ds.Tables("ItemPrincipal_Show")) Is Nothing) Then
                Me.Tables.Add(New ItemPrincipal_ShowDataTable(ds.Tables("ItemPrincipal_Show")))
            End If
            If (Not (ds.Tables("ItemNSM_Show")) Is Nothing) Then
                Me.Tables.Add(New ItemNSM_ShowDataTable(ds.Tables("ItemNSM_Show")))
            End If
            If (Not (ds.Tables("ItemProdMan_Show")) Is Nothing) Then
                Me.Tables.Add(New ItemProdMan_ShowDataTable(ds.Tables("ItemProdMan_Show")))
            End If
            If (Not (ds.Tables("itmSP")) Is Nothing) Then
                Me.Tables.Add(New itmSPDataTable(ds.Tables("itmSP")))
            End If
            If (Not (ds.Tables("PM_Combo")) Is Nothing) Then
                Me.Tables.Add(New PM_ComboDataTable(ds.Tables("PM_Combo")))
            End If
            If (Not (ds.Tables("QpiTerritory_Combo")) Is Nothing) Then
                Me.Tables.Add(New QpiTerritory_ComboDataTable(ds.Tables("QpiTerritory_Combo")))
            End If
            If (Not (ds.Tables("CustomerCodTab_Show")) Is Nothing) Then
                Me.Tables.Add(New CustomerCodTab_ShowDataTable(ds.Tables("CustomerCodTab_Show")))
            End If
            If (Not (ds.Tables("QPIareaCode_Combo")) Is Nothing) Then
                Me.Tables.Add(New QPIareaCode_ComboDataTable(ds.Tables("QPIareaCode_Combo")))
            End If
            If (Not (ds.Tables("ExcludeCustomerListCT_Show")) Is Nothing) Then
                Me.Tables.Add(New ExcludeCustomerListCT_ShowDataTable(ds.Tables("ExcludeCustomerListCT_Show")))
            End If
            If (Not (ds.Tables("CustLookup")) Is Nothing) Then
                Me.Tables.Add(New CustLookupDataTable(ds.Tables("CustLookup")))
            End If
            If (Not (ds.Tables("QPIAC_Show")) Is Nothing) Then
                Me.Tables.Add(New QPIAC_ShowDataTable(ds.Tables("QPIAC_Show")))
            End If
            If (Not (ds.Tables("MedRepCT_Show")) Is Nothing) Then
                Me.Tables.Add(New MedRepCT_ShowDataTable(ds.Tables("MedRepCT_Show")))
            End If
            If (Not (ds.Tables("SupervisorCT_Show")) Is Nothing) Then
                Me.Tables.Add(New SupervisorCT_ShowDataTable(ds.Tables("SupervisorCT_Show")))
            End If
            If (Not (ds.Tables("ItemDivSubGrp_Show")) Is Nothing) Then
                Me.Tables.Add(New ItemDivSubGrp_ShowDataTable(ds.Tables("ItemDivSubGrp_Show")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DivisionCT_Show As DivisionCT_ShowDataTable
        Get
            Return Me.tableDivisionCT_Show
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GroupCT_Show As GroupCT_ShowDataTable
        Get
            Return Me.tableGroupCT_Show
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ItemCT_Show As ItemCT_ShowDataTable
        Get
            Return Me.tableItemCT_Show
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Principal_Combo As Principal_ComboDataTable
        Get
            Return Me.tablePrincipal_Combo
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ProvinceCT_Show As ProvinceCT_ShowDataTable
        Get
            Return Me.tableProvinceCT_Show
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ProductLines_Combo As ProductLines_ComboDataTable
        Get
            Return Me.tableProductLines_Combo
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MercuryBranchCT_Show As MercuryBranchCT_ShowDataTable
        Get
            Return Me.tableMercuryBranchCT_Show
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Territory_Combo As Territory_ComboDataTable
        Get
            Return Me.tableTerritory_Combo
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MercuryItemCT_Show As MercuryItemCT_ShowDataTable
        Get
            Return Me.tableMercuryItemCT_Show
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Item_Combo As Item_ComboDataTable
        Get
            Return Me.tableItem_Combo
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SubKeyProduct_Show As SubKeyProduct_ShowDataTable
        Get
            Return Me.tableSubKeyProduct_Show
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Division_Combo As Division_ComboDataTable
        Get
            Return Me.tableDivision_Combo
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Group_Combo As Group_ComboDataTable
        Get
            Return Me.tableGroup_Combo
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Province_Combo As Province_ComboDataTable
        Get
            Return Me.tableProvince_Combo
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TerritoryCT_Show As TerritoryCT_ShowDataTable
        Get
            Return Me.tableTerritoryCT_Show
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property KeyProducts_Show As KeyProducts_ShowDataTable
        Get
            Return Me.tableKeyProducts_Show
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TeamDivisionCT_Show As TeamDivisionCT_ShowDataTable
        Get
            Return Me.tableTeamDivisionCT_Show
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ProductLinesCT_Show As ProductLinesCT_ShowDataTable
        Get
            Return Me.tableProductLinesCT_Show
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CustomerType_Combo As CustomerType_ComboDataTable
        Get
            Return Me.tableCustomerType_Combo
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CallRateBudgetCT_Show As CallRateBudgetCT_ShowDataTable
        Get
            Return Me.tableCallRateBudgetCT_Show
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Medrep_Combo As Medrep_ComboDataTable
        Get
            Return Me.tableMedrep_Combo
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NsmCT_Show As NsmCT_ShowDataTable
        Get
            Return Me.tableNsmCT_Show
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SuperDivCT_Show As SuperDivCT_ShowDataTable
        Get
            Return Me.tableSuperDivCT_Show
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Supervisor_Combo As Supervisor_ComboDataTable
        Get
            Return Me.tableSupervisor_Combo
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CallRateTransCT_Show As CallRateTransCT_ShowDataTable
        Get
            Return Me.tableCallRateTransCT_Show
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property QpiTerritoryBudgetCT_Show As QpiTerritoryBudgetCT_ShowDataTable
        Get
            Return Me.tableQpiTerritoryBudgetCT_Show
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DSm_Combo As DSm_ComboDataTable
        Get
            Return Me.tableDSm_Combo
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NSM_Combo As NSM_ComboDataTable
        Get
            Return Me.tableNSM_Combo
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Customer_Combo As Customer_ComboDataTable
        Get
            Return Me.tableCustomer_Combo
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CallRate_Calenderized As CallRate_CalenderizedDataTable
        Get
            Return Me.tableCallRate_Calenderized
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CallRate_Monthly As CallRate_MonthlyDataTable
        Get
            Return Me.tableCallRate_Monthly
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BudgetOsCT_Show As BudgetOsCT_ShowDataTable
        Get
            Return Me.tableBudgetOsCT_Show
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ItemCodTab_Show As ItemCodTab_ShowDataTable
        Get
            Return Me.tableItemCodTab_Show
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PrincipalCodTab_Show As PrincipalCodTab_ShowDataTable
        Get
            Return Me.tablePrincipalCodTab_Show
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ProdManCT_Show As ProdManCT_ShowDataTable
        Get
            Return Me.tableProdManCT_Show
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ItemPriceHist_DS_Show As ItemPriceHist_DS_ShowDataTable
        Get
            Return Me.tableItemPriceHist_DS_Show
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ItemDivision_Show As ItemDivision_ShowDataTable
        Get
            Return Me.tableItemDivision_Show
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ItemPrincipal_Show As ItemPrincipal_ShowDataTable
        Get
            Return Me.tableItemPrincipal_Show
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ItemNSM_Show As ItemNSM_ShowDataTable
        Get
            Return Me.tableItemNSM_Show
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ItemProdMan_Show As ItemProdMan_ShowDataTable
        Get
            Return Me.tableItemProdMan_Show
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property itmSP As itmSPDataTable
        Get
            Return Me.tableitmSP
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PM_Combo As PM_ComboDataTable
        Get
            Return Me.tablePM_Combo
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property QpiTerritory_Combo As QpiTerritory_ComboDataTable
        Get
            Return Me.tableQpiTerritory_Combo
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CustomerCodTab_Show As CustomerCodTab_ShowDataTable
        Get
            Return Me.tableCustomerCodTab_Show
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property QPIareaCode_Combo As QPIareaCode_ComboDataTable
        Get
            Return Me.tableQPIareaCode_Combo
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ExcludeCustomerListCT_Show As ExcludeCustomerListCT_ShowDataTable
        Get
            Return Me.tableExcludeCustomerListCT_Show
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CustLookup As CustLookupDataTable
        Get
            Return Me.tableCustLookup
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property QPIAC_Show As QPIAC_ShowDataTable
        Get
            Return Me.tableQPIAC_Show
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MedRepCT_Show As MedRepCT_ShowDataTable
        Get
            Return Me.tableMedRepCT_Show
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SupervisorCT_Show As SupervisorCT_ShowDataTable
        Get
            Return Me.tableSupervisorCT_Show
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ItemDivSubGrp_Show As ItemDivSubGrp_ShowDataTable
        Get
            Return Me.tableItemDivSubGrp_Show
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As CodeTablesDS = CType(MyBase.Clone,CodeTablesDS)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("DivisionCT_Show")) Is Nothing) Then
            Me.Tables.Add(New DivisionCT_ShowDataTable(ds.Tables("DivisionCT_Show")))
        End If
        If (Not (ds.Tables("GroupCT_Show")) Is Nothing) Then
            Me.Tables.Add(New GroupCT_ShowDataTable(ds.Tables("GroupCT_Show")))
        End If
        If (Not (ds.Tables("ItemCT_Show")) Is Nothing) Then
            Me.Tables.Add(New ItemCT_ShowDataTable(ds.Tables("ItemCT_Show")))
        End If
        If (Not (ds.Tables("Principal_Combo")) Is Nothing) Then
            Me.Tables.Add(New Principal_ComboDataTable(ds.Tables("Principal_Combo")))
        End If
        If (Not (ds.Tables("ProvinceCT_Show")) Is Nothing) Then
            Me.Tables.Add(New ProvinceCT_ShowDataTable(ds.Tables("ProvinceCT_Show")))
        End If
        If (Not (ds.Tables("ProductLines_Combo")) Is Nothing) Then
            Me.Tables.Add(New ProductLines_ComboDataTable(ds.Tables("ProductLines_Combo")))
        End If
        If (Not (ds.Tables("MercuryBranchCT_Show")) Is Nothing) Then
            Me.Tables.Add(New MercuryBranchCT_ShowDataTable(ds.Tables("MercuryBranchCT_Show")))
        End If
        If (Not (ds.Tables("Territory_Combo")) Is Nothing) Then
            Me.Tables.Add(New Territory_ComboDataTable(ds.Tables("Territory_Combo")))
        End If
        If (Not (ds.Tables("MercuryItemCT_Show")) Is Nothing) Then
            Me.Tables.Add(New MercuryItemCT_ShowDataTable(ds.Tables("MercuryItemCT_Show")))
        End If
        If (Not (ds.Tables("Item_Combo")) Is Nothing) Then
            Me.Tables.Add(New Item_ComboDataTable(ds.Tables("Item_Combo")))
        End If
        If (Not (ds.Tables("SubKeyProduct_Show")) Is Nothing) Then
            Me.Tables.Add(New SubKeyProduct_ShowDataTable(ds.Tables("SubKeyProduct_Show")))
        End If
        If (Not (ds.Tables("Division_Combo")) Is Nothing) Then
            Me.Tables.Add(New Division_ComboDataTable(ds.Tables("Division_Combo")))
        End If
        If (Not (ds.Tables("Group_Combo")) Is Nothing) Then
            Me.Tables.Add(New Group_ComboDataTable(ds.Tables("Group_Combo")))
        End If
        If (Not (ds.Tables("Province_Combo")) Is Nothing) Then
            Me.Tables.Add(New Province_ComboDataTable(ds.Tables("Province_Combo")))
        End If
        If (Not (ds.Tables("TerritoryCT_Show")) Is Nothing) Then
            Me.Tables.Add(New TerritoryCT_ShowDataTable(ds.Tables("TerritoryCT_Show")))
        End If
        If (Not (ds.Tables("KeyProducts_Show")) Is Nothing) Then
            Me.Tables.Add(New KeyProducts_ShowDataTable(ds.Tables("KeyProducts_Show")))
        End If
        If (Not (ds.Tables("TeamDivisionCT_Show")) Is Nothing) Then
            Me.Tables.Add(New TeamDivisionCT_ShowDataTable(ds.Tables("TeamDivisionCT_Show")))
        End If
        If (Not (ds.Tables("ProductLinesCT_Show")) Is Nothing) Then
            Me.Tables.Add(New ProductLinesCT_ShowDataTable(ds.Tables("ProductLinesCT_Show")))
        End If
        If (Not (ds.Tables("CustomerType_Combo")) Is Nothing) Then
            Me.Tables.Add(New CustomerType_ComboDataTable(ds.Tables("CustomerType_Combo")))
        End If
        If (Not (ds.Tables("CallRateBudgetCT_Show")) Is Nothing) Then
            Me.Tables.Add(New CallRateBudgetCT_ShowDataTable(ds.Tables("CallRateBudgetCT_Show")))
        End If
        If (Not (ds.Tables("Medrep_Combo")) Is Nothing) Then
            Me.Tables.Add(New Medrep_ComboDataTable(ds.Tables("Medrep_Combo")))
        End If
        If (Not (ds.Tables("NsmCT_Show")) Is Nothing) Then
            Me.Tables.Add(New NsmCT_ShowDataTable(ds.Tables("NsmCT_Show")))
        End If
        If (Not (ds.Tables("SuperDivCT_Show")) Is Nothing) Then
            Me.Tables.Add(New SuperDivCT_ShowDataTable(ds.Tables("SuperDivCT_Show")))
        End If
        If (Not (ds.Tables("Supervisor_Combo")) Is Nothing) Then
            Me.Tables.Add(New Supervisor_ComboDataTable(ds.Tables("Supervisor_Combo")))
        End If
        If (Not (ds.Tables("CallRateTransCT_Show")) Is Nothing) Then
            Me.Tables.Add(New CallRateTransCT_ShowDataTable(ds.Tables("CallRateTransCT_Show")))
        End If
        If (Not (ds.Tables("QpiTerritoryBudgetCT_Show")) Is Nothing) Then
            Me.Tables.Add(New QpiTerritoryBudgetCT_ShowDataTable(ds.Tables("QpiTerritoryBudgetCT_Show")))
        End If
        If (Not (ds.Tables("DSm_Combo")) Is Nothing) Then
            Me.Tables.Add(New DSm_ComboDataTable(ds.Tables("DSm_Combo")))
        End If
        If (Not (ds.Tables("NSM_Combo")) Is Nothing) Then
            Me.Tables.Add(New NSM_ComboDataTable(ds.Tables("NSM_Combo")))
        End If
        If (Not (ds.Tables("Customer_Combo")) Is Nothing) Then
            Me.Tables.Add(New Customer_ComboDataTable(ds.Tables("Customer_Combo")))
        End If
        If (Not (ds.Tables("CallRate_Calenderized")) Is Nothing) Then
            Me.Tables.Add(New CallRate_CalenderizedDataTable(ds.Tables("CallRate_Calenderized")))
        End If
        If (Not (ds.Tables("CallRate_Monthly")) Is Nothing) Then
            Me.Tables.Add(New CallRate_MonthlyDataTable(ds.Tables("CallRate_Monthly")))
        End If
        If (Not (ds.Tables("BudgetOsCT_Show")) Is Nothing) Then
            Me.Tables.Add(New BudgetOsCT_ShowDataTable(ds.Tables("BudgetOsCT_Show")))
        End If
        If (Not (ds.Tables("ItemCodTab_Show")) Is Nothing) Then
            Me.Tables.Add(New ItemCodTab_ShowDataTable(ds.Tables("ItemCodTab_Show")))
        End If
        If (Not (ds.Tables("PrincipalCodTab_Show")) Is Nothing) Then
            Me.Tables.Add(New PrincipalCodTab_ShowDataTable(ds.Tables("PrincipalCodTab_Show")))
        End If
        If (Not (ds.Tables("ProdManCT_Show")) Is Nothing) Then
            Me.Tables.Add(New ProdManCT_ShowDataTable(ds.Tables("ProdManCT_Show")))
        End If
        If (Not (ds.Tables("ItemPriceHist_DS_Show")) Is Nothing) Then
            Me.Tables.Add(New ItemPriceHist_DS_ShowDataTable(ds.Tables("ItemPriceHist_DS_Show")))
        End If
        If (Not (ds.Tables("ItemDivision_Show")) Is Nothing) Then
            Me.Tables.Add(New ItemDivision_ShowDataTable(ds.Tables("ItemDivision_Show")))
        End If
        If (Not (ds.Tables("ItemPrincipal_Show")) Is Nothing) Then
            Me.Tables.Add(New ItemPrincipal_ShowDataTable(ds.Tables("ItemPrincipal_Show")))
        End If
        If (Not (ds.Tables("ItemNSM_Show")) Is Nothing) Then
            Me.Tables.Add(New ItemNSM_ShowDataTable(ds.Tables("ItemNSM_Show")))
        End If
        If (Not (ds.Tables("ItemProdMan_Show")) Is Nothing) Then
            Me.Tables.Add(New ItemProdMan_ShowDataTable(ds.Tables("ItemProdMan_Show")))
        End If
        If (Not (ds.Tables("itmSP")) Is Nothing) Then
            Me.Tables.Add(New itmSPDataTable(ds.Tables("itmSP")))
        End If
        If (Not (ds.Tables("PM_Combo")) Is Nothing) Then
            Me.Tables.Add(New PM_ComboDataTable(ds.Tables("PM_Combo")))
        End If
        If (Not (ds.Tables("QpiTerritory_Combo")) Is Nothing) Then
            Me.Tables.Add(New QpiTerritory_ComboDataTable(ds.Tables("QpiTerritory_Combo")))
        End If
        If (Not (ds.Tables("CustomerCodTab_Show")) Is Nothing) Then
            Me.Tables.Add(New CustomerCodTab_ShowDataTable(ds.Tables("CustomerCodTab_Show")))
        End If
        If (Not (ds.Tables("QPIareaCode_Combo")) Is Nothing) Then
            Me.Tables.Add(New QPIareaCode_ComboDataTable(ds.Tables("QPIareaCode_Combo")))
        End If
        If (Not (ds.Tables("ExcludeCustomerListCT_Show")) Is Nothing) Then
            Me.Tables.Add(New ExcludeCustomerListCT_ShowDataTable(ds.Tables("ExcludeCustomerListCT_Show")))
        End If
        If (Not (ds.Tables("CustLookup")) Is Nothing) Then
            Me.Tables.Add(New CustLookupDataTable(ds.Tables("CustLookup")))
        End If
        If (Not (ds.Tables("QPIAC_Show")) Is Nothing) Then
            Me.Tables.Add(New QPIAC_ShowDataTable(ds.Tables("QPIAC_Show")))
        End If
        If (Not (ds.Tables("MedRepCT_Show")) Is Nothing) Then
            Me.Tables.Add(New MedRepCT_ShowDataTable(ds.Tables("MedRepCT_Show")))
        End If
        If (Not (ds.Tables("SupervisorCT_Show")) Is Nothing) Then
            Me.Tables.Add(New SupervisorCT_ShowDataTable(ds.Tables("SupervisorCT_Show")))
        End If
        If (Not (ds.Tables("ItemDivSubGrp_Show")) Is Nothing) Then
            Me.Tables.Add(New ItemDivSubGrp_ShowDataTable(ds.Tables("ItemDivSubGrp_Show")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableDivisionCT_Show = CType(Me.Tables("DivisionCT_Show"),DivisionCT_ShowDataTable)
        If (Not (Me.tableDivisionCT_Show) Is Nothing) Then
            Me.tableDivisionCT_Show.InitVars
        End If
        Me.tableGroupCT_Show = CType(Me.Tables("GroupCT_Show"),GroupCT_ShowDataTable)
        If (Not (Me.tableGroupCT_Show) Is Nothing) Then
            Me.tableGroupCT_Show.InitVars
        End If
        Me.tableItemCT_Show = CType(Me.Tables("ItemCT_Show"),ItemCT_ShowDataTable)
        If (Not (Me.tableItemCT_Show) Is Nothing) Then
            Me.tableItemCT_Show.InitVars
        End If
        Me.tablePrincipal_Combo = CType(Me.Tables("Principal_Combo"),Principal_ComboDataTable)
        If (Not (Me.tablePrincipal_Combo) Is Nothing) Then
            Me.tablePrincipal_Combo.InitVars
        End If
        Me.tableProvinceCT_Show = CType(Me.Tables("ProvinceCT_Show"),ProvinceCT_ShowDataTable)
        If (Not (Me.tableProvinceCT_Show) Is Nothing) Then
            Me.tableProvinceCT_Show.InitVars
        End If
        Me.tableProductLines_Combo = CType(Me.Tables("ProductLines_Combo"),ProductLines_ComboDataTable)
        If (Not (Me.tableProductLines_Combo) Is Nothing) Then
            Me.tableProductLines_Combo.InitVars
        End If
        Me.tableMercuryBranchCT_Show = CType(Me.Tables("MercuryBranchCT_Show"),MercuryBranchCT_ShowDataTable)
        If (Not (Me.tableMercuryBranchCT_Show) Is Nothing) Then
            Me.tableMercuryBranchCT_Show.InitVars
        End If
        Me.tableTerritory_Combo = CType(Me.Tables("Territory_Combo"),Territory_ComboDataTable)
        If (Not (Me.tableTerritory_Combo) Is Nothing) Then
            Me.tableTerritory_Combo.InitVars
        End If
        Me.tableMercuryItemCT_Show = CType(Me.Tables("MercuryItemCT_Show"),MercuryItemCT_ShowDataTable)
        If (Not (Me.tableMercuryItemCT_Show) Is Nothing) Then
            Me.tableMercuryItemCT_Show.InitVars
        End If
        Me.tableItem_Combo = CType(Me.Tables("Item_Combo"),Item_ComboDataTable)
        If (Not (Me.tableItem_Combo) Is Nothing) Then
            Me.tableItem_Combo.InitVars
        End If
        Me.tableSubKeyProduct_Show = CType(Me.Tables("SubKeyProduct_Show"),SubKeyProduct_ShowDataTable)
        If (Not (Me.tableSubKeyProduct_Show) Is Nothing) Then
            Me.tableSubKeyProduct_Show.InitVars
        End If
        Me.tableDivision_Combo = CType(Me.Tables("Division_Combo"),Division_ComboDataTable)
        If (Not (Me.tableDivision_Combo) Is Nothing) Then
            Me.tableDivision_Combo.InitVars
        End If
        Me.tableGroup_Combo = CType(Me.Tables("Group_Combo"),Group_ComboDataTable)
        If (Not (Me.tableGroup_Combo) Is Nothing) Then
            Me.tableGroup_Combo.InitVars
        End If
        Me.tableProvince_Combo = CType(Me.Tables("Province_Combo"),Province_ComboDataTable)
        If (Not (Me.tableProvince_Combo) Is Nothing) Then
            Me.tableProvince_Combo.InitVars
        End If
        Me.tableTerritoryCT_Show = CType(Me.Tables("TerritoryCT_Show"),TerritoryCT_ShowDataTable)
        If (Not (Me.tableTerritoryCT_Show) Is Nothing) Then
            Me.tableTerritoryCT_Show.InitVars
        End If
        Me.tableKeyProducts_Show = CType(Me.Tables("KeyProducts_Show"),KeyProducts_ShowDataTable)
        If (Not (Me.tableKeyProducts_Show) Is Nothing) Then
            Me.tableKeyProducts_Show.InitVars
        End If
        Me.tableTeamDivisionCT_Show = CType(Me.Tables("TeamDivisionCT_Show"),TeamDivisionCT_ShowDataTable)
        If (Not (Me.tableTeamDivisionCT_Show) Is Nothing) Then
            Me.tableTeamDivisionCT_Show.InitVars
        End If
        Me.tableProductLinesCT_Show = CType(Me.Tables("ProductLinesCT_Show"),ProductLinesCT_ShowDataTable)
        If (Not (Me.tableProductLinesCT_Show) Is Nothing) Then
            Me.tableProductLinesCT_Show.InitVars
        End If
        Me.tableCustomerType_Combo = CType(Me.Tables("CustomerType_Combo"),CustomerType_ComboDataTable)
        If (Not (Me.tableCustomerType_Combo) Is Nothing) Then
            Me.tableCustomerType_Combo.InitVars
        End If
        Me.tableCallRateBudgetCT_Show = CType(Me.Tables("CallRateBudgetCT_Show"),CallRateBudgetCT_ShowDataTable)
        If (Not (Me.tableCallRateBudgetCT_Show) Is Nothing) Then
            Me.tableCallRateBudgetCT_Show.InitVars
        End If
        Me.tableMedrep_Combo = CType(Me.Tables("Medrep_Combo"),Medrep_ComboDataTable)
        If (Not (Me.tableMedrep_Combo) Is Nothing) Then
            Me.tableMedrep_Combo.InitVars
        End If
        Me.tableNsmCT_Show = CType(Me.Tables("NsmCT_Show"),NsmCT_ShowDataTable)
        If (Not (Me.tableNsmCT_Show) Is Nothing) Then
            Me.tableNsmCT_Show.InitVars
        End If
        Me.tableSuperDivCT_Show = CType(Me.Tables("SuperDivCT_Show"),SuperDivCT_ShowDataTable)
        If (Not (Me.tableSuperDivCT_Show) Is Nothing) Then
            Me.tableSuperDivCT_Show.InitVars
        End If
        Me.tableSupervisor_Combo = CType(Me.Tables("Supervisor_Combo"),Supervisor_ComboDataTable)
        If (Not (Me.tableSupervisor_Combo) Is Nothing) Then
            Me.tableSupervisor_Combo.InitVars
        End If
        Me.tableCallRateTransCT_Show = CType(Me.Tables("CallRateTransCT_Show"),CallRateTransCT_ShowDataTable)
        If (Not (Me.tableCallRateTransCT_Show) Is Nothing) Then
            Me.tableCallRateTransCT_Show.InitVars
        End If
        Me.tableQpiTerritoryBudgetCT_Show = CType(Me.Tables("QpiTerritoryBudgetCT_Show"),QpiTerritoryBudgetCT_ShowDataTable)
        If (Not (Me.tableQpiTerritoryBudgetCT_Show) Is Nothing) Then
            Me.tableQpiTerritoryBudgetCT_Show.InitVars
        End If
        Me.tableDSm_Combo = CType(Me.Tables("DSm_Combo"),DSm_ComboDataTable)
        If (Not (Me.tableDSm_Combo) Is Nothing) Then
            Me.tableDSm_Combo.InitVars
        End If
        Me.tableNSM_Combo = CType(Me.Tables("NSM_Combo"),NSM_ComboDataTable)
        If (Not (Me.tableNSM_Combo) Is Nothing) Then
            Me.tableNSM_Combo.InitVars
        End If
        Me.tableCustomer_Combo = CType(Me.Tables("Customer_Combo"),Customer_ComboDataTable)
        If (Not (Me.tableCustomer_Combo) Is Nothing) Then
            Me.tableCustomer_Combo.InitVars
        End If
        Me.tableCallRate_Calenderized = CType(Me.Tables("CallRate_Calenderized"),CallRate_CalenderizedDataTable)
        If (Not (Me.tableCallRate_Calenderized) Is Nothing) Then
            Me.tableCallRate_Calenderized.InitVars
        End If
        Me.tableCallRate_Monthly = CType(Me.Tables("CallRate_Monthly"),CallRate_MonthlyDataTable)
        If (Not (Me.tableCallRate_Monthly) Is Nothing) Then
            Me.tableCallRate_Monthly.InitVars
        End If
        Me.tableBudgetOsCT_Show = CType(Me.Tables("BudgetOsCT_Show"),BudgetOsCT_ShowDataTable)
        If (Not (Me.tableBudgetOsCT_Show) Is Nothing) Then
            Me.tableBudgetOsCT_Show.InitVars
        End If
        Me.tableItemCodTab_Show = CType(Me.Tables("ItemCodTab_Show"),ItemCodTab_ShowDataTable)
        If (Not (Me.tableItemCodTab_Show) Is Nothing) Then
            Me.tableItemCodTab_Show.InitVars
        End If
        Me.tablePrincipalCodTab_Show = CType(Me.Tables("PrincipalCodTab_Show"),PrincipalCodTab_ShowDataTable)
        If (Not (Me.tablePrincipalCodTab_Show) Is Nothing) Then
            Me.tablePrincipalCodTab_Show.InitVars
        End If
        Me.tableProdManCT_Show = CType(Me.Tables("ProdManCT_Show"),ProdManCT_ShowDataTable)
        If (Not (Me.tableProdManCT_Show) Is Nothing) Then
            Me.tableProdManCT_Show.InitVars
        End If
        Me.tableItemPriceHist_DS_Show = CType(Me.Tables("ItemPriceHist_DS_Show"),ItemPriceHist_DS_ShowDataTable)
        If (Not (Me.tableItemPriceHist_DS_Show) Is Nothing) Then
            Me.tableItemPriceHist_DS_Show.InitVars
        End If
        Me.tableItemDivision_Show = CType(Me.Tables("ItemDivision_Show"),ItemDivision_ShowDataTable)
        If (Not (Me.tableItemDivision_Show) Is Nothing) Then
            Me.tableItemDivision_Show.InitVars
        End If
        Me.tableItemPrincipal_Show = CType(Me.Tables("ItemPrincipal_Show"),ItemPrincipal_ShowDataTable)
        If (Not (Me.tableItemPrincipal_Show) Is Nothing) Then
            Me.tableItemPrincipal_Show.InitVars
        End If
        Me.tableItemNSM_Show = CType(Me.Tables("ItemNSM_Show"),ItemNSM_ShowDataTable)
        If (Not (Me.tableItemNSM_Show) Is Nothing) Then
            Me.tableItemNSM_Show.InitVars
        End If
        Me.tableItemProdMan_Show = CType(Me.Tables("ItemProdMan_Show"),ItemProdMan_ShowDataTable)
        If (Not (Me.tableItemProdMan_Show) Is Nothing) Then
            Me.tableItemProdMan_Show.InitVars
        End If
        Me.tableitmSP = CType(Me.Tables("itmSP"),itmSPDataTable)
        If (Not (Me.tableitmSP) Is Nothing) Then
            Me.tableitmSP.InitVars
        End If
        Me.tablePM_Combo = CType(Me.Tables("PM_Combo"),PM_ComboDataTable)
        If (Not (Me.tablePM_Combo) Is Nothing) Then
            Me.tablePM_Combo.InitVars
        End If
        Me.tableQpiTerritory_Combo = CType(Me.Tables("QpiTerritory_Combo"),QpiTerritory_ComboDataTable)
        If (Not (Me.tableQpiTerritory_Combo) Is Nothing) Then
            Me.tableQpiTerritory_Combo.InitVars
        End If
        Me.tableCustomerCodTab_Show = CType(Me.Tables("CustomerCodTab_Show"),CustomerCodTab_ShowDataTable)
        If (Not (Me.tableCustomerCodTab_Show) Is Nothing) Then
            Me.tableCustomerCodTab_Show.InitVars
        End If
        Me.tableQPIareaCode_Combo = CType(Me.Tables("QPIareaCode_Combo"),QPIareaCode_ComboDataTable)
        If (Not (Me.tableQPIareaCode_Combo) Is Nothing) Then
            Me.tableQPIareaCode_Combo.InitVars
        End If
        Me.tableExcludeCustomerListCT_Show = CType(Me.Tables("ExcludeCustomerListCT_Show"),ExcludeCustomerListCT_ShowDataTable)
        If (Not (Me.tableExcludeCustomerListCT_Show) Is Nothing) Then
            Me.tableExcludeCustomerListCT_Show.InitVars
        End If
        Me.tableCustLookup = CType(Me.Tables("CustLookup"),CustLookupDataTable)
        If (Not (Me.tableCustLookup) Is Nothing) Then
            Me.tableCustLookup.InitVars
        End If
        Me.tableQPIAC_Show = CType(Me.Tables("QPIAC_Show"),QPIAC_ShowDataTable)
        If (Not (Me.tableQPIAC_Show) Is Nothing) Then
            Me.tableQPIAC_Show.InitVars
        End If
        Me.tableMedRepCT_Show = CType(Me.Tables("MedRepCT_Show"),MedRepCT_ShowDataTable)
        If (Not (Me.tableMedRepCT_Show) Is Nothing) Then
            Me.tableMedRepCT_Show.InitVars
        End If
        Me.tableSupervisorCT_Show = CType(Me.Tables("SupervisorCT_Show"),SupervisorCT_ShowDataTable)
        If (Not (Me.tableSupervisorCT_Show) Is Nothing) Then
            Me.tableSupervisorCT_Show.InitVars
        End If
        Me.tableItemDivSubGrp_Show = CType(Me.Tables("ItemDivSubGrp_Show"),ItemDivSubGrp_ShowDataTable)
        If (Not (Me.tableItemDivSubGrp_Show) Is Nothing) Then
            Me.tableItemDivSubGrp_Show.InitVars
        End If
        Me.relationItemCT_Show_Principal_Combo = Me.Relations("ItemCT_Show_Principal_Combo")
        Me.relationItem_Combo_SubKeyProduct_Show = Me.Relations("Item_Combo_SubKeyProduct_Show")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "CodeTablesDS"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/CodeTablesDS.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableDivisionCT_Show = New DivisionCT_ShowDataTable
        Me.Tables.Add(Me.tableDivisionCT_Show)
        Me.tableGroupCT_Show = New GroupCT_ShowDataTable
        Me.Tables.Add(Me.tableGroupCT_Show)
        Me.tableItemCT_Show = New ItemCT_ShowDataTable
        Me.Tables.Add(Me.tableItemCT_Show)
        Me.tablePrincipal_Combo = New Principal_ComboDataTable
        Me.Tables.Add(Me.tablePrincipal_Combo)
        Me.tableProvinceCT_Show = New ProvinceCT_ShowDataTable
        Me.Tables.Add(Me.tableProvinceCT_Show)
        Me.tableProductLines_Combo = New ProductLines_ComboDataTable
        Me.Tables.Add(Me.tableProductLines_Combo)
        Me.tableMercuryBranchCT_Show = New MercuryBranchCT_ShowDataTable
        Me.Tables.Add(Me.tableMercuryBranchCT_Show)
        Me.tableTerritory_Combo = New Territory_ComboDataTable
        Me.Tables.Add(Me.tableTerritory_Combo)
        Me.tableMercuryItemCT_Show = New MercuryItemCT_ShowDataTable
        Me.Tables.Add(Me.tableMercuryItemCT_Show)
        Me.tableItem_Combo = New Item_ComboDataTable
        Me.Tables.Add(Me.tableItem_Combo)
        Me.tableSubKeyProduct_Show = New SubKeyProduct_ShowDataTable
        Me.Tables.Add(Me.tableSubKeyProduct_Show)
        Me.tableDivision_Combo = New Division_ComboDataTable
        Me.Tables.Add(Me.tableDivision_Combo)
        Me.tableGroup_Combo = New Group_ComboDataTable
        Me.Tables.Add(Me.tableGroup_Combo)
        Me.tableProvince_Combo = New Province_ComboDataTable
        Me.Tables.Add(Me.tableProvince_Combo)
        Me.tableTerritoryCT_Show = New TerritoryCT_ShowDataTable
        Me.Tables.Add(Me.tableTerritoryCT_Show)
        Me.tableKeyProducts_Show = New KeyProducts_ShowDataTable
        Me.Tables.Add(Me.tableKeyProducts_Show)
        Me.tableTeamDivisionCT_Show = New TeamDivisionCT_ShowDataTable
        Me.Tables.Add(Me.tableTeamDivisionCT_Show)
        Me.tableProductLinesCT_Show = New ProductLinesCT_ShowDataTable
        Me.Tables.Add(Me.tableProductLinesCT_Show)
        Me.tableCustomerType_Combo = New CustomerType_ComboDataTable
        Me.Tables.Add(Me.tableCustomerType_Combo)
        Me.tableCallRateBudgetCT_Show = New CallRateBudgetCT_ShowDataTable
        Me.Tables.Add(Me.tableCallRateBudgetCT_Show)
        Me.tableMedrep_Combo = New Medrep_ComboDataTable
        Me.Tables.Add(Me.tableMedrep_Combo)
        Me.tableNsmCT_Show = New NsmCT_ShowDataTable
        Me.Tables.Add(Me.tableNsmCT_Show)
        Me.tableSuperDivCT_Show = New SuperDivCT_ShowDataTable
        Me.Tables.Add(Me.tableSuperDivCT_Show)
        Me.tableSupervisor_Combo = New Supervisor_ComboDataTable
        Me.Tables.Add(Me.tableSupervisor_Combo)
        Me.tableCallRateTransCT_Show = New CallRateTransCT_ShowDataTable
        Me.Tables.Add(Me.tableCallRateTransCT_Show)
        Me.tableQpiTerritoryBudgetCT_Show = New QpiTerritoryBudgetCT_ShowDataTable
        Me.Tables.Add(Me.tableQpiTerritoryBudgetCT_Show)
        Me.tableDSm_Combo = New DSm_ComboDataTable
        Me.Tables.Add(Me.tableDSm_Combo)
        Me.tableNSM_Combo = New NSM_ComboDataTable
        Me.Tables.Add(Me.tableNSM_Combo)
        Me.tableCustomer_Combo = New Customer_ComboDataTable
        Me.Tables.Add(Me.tableCustomer_Combo)
        Me.tableCallRate_Calenderized = New CallRate_CalenderizedDataTable
        Me.Tables.Add(Me.tableCallRate_Calenderized)
        Me.tableCallRate_Monthly = New CallRate_MonthlyDataTable
        Me.Tables.Add(Me.tableCallRate_Monthly)
        Me.tableBudgetOsCT_Show = New BudgetOsCT_ShowDataTable
        Me.Tables.Add(Me.tableBudgetOsCT_Show)
        Me.tableItemCodTab_Show = New ItemCodTab_ShowDataTable
        Me.Tables.Add(Me.tableItemCodTab_Show)
        Me.tablePrincipalCodTab_Show = New PrincipalCodTab_ShowDataTable
        Me.Tables.Add(Me.tablePrincipalCodTab_Show)
        Me.tableProdManCT_Show = New ProdManCT_ShowDataTable
        Me.Tables.Add(Me.tableProdManCT_Show)
        Me.tableItemPriceHist_DS_Show = New ItemPriceHist_DS_ShowDataTable
        Me.Tables.Add(Me.tableItemPriceHist_DS_Show)
        Me.tableItemDivision_Show = New ItemDivision_ShowDataTable
        Me.Tables.Add(Me.tableItemDivision_Show)
        Me.tableItemPrincipal_Show = New ItemPrincipal_ShowDataTable
        Me.Tables.Add(Me.tableItemPrincipal_Show)
        Me.tableItemNSM_Show = New ItemNSM_ShowDataTable
        Me.Tables.Add(Me.tableItemNSM_Show)
        Me.tableItemProdMan_Show = New ItemProdMan_ShowDataTable
        Me.Tables.Add(Me.tableItemProdMan_Show)
        Me.tableitmSP = New itmSPDataTable
        Me.Tables.Add(Me.tableitmSP)
        Me.tablePM_Combo = New PM_ComboDataTable
        Me.Tables.Add(Me.tablePM_Combo)
        Me.tableQpiTerritory_Combo = New QpiTerritory_ComboDataTable
        Me.Tables.Add(Me.tableQpiTerritory_Combo)
        Me.tableCustomerCodTab_Show = New CustomerCodTab_ShowDataTable
        Me.Tables.Add(Me.tableCustomerCodTab_Show)
        Me.tableQPIareaCode_Combo = New QPIareaCode_ComboDataTable
        Me.Tables.Add(Me.tableQPIareaCode_Combo)
        Me.tableExcludeCustomerListCT_Show = New ExcludeCustomerListCT_ShowDataTable
        Me.Tables.Add(Me.tableExcludeCustomerListCT_Show)
        Me.tableCustLookup = New CustLookupDataTable
        Me.Tables.Add(Me.tableCustLookup)
        Me.tableQPIAC_Show = New QPIAC_ShowDataTable
        Me.Tables.Add(Me.tableQPIAC_Show)
        Me.tableMedRepCT_Show = New MedRepCT_ShowDataTable
        Me.Tables.Add(Me.tableMedRepCT_Show)
        Me.tableSupervisorCT_Show = New SupervisorCT_ShowDataTable
        Me.Tables.Add(Me.tableSupervisorCT_Show)
        Me.tableItemDivSubGrp_Show = New ItemDivSubGrp_ShowDataTable
        Me.Tables.Add(Me.tableItemDivSubGrp_Show)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("ItemCT_Show_Principal_Combo", New DataColumn() {Me.tableItemCT_Show.ItemCT_Show_IdColumn}, New DataColumn() {Me.tablePrincipal_Combo.ItemCT_Show_IdColumn})
        Me.tablePrincipal_Combo.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Item_Combo_SubKeyProduct_Show", New DataColumn() {Me.tableItem_Combo.Item_Combo_IdColumn}, New DataColumn() {Me.tableSubKeyProduct_Show.Item_Combo_IdColumn})
        Me.tableSubKeyProduct_Show.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationItemCT_Show_Principal_Combo = New DataRelation("ItemCT_Show_Principal_Combo", New DataColumn() {Me.tableItemCT_Show.ItemCT_Show_IdColumn}, New DataColumn() {Me.tablePrincipal_Combo.ItemCT_Show_IdColumn}, false)
        Me.relationItemCT_Show_Principal_Combo.Nested = true
        Me.Relations.Add(Me.relationItemCT_Show_Principal_Combo)
        Me.relationItem_Combo_SubKeyProduct_Show = New DataRelation("Item_Combo_SubKeyProduct_Show", New DataColumn() {Me.tableItem_Combo.Item_Combo_IdColumn}, New DataColumn() {Me.tableSubKeyProduct_Show.Item_Combo_IdColumn}, false)
        Me.relationItem_Combo_SubKeyProduct_Show.Nested = true
        Me.Relations.Add(Me.relationItem_Combo_SubKeyProduct_Show)
    End Sub
    
    Private Function ShouldSerializeDivisionCT_Show() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGroupCT_Show() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeItemCT_Show() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePrincipal_Combo() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeProvinceCT_Show() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeProductLines_Combo() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeMercuryBranchCT_Show() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTerritory_Combo() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeMercuryItemCT_Show() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeItem_Combo() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSubKeyProduct_Show() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeDivision_Combo() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGroup_Combo() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeProvince_Combo() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTerritoryCT_Show() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeKeyProducts_Show() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTeamDivisionCT_Show() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeProductLinesCT_Show() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCustomerType_Combo() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCallRateBudgetCT_Show() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeMedrep_Combo() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeNsmCT_Show() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSuperDivCT_Show() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSupervisor_Combo() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCallRateTransCT_Show() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeQpiTerritoryBudgetCT_Show() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeDSm_Combo() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeNSM_Combo() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCustomer_Combo() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCallRate_Calenderized() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCallRate_Monthly() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBudgetOsCT_Show() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeItemCodTab_Show() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePrincipalCodTab_Show() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeProdManCT_Show() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeItemPriceHist_DS_Show() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeItemDivision_Show() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeItemPrincipal_Show() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeItemNSM_Show() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeItemProdMan_Show() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeitmSP() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePM_Combo() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeQpiTerritory_Combo() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCustomerCodTab_Show() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeQPIareaCode_Combo() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeExcludeCustomerListCT_Show() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCustLookup() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeQPIAC_Show() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeMedRepCT_Show() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSupervisorCT_Show() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeItemDivSubGrp_Show() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub DivisionCT_ShowRowChangeEventHandler(ByVal sender As Object, ByVal e As DivisionCT_ShowRowChangeEvent)
    
    Public Delegate Sub GroupCT_ShowRowChangeEventHandler(ByVal sender As Object, ByVal e As GroupCT_ShowRowChangeEvent)
    
    Public Delegate Sub ItemCT_ShowRowChangeEventHandler(ByVal sender As Object, ByVal e As ItemCT_ShowRowChangeEvent)
    
    Public Delegate Sub Principal_ComboRowChangeEventHandler(ByVal sender As Object, ByVal e As Principal_ComboRowChangeEvent)
    
    Public Delegate Sub ProvinceCT_ShowRowChangeEventHandler(ByVal sender As Object, ByVal e As ProvinceCT_ShowRowChangeEvent)
    
    Public Delegate Sub ProductLines_ComboRowChangeEventHandler(ByVal sender As Object, ByVal e As ProductLines_ComboRowChangeEvent)
    
    Public Delegate Sub MercuryBranchCT_ShowRowChangeEventHandler(ByVal sender As Object, ByVal e As MercuryBranchCT_ShowRowChangeEvent)
    
    Public Delegate Sub Territory_ComboRowChangeEventHandler(ByVal sender As Object, ByVal e As Territory_ComboRowChangeEvent)
    
    Public Delegate Sub MercuryItemCT_ShowRowChangeEventHandler(ByVal sender As Object, ByVal e As MercuryItemCT_ShowRowChangeEvent)
    
    Public Delegate Sub Item_ComboRowChangeEventHandler(ByVal sender As Object, ByVal e As Item_ComboRowChangeEvent)
    
    Public Delegate Sub SubKeyProduct_ShowRowChangeEventHandler(ByVal sender As Object, ByVal e As SubKeyProduct_ShowRowChangeEvent)
    
    Public Delegate Sub Division_ComboRowChangeEventHandler(ByVal sender As Object, ByVal e As Division_ComboRowChangeEvent)
    
    Public Delegate Sub Group_ComboRowChangeEventHandler(ByVal sender As Object, ByVal e As Group_ComboRowChangeEvent)
    
    Public Delegate Sub Province_ComboRowChangeEventHandler(ByVal sender As Object, ByVal e As Province_ComboRowChangeEvent)
    
    Public Delegate Sub TerritoryCT_ShowRowChangeEventHandler(ByVal sender As Object, ByVal e As TerritoryCT_ShowRowChangeEvent)
    
    Public Delegate Sub KeyProducts_ShowRowChangeEventHandler(ByVal sender As Object, ByVal e As KeyProducts_ShowRowChangeEvent)
    
    Public Delegate Sub TeamDivisionCT_ShowRowChangeEventHandler(ByVal sender As Object, ByVal e As TeamDivisionCT_ShowRowChangeEvent)
    
    Public Delegate Sub ProductLinesCT_ShowRowChangeEventHandler(ByVal sender As Object, ByVal e As ProductLinesCT_ShowRowChangeEvent)
    
    Public Delegate Sub CustomerType_ComboRowChangeEventHandler(ByVal sender As Object, ByVal e As CustomerType_ComboRowChangeEvent)
    
    Public Delegate Sub CallRateBudgetCT_ShowRowChangeEventHandler(ByVal sender As Object, ByVal e As CallRateBudgetCT_ShowRowChangeEvent)
    
    Public Delegate Sub Medrep_ComboRowChangeEventHandler(ByVal sender As Object, ByVal e As Medrep_ComboRowChangeEvent)
    
    Public Delegate Sub NsmCT_ShowRowChangeEventHandler(ByVal sender As Object, ByVal e As NsmCT_ShowRowChangeEvent)
    
    Public Delegate Sub SuperDivCT_ShowRowChangeEventHandler(ByVal sender As Object, ByVal e As SuperDivCT_ShowRowChangeEvent)
    
    Public Delegate Sub Supervisor_ComboRowChangeEventHandler(ByVal sender As Object, ByVal e As Supervisor_ComboRowChangeEvent)
    
    Public Delegate Sub CallRateTransCT_ShowRowChangeEventHandler(ByVal sender As Object, ByVal e As CallRateTransCT_ShowRowChangeEvent)
    
    Public Delegate Sub QpiTerritoryBudgetCT_ShowRowChangeEventHandler(ByVal sender As Object, ByVal e As QpiTerritoryBudgetCT_ShowRowChangeEvent)
    
    Public Delegate Sub DSm_ComboRowChangeEventHandler(ByVal sender As Object, ByVal e As DSm_ComboRowChangeEvent)
    
    Public Delegate Sub NSM_ComboRowChangeEventHandler(ByVal sender As Object, ByVal e As NSM_ComboRowChangeEvent)
    
    Public Delegate Sub Customer_ComboRowChangeEventHandler(ByVal sender As Object, ByVal e As Customer_ComboRowChangeEvent)
    
    Public Delegate Sub CallRate_CalenderizedRowChangeEventHandler(ByVal sender As Object, ByVal e As CallRate_CalenderizedRowChangeEvent)
    
    Public Delegate Sub CallRate_MonthlyRowChangeEventHandler(ByVal sender As Object, ByVal e As CallRate_MonthlyRowChangeEvent)
    
    Public Delegate Sub BudgetOsCT_ShowRowChangeEventHandler(ByVal sender As Object, ByVal e As BudgetOsCT_ShowRowChangeEvent)
    
    Public Delegate Sub ItemCodTab_ShowRowChangeEventHandler(ByVal sender As Object, ByVal e As ItemCodTab_ShowRowChangeEvent)
    
    Public Delegate Sub PrincipalCodTab_ShowRowChangeEventHandler(ByVal sender As Object, ByVal e As PrincipalCodTab_ShowRowChangeEvent)
    
    Public Delegate Sub ProdManCT_ShowRowChangeEventHandler(ByVal sender As Object, ByVal e As ProdManCT_ShowRowChangeEvent)
    
    Public Delegate Sub ItemPriceHist_DS_ShowRowChangeEventHandler(ByVal sender As Object, ByVal e As ItemPriceHist_DS_ShowRowChangeEvent)
    
    Public Delegate Sub ItemDivision_ShowRowChangeEventHandler(ByVal sender As Object, ByVal e As ItemDivision_ShowRowChangeEvent)
    
    Public Delegate Sub ItemPrincipal_ShowRowChangeEventHandler(ByVal sender As Object, ByVal e As ItemPrincipal_ShowRowChangeEvent)
    
    Public Delegate Sub ItemNSM_ShowRowChangeEventHandler(ByVal sender As Object, ByVal e As ItemNSM_ShowRowChangeEvent)
    
    Public Delegate Sub ItemProdMan_ShowRowChangeEventHandler(ByVal sender As Object, ByVal e As ItemProdMan_ShowRowChangeEvent)
    
    Public Delegate Sub itmSPRowChangeEventHandler(ByVal sender As Object, ByVal e As itmSPRowChangeEvent)
    
    Public Delegate Sub PM_ComboRowChangeEventHandler(ByVal sender As Object, ByVal e As PM_ComboRowChangeEvent)
    
    Public Delegate Sub QpiTerritory_ComboRowChangeEventHandler(ByVal sender As Object, ByVal e As QpiTerritory_ComboRowChangeEvent)
    
    Public Delegate Sub CustomerCodTab_ShowRowChangeEventHandler(ByVal sender As Object, ByVal e As CustomerCodTab_ShowRowChangeEvent)
    
    Public Delegate Sub QPIareaCode_ComboRowChangeEventHandler(ByVal sender As Object, ByVal e As QPIareaCode_ComboRowChangeEvent)
    
    Public Delegate Sub ExcludeCustomerListCT_ShowRowChangeEventHandler(ByVal sender As Object, ByVal e As ExcludeCustomerListCT_ShowRowChangeEvent)
    
    Public Delegate Sub CustLookupRowChangeEventHandler(ByVal sender As Object, ByVal e As CustLookupRowChangeEvent)
    
    Public Delegate Sub QPIAC_ShowRowChangeEventHandler(ByVal sender As Object, ByVal e As QPIAC_ShowRowChangeEvent)
    
    Public Delegate Sub MedRepCT_ShowRowChangeEventHandler(ByVal sender As Object, ByVal e As MedRepCT_ShowRowChangeEvent)
    
    Public Delegate Sub SupervisorCT_ShowRowChangeEventHandler(ByVal sender As Object, ByVal e As SupervisorCT_ShowRowChangeEvent)
    
    Public Delegate Sub ItemDivSubGrp_ShowRowChangeEventHandler(ByVal sender As Object, ByVal e As ItemDivSubGrp_ShowRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DivisionCT_ShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnRowid As DataColumn
        
        Private columnDivCode As DataColumn
        
        Private columnDivName As DataColumn
        
        Private columnManager As DataColumn
        
        Private columnShortName As DataColumn
        
        Private columnCreateDate As DataColumn
        
        Private columnUpdateDate As DataColumn
        
        Private columnStatus As DataColumn
        
        Private columnLastUser As DataColumn
        
        Friend Sub New()
            MyBase.New("DivisionCT_Show")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property RowidColumn As DataColumn
            Get
                Return Me.columnRowid
            End Get
        End Property
        
        Friend ReadOnly Property DivCodeColumn As DataColumn
            Get
                Return Me.columnDivCode
            End Get
        End Property
        
        Friend ReadOnly Property DivNameColumn As DataColumn
            Get
                Return Me.columnDivName
            End Get
        End Property
        
        Friend ReadOnly Property ManagerColumn As DataColumn
            Get
                Return Me.columnManager
            End Get
        End Property
        
        Friend ReadOnly Property ShortNameColumn As DataColumn
            Get
                Return Me.columnShortName
            End Get
        End Property
        
        Friend ReadOnly Property CreateDateColumn As DataColumn
            Get
                Return Me.columnCreateDate
            End Get
        End Property
        
        Friend ReadOnly Property UpdateDateColumn As DataColumn
            Get
                Return Me.columnUpdateDate
            End Get
        End Property
        
        Friend ReadOnly Property StatusColumn As DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        Friend ReadOnly Property LastUserColumn As DataColumn
            Get
                Return Me.columnLastUser
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As DivisionCT_ShowRow
            Get
                Return CType(Me.Rows(index),DivisionCT_ShowRow)
            End Get
        End Property
        
        Public Event DivisionCT_ShowRowChanged As DivisionCT_ShowRowChangeEventHandler
        
        Public Event DivisionCT_ShowRowChanging As DivisionCT_ShowRowChangeEventHandler
        
        Public Event DivisionCT_ShowRowDeleted As DivisionCT_ShowRowChangeEventHandler
        
        Public Event DivisionCT_ShowRowDeleting As DivisionCT_ShowRowChangeEventHandler
        
        Public Overloads Sub AddDivisionCT_ShowRow(ByVal row As DivisionCT_ShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDivisionCT_ShowRow(ByVal DivCode As String, ByVal DivName As String, ByVal Manager As String, ByVal ShortName As String, ByVal CreateDate As Date, ByVal UpdateDate As Date, ByVal Status As String, ByVal LastUser As String) As DivisionCT_ShowRow
            Dim rowDivisionCT_ShowRow As DivisionCT_ShowRow = CType(Me.NewRow,DivisionCT_ShowRow)
            rowDivisionCT_ShowRow.ItemArray = New Object() {Nothing, DivCode, DivName, Manager, ShortName, CreateDate, UpdateDate, Status, LastUser}
            Me.Rows.Add(rowDivisionCT_ShowRow)
            Return rowDivisionCT_ShowRow
        End Function
        
        Public Function FindByDivCode(ByVal DivCode As String) As DivisionCT_ShowRow
            Return CType(Me.Rows.Find(New Object() {DivCode}),DivisionCT_ShowRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As DivisionCT_ShowDataTable = CType(MyBase.Clone,DivisionCT_ShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New DivisionCT_ShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnRowid = Me.Columns("Rowid")
            Me.columnDivCode = Me.Columns("DivCode")
            Me.columnDivName = Me.Columns("DivName")
            Me.columnManager = Me.Columns("Manager")
            Me.columnShortName = Me.Columns("ShortName")
            Me.columnCreateDate = Me.Columns("CreateDate")
            Me.columnUpdateDate = Me.Columns("UpdateDate")
            Me.columnStatus = Me.Columns("Status")
            Me.columnLastUser = Me.Columns("LastUser")
        End Sub
        
        Private Sub InitClass()
            Me.columnRowid = New DataColumn("Rowid", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRowid)
            Me.columnDivCode = New DataColumn("DivCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDivCode)
            Me.columnDivName = New DataColumn("DivName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDivName)
            Me.columnManager = New DataColumn("Manager", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnManager)
            Me.columnShortName = New DataColumn("ShortName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnShortName)
            Me.columnCreateDate = New DataColumn("CreateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreateDate)
            Me.columnUpdateDate = New DataColumn("UpdateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUpdateDate)
            Me.columnStatus = New DataColumn("Status", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatus)
            Me.columnLastUser = New DataColumn("LastUser", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLastUser)
            Me.Constraints.Add(New UniqueConstraint("CodeTablesDSKey1", New DataColumn() {Me.columnDivCode}, true))
            Me.columnRowid.AutoIncrement = true
            Me.columnRowid.AllowDBNull = false
            Me.columnRowid.ReadOnly = true
            Me.columnDivCode.AllowDBNull = false
            Me.columnDivCode.Unique = true
            Me.columnDivName.AllowDBNull = false
        End Sub
        
        Public Function NewDivisionCT_ShowRow() As DivisionCT_ShowRow
            Return CType(Me.NewRow,DivisionCT_ShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New DivisionCT_ShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DivisionCT_ShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DivisionCT_ShowRowChangedEvent) Is Nothing) Then
                RaiseEvent DivisionCT_ShowRowChanged(Me, New DivisionCT_ShowRowChangeEvent(CType(e.Row,DivisionCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DivisionCT_ShowRowChangingEvent) Is Nothing) Then
                RaiseEvent DivisionCT_ShowRowChanging(Me, New DivisionCT_ShowRowChangeEvent(CType(e.Row,DivisionCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DivisionCT_ShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent DivisionCT_ShowRowDeleted(Me, New DivisionCT_ShowRowChangeEvent(CType(e.Row,DivisionCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DivisionCT_ShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent DivisionCT_ShowRowDeleting(Me, New DivisionCT_ShowRowChangeEvent(CType(e.Row,DivisionCT_ShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDivisionCT_ShowRow(ByVal row As DivisionCT_ShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DivisionCT_ShowRow
        Inherits DataRow
        
        Private tableDivisionCT_Show As DivisionCT_ShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDivisionCT_Show = CType(Me.Table,DivisionCT_ShowDataTable)
        End Sub
        
        Public Property Rowid As Integer
            Get
                Return CType(Me(Me.tableDivisionCT_Show.RowidColumn),Integer)
            End Get
            Set
                Me(Me.tableDivisionCT_Show.RowidColumn) = value
            End Set
        End Property
        
        Public Property DivCode As String
            Get
                Return CType(Me(Me.tableDivisionCT_Show.DivCodeColumn),String)
            End Get
            Set
                Me(Me.tableDivisionCT_Show.DivCodeColumn) = value
            End Set
        End Property
        
        Public Property DivName As String
            Get
                Return CType(Me(Me.tableDivisionCT_Show.DivNameColumn),String)
            End Get
            Set
                Me(Me.tableDivisionCT_Show.DivNameColumn) = value
            End Set
        End Property
        
        Public Property Manager As String
            Get
                Try 
                    Return CType(Me(Me.tableDivisionCT_Show.ManagerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDivisionCT_Show.ManagerColumn) = value
            End Set
        End Property
        
        Public Property ShortName As String
            Get
                Try 
                    Return CType(Me(Me.tableDivisionCT_Show.ShortNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDivisionCT_Show.ShortNameColumn) = value
            End Set
        End Property
        
        Public Property CreateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableDivisionCT_Show.CreateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDivisionCT_Show.CreateDateColumn) = value
            End Set
        End Property
        
        Public Property UpdateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableDivisionCT_Show.UpdateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDivisionCT_Show.UpdateDateColumn) = value
            End Set
        End Property
        
        Public Property Status As String
            Get
                Try 
                    Return CType(Me(Me.tableDivisionCT_Show.StatusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDivisionCT_Show.StatusColumn) = value
            End Set
        End Property
        
        Public Property LastUser As String
            Get
                Try 
                    Return CType(Me(Me.tableDivisionCT_Show.LastUserColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDivisionCT_Show.LastUserColumn) = value
            End Set
        End Property
        
        Public Function IsManagerNull() As Boolean
            Return Me.IsNull(Me.tableDivisionCT_Show.ManagerColumn)
        End Function
        
        Public Sub SetManagerNull()
            Me(Me.tableDivisionCT_Show.ManagerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsShortNameNull() As Boolean
            Return Me.IsNull(Me.tableDivisionCT_Show.ShortNameColumn)
        End Function
        
        Public Sub SetShortNameNull()
            Me(Me.tableDivisionCT_Show.ShortNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreateDateNull() As Boolean
            Return Me.IsNull(Me.tableDivisionCT_Show.CreateDateColumn)
        End Function
        
        Public Sub SetCreateDateNull()
            Me(Me.tableDivisionCT_Show.CreateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUpdateDateNull() As Boolean
            Return Me.IsNull(Me.tableDivisionCT_Show.UpdateDateColumn)
        End Function
        
        Public Sub SetUpdateDateNull()
            Me(Me.tableDivisionCT_Show.UpdateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tableDivisionCT_Show.StatusColumn)
        End Function
        
        Public Sub SetStatusNull()
            Me(Me.tableDivisionCT_Show.StatusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLastUserNull() As Boolean
            Return Me.IsNull(Me.tableDivisionCT_Show.LastUserColumn)
        End Function
        
        Public Sub SetLastUserNull()
            Me(Me.tableDivisionCT_Show.LastUserColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DivisionCT_ShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As DivisionCT_ShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As DivisionCT_ShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As DivisionCT_ShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GroupCT_ShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnRowid As DataColumn
        
        Private columnCode As DataColumn
        
        Private columnGroup As DataColumn
        
        Private columnCreateDate As DataColumn
        
        Private columnUpdateDate As DataColumn
        
        Friend Sub New()
            MyBase.New("GroupCT_Show")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property RowidColumn As DataColumn
            Get
                Return Me.columnRowid
            End Get
        End Property
        
        Friend ReadOnly Property CodeColumn As DataColumn
            Get
                Return Me.columnCode
            End Get
        End Property
        
        Friend ReadOnly Property GroupColumn As DataColumn
            Get
                Return Me.columnGroup
            End Get
        End Property
        
        Friend ReadOnly Property CreateDateColumn As DataColumn
            Get
                Return Me.columnCreateDate
            End Get
        End Property
        
        Friend ReadOnly Property UpdateDateColumn As DataColumn
            Get
                Return Me.columnUpdateDate
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GroupCT_ShowRow
            Get
                Return CType(Me.Rows(index),GroupCT_ShowRow)
            End Get
        End Property
        
        Public Event GroupCT_ShowRowChanged As GroupCT_ShowRowChangeEventHandler
        
        Public Event GroupCT_ShowRowChanging As GroupCT_ShowRowChangeEventHandler
        
        Public Event GroupCT_ShowRowDeleted As GroupCT_ShowRowChangeEventHandler
        
        Public Event GroupCT_ShowRowDeleting As GroupCT_ShowRowChangeEventHandler
        
        Public Overloads Sub AddGroupCT_ShowRow(ByVal row As GroupCT_ShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGroupCT_ShowRow(ByVal Code As String, ByVal Group As String, ByVal CreateDate As Date, ByVal UpdateDate As Date) As GroupCT_ShowRow
            Dim rowGroupCT_ShowRow As GroupCT_ShowRow = CType(Me.NewRow,GroupCT_ShowRow)
            rowGroupCT_ShowRow.ItemArray = New Object() {Nothing, Code, Group, CreateDate, UpdateDate}
            Me.Rows.Add(rowGroupCT_ShowRow)
            Return rowGroupCT_ShowRow
        End Function
        
        Public Function FindByRowid(ByVal Rowid As Integer) As GroupCT_ShowRow
            Return CType(Me.Rows.Find(New Object() {Rowid}),GroupCT_ShowRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GroupCT_ShowDataTable = CType(MyBase.Clone,GroupCT_ShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GroupCT_ShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnRowid = Me.Columns("Rowid")
            Me.columnCode = Me.Columns("Code")
            Me.columnGroup = Me.Columns("Group")
            Me.columnCreateDate = Me.Columns("CreateDate")
            Me.columnUpdateDate = Me.Columns("UpdateDate")
        End Sub
        
        Private Sub InitClass()
            Me.columnRowid = New DataColumn("Rowid", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRowid)
            Me.columnCode = New DataColumn("Code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCode)
            Me.columnGroup = New DataColumn("Group", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGroup)
            Me.columnCreateDate = New DataColumn("CreateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreateDate)
            Me.columnUpdateDate = New DataColumn("UpdateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUpdateDate)
            Me.Constraints.Add(New UniqueConstraint("CodeTablesDSKey2", New DataColumn() {Me.columnRowid}, true))
            Me.columnRowid.AutoIncrement = true
            Me.columnRowid.AllowDBNull = false
            Me.columnRowid.ReadOnly = true
            Me.columnRowid.Unique = true
        End Sub
        
        Public Function NewGroupCT_ShowRow() As GroupCT_ShowRow
            Return CType(Me.NewRow,GroupCT_ShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GroupCT_ShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GroupCT_ShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GroupCT_ShowRowChangedEvent) Is Nothing) Then
                RaiseEvent GroupCT_ShowRowChanged(Me, New GroupCT_ShowRowChangeEvent(CType(e.Row,GroupCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GroupCT_ShowRowChangingEvent) Is Nothing) Then
                RaiseEvent GroupCT_ShowRowChanging(Me, New GroupCT_ShowRowChangeEvent(CType(e.Row,GroupCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GroupCT_ShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent GroupCT_ShowRowDeleted(Me, New GroupCT_ShowRowChangeEvent(CType(e.Row,GroupCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GroupCT_ShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent GroupCT_ShowRowDeleting(Me, New GroupCT_ShowRowChangeEvent(CType(e.Row,GroupCT_ShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGroupCT_ShowRow(ByVal row As GroupCT_ShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GroupCT_ShowRow
        Inherits DataRow
        
        Private tableGroupCT_Show As GroupCT_ShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGroupCT_Show = CType(Me.Table,GroupCT_ShowDataTable)
        End Sub
        
        Public Property Rowid As Integer
            Get
                Return CType(Me(Me.tableGroupCT_Show.RowidColumn),Integer)
            End Get
            Set
                Me(Me.tableGroupCT_Show.RowidColumn) = value
            End Set
        End Property
        
        Public Property Code As String
            Get
                Try 
                    Return CType(Me(Me.tableGroupCT_Show.CodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGroupCT_Show.CodeColumn) = value
            End Set
        End Property
        
        Public Property Group As String
            Get
                Try 
                    Return CType(Me(Me.tableGroupCT_Show.GroupColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGroupCT_Show.GroupColumn) = value
            End Set
        End Property
        
        Public Property CreateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableGroupCT_Show.CreateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGroupCT_Show.CreateDateColumn) = value
            End Set
        End Property
        
        Public Property UpdateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableGroupCT_Show.UpdateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGroupCT_Show.UpdateDateColumn) = value
            End Set
        End Property
        
        Public Function IsCodeNull() As Boolean
            Return Me.IsNull(Me.tableGroupCT_Show.CodeColumn)
        End Function
        
        Public Sub SetCodeNull()
            Me(Me.tableGroupCT_Show.CodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGroupNull() As Boolean
            Return Me.IsNull(Me.tableGroupCT_Show.GroupColumn)
        End Function
        
        Public Sub SetGroupNull()
            Me(Me.tableGroupCT_Show.GroupColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreateDateNull() As Boolean
            Return Me.IsNull(Me.tableGroupCT_Show.CreateDateColumn)
        End Function
        
        Public Sub SetCreateDateNull()
            Me(Me.tableGroupCT_Show.CreateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUpdateDateNull() As Boolean
            Return Me.IsNull(Me.tableGroupCT_Show.UpdateDateColumn)
        End Function
        
        Public Sub SetUpdateDateNull()
            Me(Me.tableGroupCT_Show.UpdateDateColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GroupCT_ShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GroupCT_ShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GroupCT_ShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GroupCT_ShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ItemCT_ShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnRowid As DataColumn
        
        Private columnItemCode As DataColumn
        
        Private columnItemDesc As DataColumn
        
        Private columnItemUnit As DataColumn
        
        Private columnUnitPrice As DataColumn
        
        Private columnPrinCode As DataColumn
        
        Private columnPrinName As DataColumn
        
        Private columnLine As DataColumn
        
        Private columnCreateDate As DataColumn
        
        Private columnUpdateDate As DataColumn
        
        Private columnItemCT_Show_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("ItemCT_Show")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property RowidColumn As DataColumn
            Get
                Return Me.columnRowid
            End Get
        End Property
        
        Friend ReadOnly Property ItemCodeColumn As DataColumn
            Get
                Return Me.columnItemCode
            End Get
        End Property
        
        Friend ReadOnly Property ItemDescColumn As DataColumn
            Get
                Return Me.columnItemDesc
            End Get
        End Property
        
        Friend ReadOnly Property ItemUnitColumn As DataColumn
            Get
                Return Me.columnItemUnit
            End Get
        End Property
        
        Friend ReadOnly Property UnitPriceColumn As DataColumn
            Get
                Return Me.columnUnitPrice
            End Get
        End Property
        
        Friend ReadOnly Property PrinCodeColumn As DataColumn
            Get
                Return Me.columnPrinCode
            End Get
        End Property
        
        Friend ReadOnly Property PrinNameColumn As DataColumn
            Get
                Return Me.columnPrinName
            End Get
        End Property
        
        Friend ReadOnly Property LineColumn As DataColumn
            Get
                Return Me.columnLine
            End Get
        End Property
        
        Friend ReadOnly Property CreateDateColumn As DataColumn
            Get
                Return Me.columnCreateDate
            End Get
        End Property
        
        Friend ReadOnly Property UpdateDateColumn As DataColumn
            Get
                Return Me.columnUpdateDate
            End Get
        End Property
        
        Friend ReadOnly Property ItemCT_Show_IdColumn As DataColumn
            Get
                Return Me.columnItemCT_Show_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ItemCT_ShowRow
            Get
                Return CType(Me.Rows(index),ItemCT_ShowRow)
            End Get
        End Property
        
        Public Event ItemCT_ShowRowChanged As ItemCT_ShowRowChangeEventHandler
        
        Public Event ItemCT_ShowRowChanging As ItemCT_ShowRowChangeEventHandler
        
        Public Event ItemCT_ShowRowDeleted As ItemCT_ShowRowChangeEventHandler
        
        Public Event ItemCT_ShowRowDeleting As ItemCT_ShowRowChangeEventHandler
        
        Public Overloads Sub AddItemCT_ShowRow(ByVal row As ItemCT_ShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddItemCT_ShowRow(ByVal ItemCode As String, ByVal ItemDesc As String, ByVal ItemUnit As String, ByVal UnitPrice As Decimal, ByVal PrinCode As String, ByVal PrinName As String, ByVal Line As String, ByVal CreateDate As Date, ByVal UpdateDate As Date) As ItemCT_ShowRow
            Dim rowItemCT_ShowRow As ItemCT_ShowRow = CType(Me.NewRow,ItemCT_ShowRow)
            rowItemCT_ShowRow.ItemArray = New Object() {Nothing, ItemCode, ItemDesc, ItemUnit, UnitPrice, PrinCode, PrinName, Line, CreateDate, UpdateDate, Nothing}
            Me.Rows.Add(rowItemCT_ShowRow)
            Return rowItemCT_ShowRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ItemCT_ShowDataTable = CType(MyBase.Clone,ItemCT_ShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ItemCT_ShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnRowid = Me.Columns("Rowid")
            Me.columnItemCode = Me.Columns("ItemCode")
            Me.columnItemDesc = Me.Columns("ItemDesc")
            Me.columnItemUnit = Me.Columns("ItemUnit")
            Me.columnUnitPrice = Me.Columns("UnitPrice")
            Me.columnPrinCode = Me.Columns("PrinCode")
            Me.columnPrinName = Me.Columns("PrinName")
            Me.columnLine = Me.Columns("Line")
            Me.columnCreateDate = Me.Columns("CreateDate")
            Me.columnUpdateDate = Me.Columns("UpdateDate")
            Me.columnItemCT_Show_Id = Me.Columns("ItemCT_Show_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnRowid = New DataColumn("Rowid", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRowid)
            Me.columnItemCode = New DataColumn("ItemCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemCode)
            Me.columnItemDesc = New DataColumn("ItemDesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemDesc)
            Me.columnItemUnit = New DataColumn("ItemUnit", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemUnit)
            Me.columnUnitPrice = New DataColumn("UnitPrice", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUnitPrice)
            Me.columnPrinCode = New DataColumn("PrinCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrinCode)
            Me.columnPrinName = New DataColumn("PrinName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrinName)
            Me.columnLine = New DataColumn("Line", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLine)
            Me.columnCreateDate = New DataColumn("CreateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreateDate)
            Me.columnUpdateDate = New DataColumn("UpdateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUpdateDate)
            Me.columnItemCT_Show_Id = New DataColumn("ItemCT_Show_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnItemCT_Show_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnItemCT_Show_Id}, true))
            Me.columnRowid.AutoIncrement = true
            Me.columnRowid.AllowDBNull = false
            Me.columnRowid.ReadOnly = true
            Me.columnItemCode.AllowDBNull = false
            Me.columnItemDesc.AllowDBNull = false
            Me.columnItemUnit.AllowDBNull = false
            Me.columnUnitPrice.AllowDBNull = false
            Me.columnPrinCode.AllowDBNull = false
            Me.columnPrinName.AllowDBNull = false
            Me.columnCreateDate.AllowDBNull = false
            Me.columnUpdateDate.AllowDBNull = false
            Me.columnItemCT_Show_Id.AutoIncrement = true
            Me.columnItemCT_Show_Id.AllowDBNull = false
            Me.columnItemCT_Show_Id.Unique = true
        End Sub
        
        Public Function NewItemCT_ShowRow() As ItemCT_ShowRow
            Return CType(Me.NewRow,ItemCT_ShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ItemCT_ShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ItemCT_ShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ItemCT_ShowRowChangedEvent) Is Nothing) Then
                RaiseEvent ItemCT_ShowRowChanged(Me, New ItemCT_ShowRowChangeEvent(CType(e.Row,ItemCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ItemCT_ShowRowChangingEvent) Is Nothing) Then
                RaiseEvent ItemCT_ShowRowChanging(Me, New ItemCT_ShowRowChangeEvent(CType(e.Row,ItemCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ItemCT_ShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent ItemCT_ShowRowDeleted(Me, New ItemCT_ShowRowChangeEvent(CType(e.Row,ItemCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ItemCT_ShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent ItemCT_ShowRowDeleting(Me, New ItemCT_ShowRowChangeEvent(CType(e.Row,ItemCT_ShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveItemCT_ShowRow(ByVal row As ItemCT_ShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ItemCT_ShowRow
        Inherits DataRow
        
        Private tableItemCT_Show As ItemCT_ShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableItemCT_Show = CType(Me.Table,ItemCT_ShowDataTable)
        End Sub
        
        Public Property Rowid As Decimal
            Get
                Return CType(Me(Me.tableItemCT_Show.RowidColumn),Decimal)
            End Get
            Set
                Me(Me.tableItemCT_Show.RowidColumn) = value
            End Set
        End Property
        
        Public Property ItemCode As String
            Get
                Return CType(Me(Me.tableItemCT_Show.ItemCodeColumn),String)
            End Get
            Set
                Me(Me.tableItemCT_Show.ItemCodeColumn) = value
            End Set
        End Property
        
        Public Property ItemDesc As String
            Get
                Return CType(Me(Me.tableItemCT_Show.ItemDescColumn),String)
            End Get
            Set
                Me(Me.tableItemCT_Show.ItemDescColumn) = value
            End Set
        End Property
        
        Public Property ItemUnit As String
            Get
                Return CType(Me(Me.tableItemCT_Show.ItemUnitColumn),String)
            End Get
            Set
                Me(Me.tableItemCT_Show.ItemUnitColumn) = value
            End Set
        End Property
        
        Public Property UnitPrice As Decimal
            Get
                Return CType(Me(Me.tableItemCT_Show.UnitPriceColumn),Decimal)
            End Get
            Set
                Me(Me.tableItemCT_Show.UnitPriceColumn) = value
            End Set
        End Property
        
        Public Property PrinCode As String
            Get
                Return CType(Me(Me.tableItemCT_Show.PrinCodeColumn),String)
            End Get
            Set
                Me(Me.tableItemCT_Show.PrinCodeColumn) = value
            End Set
        End Property
        
        Public Property PrinName As String
            Get
                Return CType(Me(Me.tableItemCT_Show.PrinNameColumn),String)
            End Get
            Set
                Me(Me.tableItemCT_Show.PrinNameColumn) = value
            End Set
        End Property
        
        Public Property Line As String
            Get
                Try 
                    Return CType(Me(Me.tableItemCT_Show.LineColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemCT_Show.LineColumn) = value
            End Set
        End Property
        
        Public Property CreateDate As Date
            Get
                Return CType(Me(Me.tableItemCT_Show.CreateDateColumn),Date)
            End Get
            Set
                Me(Me.tableItemCT_Show.CreateDateColumn) = value
            End Set
        End Property
        
        Public Property UpdateDate As Date
            Get
                Return CType(Me(Me.tableItemCT_Show.UpdateDateColumn),Date)
            End Get
            Set
                Me(Me.tableItemCT_Show.UpdateDateColumn) = value
            End Set
        End Property
        
        Public Function IsLineNull() As Boolean
            Return Me.IsNull(Me.tableItemCT_Show.LineColumn)
        End Function
        
        Public Sub SetLineNull()
            Me(Me.tableItemCT_Show.LineColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetPrincipal_ComboRows() As Principal_ComboRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("ItemCT_Show_Principal_Combo")),Principal_ComboRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ItemCT_ShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ItemCT_ShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ItemCT_ShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ItemCT_ShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Principal_ComboDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPrinCode As DataColumn
        
        Private columnPrinName As DataColumn
        
        Private columnItemCT_Show_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("Principal_Combo")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property PrinCodeColumn As DataColumn
            Get
                Return Me.columnPrinCode
            End Get
        End Property
        
        Friend ReadOnly Property PrinNameColumn As DataColumn
            Get
                Return Me.columnPrinName
            End Get
        End Property
        
        Friend ReadOnly Property ItemCT_Show_IdColumn As DataColumn
            Get
                Return Me.columnItemCT_Show_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Principal_ComboRow
            Get
                Return CType(Me.Rows(index),Principal_ComboRow)
            End Get
        End Property
        
        Public Event Principal_ComboRowChanged As Principal_ComboRowChangeEventHandler
        
        Public Event Principal_ComboRowChanging As Principal_ComboRowChangeEventHandler
        
        Public Event Principal_ComboRowDeleted As Principal_ComboRowChangeEventHandler
        
        Public Event Principal_ComboRowDeleting As Principal_ComboRowChangeEventHandler
        
        Public Overloads Sub AddPrincipal_ComboRow(ByVal row As Principal_ComboRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPrincipal_ComboRow(ByVal PrinCode As String, ByVal PrinName As String, ByVal parentItemCT_ShowRowByItemCT_Show_Principal_Combo As ItemCT_ShowRow) As Principal_ComboRow
            Dim rowPrincipal_ComboRow As Principal_ComboRow = CType(Me.NewRow,Principal_ComboRow)
            rowPrincipal_ComboRow.ItemArray = New Object() {PrinCode, PrinName, parentItemCT_ShowRowByItemCT_Show_Principal_Combo(10)}
            Me.Rows.Add(rowPrincipal_ComboRow)
            Return rowPrincipal_ComboRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Principal_ComboDataTable = CType(MyBase.Clone,Principal_ComboDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Principal_ComboDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnPrinCode = Me.Columns("PrinCode")
            Me.columnPrinName = Me.Columns("PrinName")
            Me.columnItemCT_Show_Id = Me.Columns("ItemCT_Show_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnPrinCode = New DataColumn("PrinCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrinCode)
            Me.columnPrinName = New DataColumn("PrinName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrinName)
            Me.columnItemCT_Show_Id = New DataColumn("ItemCT_Show_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnItemCT_Show_Id)
        End Sub
        
        Public Function NewPrincipal_ComboRow() As Principal_ComboRow
            Return CType(Me.NewRow,Principal_ComboRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Principal_ComboRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Principal_ComboRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Principal_ComboRowChangedEvent) Is Nothing) Then
                RaiseEvent Principal_ComboRowChanged(Me, New Principal_ComboRowChangeEvent(CType(e.Row,Principal_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Principal_ComboRowChangingEvent) Is Nothing) Then
                RaiseEvent Principal_ComboRowChanging(Me, New Principal_ComboRowChangeEvent(CType(e.Row,Principal_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Principal_ComboRowDeletedEvent) Is Nothing) Then
                RaiseEvent Principal_ComboRowDeleted(Me, New Principal_ComboRowChangeEvent(CType(e.Row,Principal_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Principal_ComboRowDeletingEvent) Is Nothing) Then
                RaiseEvent Principal_ComboRowDeleting(Me, New Principal_ComboRowChangeEvent(CType(e.Row,Principal_ComboRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePrincipal_ComboRow(ByVal row As Principal_ComboRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Principal_ComboRow
        Inherits DataRow
        
        Private tablePrincipal_Combo As Principal_ComboDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePrincipal_Combo = CType(Me.Table,Principal_ComboDataTable)
        End Sub
        
        Public Property PrinCode As String
            Get
                Try 
                    Return CType(Me(Me.tablePrincipal_Combo.PrinCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrincipal_Combo.PrinCodeColumn) = value
            End Set
        End Property
        
        Public Property PrinName As String
            Get
                Try 
                    Return CType(Me(Me.tablePrincipal_Combo.PrinNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrincipal_Combo.PrinNameColumn) = value
            End Set
        End Property
        
        Public Property ItemCT_ShowRow As ItemCT_ShowRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ItemCT_Show_Principal_Combo")),ItemCT_ShowRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ItemCT_Show_Principal_Combo"))
            End Set
        End Property
        
        Public Function IsPrinCodeNull() As Boolean
            Return Me.IsNull(Me.tablePrincipal_Combo.PrinCodeColumn)
        End Function
        
        Public Sub SetPrinCodeNull()
            Me(Me.tablePrincipal_Combo.PrinCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPrinNameNull() As Boolean
            Return Me.IsNull(Me.tablePrincipal_Combo.PrinNameColumn)
        End Function
        
        Public Sub SetPrinNameNull()
            Me(Me.tablePrincipal_Combo.PrinNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Principal_ComboRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Principal_ComboRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Principal_ComboRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Principal_ComboRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ProvinceCT_ShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnrowid As DataColumn
        
        Private columnpro_code As DataColumn
        
        Private columnprovince As DataColumn
        
        Private column_region As DataColumn
        
        Private columnCreateDate As DataColumn
        
        Private columnUpdateDate As DataColumn
        
        Friend Sub New()
            MyBase.New("ProvinceCT_Show")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property rowidColumn As DataColumn
            Get
                Return Me.columnrowid
            End Get
        End Property
        
        Friend ReadOnly Property pro_codeColumn As DataColumn
            Get
                Return Me.columnpro_code
            End Get
        End Property
        
        Friend ReadOnly Property provinceColumn As DataColumn
            Get
                Return Me.columnprovince
            End Get
        End Property
        
        Friend ReadOnly Property _regionColumn As DataColumn
            Get
                Return Me.column_region
            End Get
        End Property
        
        Friend ReadOnly Property CreateDateColumn As DataColumn
            Get
                Return Me.columnCreateDate
            End Get
        End Property
        
        Friend ReadOnly Property UpdateDateColumn As DataColumn
            Get
                Return Me.columnUpdateDate
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProvinceCT_ShowRow
            Get
                Return CType(Me.Rows(index),ProvinceCT_ShowRow)
            End Get
        End Property
        
        Public Event ProvinceCT_ShowRowChanged As ProvinceCT_ShowRowChangeEventHandler
        
        Public Event ProvinceCT_ShowRowChanging As ProvinceCT_ShowRowChangeEventHandler
        
        Public Event ProvinceCT_ShowRowDeleted As ProvinceCT_ShowRowChangeEventHandler
        
        Public Event ProvinceCT_ShowRowDeleting As ProvinceCT_ShowRowChangeEventHandler
        
        Public Overloads Sub AddProvinceCT_ShowRow(ByVal row As ProvinceCT_ShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddProvinceCT_ShowRow(ByVal pro_code As String, ByVal province As String, ByVal _region As String, ByVal CreateDate As Date, ByVal UpdateDate As Date) As ProvinceCT_ShowRow
            Dim rowProvinceCT_ShowRow As ProvinceCT_ShowRow = CType(Me.NewRow,ProvinceCT_ShowRow)
            rowProvinceCT_ShowRow.ItemArray = New Object() {Nothing, pro_code, province, _region, CreateDate, UpdateDate}
            Me.Rows.Add(rowProvinceCT_ShowRow)
            Return rowProvinceCT_ShowRow
        End Function
        
        Public Function FindByrowid(ByVal rowid As Decimal) As ProvinceCT_ShowRow
            Return CType(Me.Rows.Find(New Object() {rowid}),ProvinceCT_ShowRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ProvinceCT_ShowDataTable = CType(MyBase.Clone,ProvinceCT_ShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ProvinceCT_ShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnrowid = Me.Columns("rowid")
            Me.columnpro_code = Me.Columns("pro_code")
            Me.columnprovince = Me.Columns("province")
            Me.column_region = Me.Columns("region")
            Me.columnCreateDate = Me.Columns("CreateDate")
            Me.columnUpdateDate = Me.Columns("UpdateDate")
        End Sub
        
        Private Sub InitClass()
            Me.columnrowid = New DataColumn("rowid", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrowid)
            Me.columnpro_code = New DataColumn("pro_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpro_code)
            Me.columnprovince = New DataColumn("province", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprovince)
            Me.column_region = New DataColumn("region", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_region)
            Me.columnCreateDate = New DataColumn("CreateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreateDate)
            Me.columnUpdateDate = New DataColumn("UpdateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUpdateDate)
            Me.Constraints.Add(New UniqueConstraint("CodeTablesDSKey4", New DataColumn() {Me.columnrowid}, true))
            Me.columnrowid.AutoIncrement = true
            Me.columnrowid.AllowDBNull = false
            Me.columnrowid.ReadOnly = true
            Me.columnrowid.Unique = true
            Me.columnCreateDate.AllowDBNull = false
            Me.columnUpdateDate.AllowDBNull = false
        End Sub
        
        Public Function NewProvinceCT_ShowRow() As ProvinceCT_ShowRow
            Return CType(Me.NewRow,ProvinceCT_ShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ProvinceCT_ShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ProvinceCT_ShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ProvinceCT_ShowRowChangedEvent) Is Nothing) Then
                RaiseEvent ProvinceCT_ShowRowChanged(Me, New ProvinceCT_ShowRowChangeEvent(CType(e.Row,ProvinceCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ProvinceCT_ShowRowChangingEvent) Is Nothing) Then
                RaiseEvent ProvinceCT_ShowRowChanging(Me, New ProvinceCT_ShowRowChangeEvent(CType(e.Row,ProvinceCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ProvinceCT_ShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent ProvinceCT_ShowRowDeleted(Me, New ProvinceCT_ShowRowChangeEvent(CType(e.Row,ProvinceCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ProvinceCT_ShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent ProvinceCT_ShowRowDeleting(Me, New ProvinceCT_ShowRowChangeEvent(CType(e.Row,ProvinceCT_ShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveProvinceCT_ShowRow(ByVal row As ProvinceCT_ShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ProvinceCT_ShowRow
        Inherits DataRow
        
        Private tableProvinceCT_Show As ProvinceCT_ShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableProvinceCT_Show = CType(Me.Table,ProvinceCT_ShowDataTable)
        End Sub
        
        Public Property rowid As Decimal
            Get
                Return CType(Me(Me.tableProvinceCT_Show.rowidColumn),Decimal)
            End Get
            Set
                Me(Me.tableProvinceCT_Show.rowidColumn) = value
            End Set
        End Property
        
        Public Property pro_code As String
            Get
                Try 
                    Return CType(Me(Me.tableProvinceCT_Show.pro_codeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProvinceCT_Show.pro_codeColumn) = value
            End Set
        End Property
        
        Public Property province As String
            Get
                Try 
                    Return CType(Me(Me.tableProvinceCT_Show.provinceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProvinceCT_Show.provinceColumn) = value
            End Set
        End Property
        
        Public Property _region As String
            Get
                Try 
                    Return CType(Me(Me.tableProvinceCT_Show._regionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProvinceCT_Show._regionColumn) = value
            End Set
        End Property
        
        Public Property CreateDate As Date
            Get
                Return CType(Me(Me.tableProvinceCT_Show.CreateDateColumn),Date)
            End Get
            Set
                Me(Me.tableProvinceCT_Show.CreateDateColumn) = value
            End Set
        End Property
        
        Public Property UpdateDate As Date
            Get
                Return CType(Me(Me.tableProvinceCT_Show.UpdateDateColumn),Date)
            End Get
            Set
                Me(Me.tableProvinceCT_Show.UpdateDateColumn) = value
            End Set
        End Property
        
        Public Function Ispro_codeNull() As Boolean
            Return Me.IsNull(Me.tableProvinceCT_Show.pro_codeColumn)
        End Function
        
        Public Sub Setpro_codeNull()
            Me(Me.tableProvinceCT_Show.pro_codeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsprovinceNull() As Boolean
            Return Me.IsNull(Me.tableProvinceCT_Show.provinceColumn)
        End Function
        
        Public Sub SetprovinceNull()
            Me(Me.tableProvinceCT_Show.provinceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Is_regionNull() As Boolean
            Return Me.IsNull(Me.tableProvinceCT_Show._regionColumn)
        End Function
        
        Public Sub Set_regionNull()
            Me(Me.tableProvinceCT_Show._regionColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ProvinceCT_ShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ProvinceCT_ShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ProvinceCT_ShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ProvinceCT_ShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ProductLines_ComboDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columndescription As DataColumn
        
        Friend Sub New()
            MyBase.New("ProductLines_Combo")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property descriptionColumn As DataColumn
            Get
                Return Me.columndescription
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProductLines_ComboRow
            Get
                Return CType(Me.Rows(index),ProductLines_ComboRow)
            End Get
        End Property
        
        Public Event ProductLines_ComboRowChanged As ProductLines_ComboRowChangeEventHandler
        
        Public Event ProductLines_ComboRowChanging As ProductLines_ComboRowChangeEventHandler
        
        Public Event ProductLines_ComboRowDeleted As ProductLines_ComboRowChangeEventHandler
        
        Public Event ProductLines_ComboRowDeleting As ProductLines_ComboRowChangeEventHandler
        
        Public Overloads Sub AddProductLines_ComboRow(ByVal row As ProductLines_ComboRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddProductLines_ComboRow(ByVal description As String) As ProductLines_ComboRow
            Dim rowProductLines_ComboRow As ProductLines_ComboRow = CType(Me.NewRow,ProductLines_ComboRow)
            rowProductLines_ComboRow.ItemArray = New Object() {description}
            Me.Rows.Add(rowProductLines_ComboRow)
            Return rowProductLines_ComboRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ProductLines_ComboDataTable = CType(MyBase.Clone,ProductLines_ComboDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ProductLines_ComboDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columndescription = Me.Columns("description")
        End Sub
        
        Private Sub InitClass()
            Me.columndescription = New DataColumn("description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndescription)
        End Sub
        
        Public Function NewProductLines_ComboRow() As ProductLines_ComboRow
            Return CType(Me.NewRow,ProductLines_ComboRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ProductLines_ComboRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ProductLines_ComboRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ProductLines_ComboRowChangedEvent) Is Nothing) Then
                RaiseEvent ProductLines_ComboRowChanged(Me, New ProductLines_ComboRowChangeEvent(CType(e.Row,ProductLines_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ProductLines_ComboRowChangingEvent) Is Nothing) Then
                RaiseEvent ProductLines_ComboRowChanging(Me, New ProductLines_ComboRowChangeEvent(CType(e.Row,ProductLines_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ProductLines_ComboRowDeletedEvent) Is Nothing) Then
                RaiseEvent ProductLines_ComboRowDeleted(Me, New ProductLines_ComboRowChangeEvent(CType(e.Row,ProductLines_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ProductLines_ComboRowDeletingEvent) Is Nothing) Then
                RaiseEvent ProductLines_ComboRowDeleting(Me, New ProductLines_ComboRowChangeEvent(CType(e.Row,ProductLines_ComboRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveProductLines_ComboRow(ByVal row As ProductLines_ComboRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ProductLines_ComboRow
        Inherits DataRow
        
        Private tableProductLines_Combo As ProductLines_ComboDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableProductLines_Combo = CType(Me.Table,ProductLines_ComboDataTable)
        End Sub
        
        Public Property description As String
            Get
                Try 
                    Return CType(Me(Me.tableProductLines_Combo.descriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductLines_Combo.descriptionColumn) = value
            End Set
        End Property
        
        Public Function IsdescriptionNull() As Boolean
            Return Me.IsNull(Me.tableProductLines_Combo.descriptionColumn)
        End Function
        
        Public Sub SetdescriptionNull()
            Me(Me.tableProductLines_Combo.descriptionColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ProductLines_ComboRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ProductLines_ComboRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ProductLines_ComboRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ProductLines_ComboRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MercuryBranchCT_ShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnRowid As DataColumn
        
        Private columnBranchCode As DataColumn
        
        Private columnBranchName As DataColumn
        
        Private columnAddress1 As DataColumn
        
        Private columnAddress2 As DataColumn
        
        Private columnAddress3 As DataColumn
        
        Private columnTerritory As DataColumn
        
        Private columnCreateDate As DataColumn
        
        Private columnUpdateDate As DataColumn
        
        Friend Sub New()
            MyBase.New("MercuryBranchCT_Show")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property RowidColumn As DataColumn
            Get
                Return Me.columnRowid
            End Get
        End Property
        
        Friend ReadOnly Property BranchCodeColumn As DataColumn
            Get
                Return Me.columnBranchCode
            End Get
        End Property
        
        Friend ReadOnly Property BranchNameColumn As DataColumn
            Get
                Return Me.columnBranchName
            End Get
        End Property
        
        Friend ReadOnly Property Address1Column As DataColumn
            Get
                Return Me.columnAddress1
            End Get
        End Property
        
        Friend ReadOnly Property Address2Column As DataColumn
            Get
                Return Me.columnAddress2
            End Get
        End Property
        
        Friend ReadOnly Property Address3Column As DataColumn
            Get
                Return Me.columnAddress3
            End Get
        End Property
        
        Friend ReadOnly Property TerritoryColumn As DataColumn
            Get
                Return Me.columnTerritory
            End Get
        End Property
        
        Friend ReadOnly Property CreateDateColumn As DataColumn
            Get
                Return Me.columnCreateDate
            End Get
        End Property
        
        Friend ReadOnly Property UpdateDateColumn As DataColumn
            Get
                Return Me.columnUpdateDate
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As MercuryBranchCT_ShowRow
            Get
                Return CType(Me.Rows(index),MercuryBranchCT_ShowRow)
            End Get
        End Property
        
        Public Event MercuryBranchCT_ShowRowChanged As MercuryBranchCT_ShowRowChangeEventHandler
        
        Public Event MercuryBranchCT_ShowRowChanging As MercuryBranchCT_ShowRowChangeEventHandler
        
        Public Event MercuryBranchCT_ShowRowDeleted As MercuryBranchCT_ShowRowChangeEventHandler
        
        Public Event MercuryBranchCT_ShowRowDeleting As MercuryBranchCT_ShowRowChangeEventHandler
        
        Public Overloads Sub AddMercuryBranchCT_ShowRow(ByVal row As MercuryBranchCT_ShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMercuryBranchCT_ShowRow(ByVal BranchCode As String, ByVal BranchName As String, ByVal Address1 As String, ByVal Address2 As String, ByVal Address3 As String, ByVal Territory As String, ByVal CreateDate As Date, ByVal UpdateDate As Date) As MercuryBranchCT_ShowRow
            Dim rowMercuryBranchCT_ShowRow As MercuryBranchCT_ShowRow = CType(Me.NewRow,MercuryBranchCT_ShowRow)
            rowMercuryBranchCT_ShowRow.ItemArray = New Object() {Nothing, BranchCode, BranchName, Address1, Address2, Address3, Territory, CreateDate, UpdateDate}
            Me.Rows.Add(rowMercuryBranchCT_ShowRow)
            Return rowMercuryBranchCT_ShowRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As MercuryBranchCT_ShowDataTable = CType(MyBase.Clone,MercuryBranchCT_ShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New MercuryBranchCT_ShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnRowid = Me.Columns("Rowid")
            Me.columnBranchCode = Me.Columns("BranchCode")
            Me.columnBranchName = Me.Columns("BranchName")
            Me.columnAddress1 = Me.Columns("Address1")
            Me.columnAddress2 = Me.Columns("Address2")
            Me.columnAddress3 = Me.Columns("Address3")
            Me.columnTerritory = Me.Columns("Territory")
            Me.columnCreateDate = Me.Columns("CreateDate")
            Me.columnUpdateDate = Me.Columns("UpdateDate")
        End Sub
        
        Private Sub InitClass()
            Me.columnRowid = New DataColumn("Rowid", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRowid)
            Me.columnBranchCode = New DataColumn("BranchCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBranchCode)
            Me.columnBranchName = New DataColumn("BranchName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBranchName)
            Me.columnAddress1 = New DataColumn("Address1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAddress1)
            Me.columnAddress2 = New DataColumn("Address2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAddress2)
            Me.columnAddress3 = New DataColumn("Address3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAddress3)
            Me.columnTerritory = New DataColumn("Territory", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTerritory)
            Me.columnCreateDate = New DataColumn("CreateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreateDate)
            Me.columnUpdateDate = New DataColumn("UpdateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUpdateDate)
            Me.columnRowid.AutoIncrement = true
            Me.columnRowid.AllowDBNull = false
            Me.columnRowid.ReadOnly = true
            Me.columnBranchCode.AllowDBNull = false
            Me.columnBranchName.AllowDBNull = false
            Me.columnAddress1.AllowDBNull = false
            Me.columnAddress2.AllowDBNull = false
            Me.columnAddress3.AllowDBNull = false
            Me.columnTerritory.ReadOnly = true
            Me.columnCreateDate.AllowDBNull = false
            Me.columnUpdateDate.AllowDBNull = false
        End Sub
        
        Public Function NewMercuryBranchCT_ShowRow() As MercuryBranchCT_ShowRow
            Return CType(Me.NewRow,MercuryBranchCT_ShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New MercuryBranchCT_ShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MercuryBranchCT_ShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MercuryBranchCT_ShowRowChangedEvent) Is Nothing) Then
                RaiseEvent MercuryBranchCT_ShowRowChanged(Me, New MercuryBranchCT_ShowRowChangeEvent(CType(e.Row,MercuryBranchCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MercuryBranchCT_ShowRowChangingEvent) Is Nothing) Then
                RaiseEvent MercuryBranchCT_ShowRowChanging(Me, New MercuryBranchCT_ShowRowChangeEvent(CType(e.Row,MercuryBranchCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MercuryBranchCT_ShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent MercuryBranchCT_ShowRowDeleted(Me, New MercuryBranchCT_ShowRowChangeEvent(CType(e.Row,MercuryBranchCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MercuryBranchCT_ShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent MercuryBranchCT_ShowRowDeleting(Me, New MercuryBranchCT_ShowRowChangeEvent(CType(e.Row,MercuryBranchCT_ShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMercuryBranchCT_ShowRow(ByVal row As MercuryBranchCT_ShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MercuryBranchCT_ShowRow
        Inherits DataRow
        
        Private tableMercuryBranchCT_Show As MercuryBranchCT_ShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMercuryBranchCT_Show = CType(Me.Table,MercuryBranchCT_ShowDataTable)
        End Sub
        
        Public Property Rowid As Decimal
            Get
                Return CType(Me(Me.tableMercuryBranchCT_Show.RowidColumn),Decimal)
            End Get
            Set
                Me(Me.tableMercuryBranchCT_Show.RowidColumn) = value
            End Set
        End Property
        
        Public Property BranchCode As String
            Get
                Return CType(Me(Me.tableMercuryBranchCT_Show.BranchCodeColumn),String)
            End Get
            Set
                Me(Me.tableMercuryBranchCT_Show.BranchCodeColumn) = value
            End Set
        End Property
        
        Public Property BranchName As String
            Get
                Return CType(Me(Me.tableMercuryBranchCT_Show.BranchNameColumn),String)
            End Get
            Set
                Me(Me.tableMercuryBranchCT_Show.BranchNameColumn) = value
            End Set
        End Property
        
        Public Property Address1 As String
            Get
                Return CType(Me(Me.tableMercuryBranchCT_Show.Address1Column),String)
            End Get
            Set
                Me(Me.tableMercuryBranchCT_Show.Address1Column) = value
            End Set
        End Property
        
        Public Property Address2 As String
            Get
                Return CType(Me(Me.tableMercuryBranchCT_Show.Address2Column),String)
            End Get
            Set
                Me(Me.tableMercuryBranchCT_Show.Address2Column) = value
            End Set
        End Property
        
        Public Property Address3 As String
            Get
                Return CType(Me(Me.tableMercuryBranchCT_Show.Address3Column),String)
            End Get
            Set
                Me(Me.tableMercuryBranchCT_Show.Address3Column) = value
            End Set
        End Property
        
        Public Property Territory As String
            Get
                Try 
                    Return CType(Me(Me.tableMercuryBranchCT_Show.TerritoryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMercuryBranchCT_Show.TerritoryColumn) = value
            End Set
        End Property
        
        Public Property CreateDate As Date
            Get
                Return CType(Me(Me.tableMercuryBranchCT_Show.CreateDateColumn),Date)
            End Get
            Set
                Me(Me.tableMercuryBranchCT_Show.CreateDateColumn) = value
            End Set
        End Property
        
        Public Property UpdateDate As Date
            Get
                Return CType(Me(Me.tableMercuryBranchCT_Show.UpdateDateColumn),Date)
            End Get
            Set
                Me(Me.tableMercuryBranchCT_Show.UpdateDateColumn) = value
            End Set
        End Property
        
        Public Function IsTerritoryNull() As Boolean
            Return Me.IsNull(Me.tableMercuryBranchCT_Show.TerritoryColumn)
        End Function
        
        Public Sub SetTerritoryNull()
            Me(Me.tableMercuryBranchCT_Show.TerritoryColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MercuryBranchCT_ShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As MercuryBranchCT_ShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As MercuryBranchCT_ShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As MercuryBranchCT_ShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Territory_ComboDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnTerritoryDesc As DataColumn
        
        Private columnterritory As DataColumn
        
        Friend Sub New()
            MyBase.New("Territory_Combo")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property TerritoryDescColumn As DataColumn
            Get
                Return Me.columnTerritoryDesc
            End Get
        End Property
        
        Friend ReadOnly Property territoryColumn As DataColumn
            Get
                Return Me.columnterritory
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Territory_ComboRow
            Get
                Return CType(Me.Rows(index),Territory_ComboRow)
            End Get
        End Property
        
        Public Event Territory_ComboRowChanged As Territory_ComboRowChangeEventHandler
        
        Public Event Territory_ComboRowChanging As Territory_ComboRowChangeEventHandler
        
        Public Event Territory_ComboRowDeleted As Territory_ComboRowChangeEventHandler
        
        Public Event Territory_ComboRowDeleting As Territory_ComboRowChangeEventHandler
        
        Public Overloads Sub AddTerritory_ComboRow(ByVal row As Territory_ComboRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTerritory_ComboRow(ByVal TerritoryDesc As String, ByVal territory As String) As Territory_ComboRow
            Dim rowTerritory_ComboRow As Territory_ComboRow = CType(Me.NewRow,Territory_ComboRow)
            rowTerritory_ComboRow.ItemArray = New Object() {TerritoryDesc, territory}
            Me.Rows.Add(rowTerritory_ComboRow)
            Return rowTerritory_ComboRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Territory_ComboDataTable = CType(MyBase.Clone,Territory_ComboDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Territory_ComboDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnTerritoryDesc = Me.Columns("TerritoryDesc")
            Me.columnterritory = Me.Columns("territory")
        End Sub
        
        Private Sub InitClass()
            Me.columnTerritoryDesc = New DataColumn("TerritoryDesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTerritoryDesc)
            Me.columnterritory = New DataColumn("territory", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnterritory)
            Me.columnTerritoryDesc.ReadOnly = true
        End Sub
        
        Public Function NewTerritory_ComboRow() As Territory_ComboRow
            Return CType(Me.NewRow,Territory_ComboRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Territory_ComboRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Territory_ComboRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Territory_ComboRowChangedEvent) Is Nothing) Then
                RaiseEvent Territory_ComboRowChanged(Me, New Territory_ComboRowChangeEvent(CType(e.Row,Territory_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Territory_ComboRowChangingEvent) Is Nothing) Then
                RaiseEvent Territory_ComboRowChanging(Me, New Territory_ComboRowChangeEvent(CType(e.Row,Territory_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Territory_ComboRowDeletedEvent) Is Nothing) Then
                RaiseEvent Territory_ComboRowDeleted(Me, New Territory_ComboRowChangeEvent(CType(e.Row,Territory_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Territory_ComboRowDeletingEvent) Is Nothing) Then
                RaiseEvent Territory_ComboRowDeleting(Me, New Territory_ComboRowChangeEvent(CType(e.Row,Territory_ComboRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTerritory_ComboRow(ByVal row As Territory_ComboRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Territory_ComboRow
        Inherits DataRow
        
        Private tableTerritory_Combo As Territory_ComboDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTerritory_Combo = CType(Me.Table,Territory_ComboDataTable)
        End Sub
        
        Public Property TerritoryDesc As String
            Get
                Try 
                    Return CType(Me(Me.tableTerritory_Combo.TerritoryDescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTerritory_Combo.TerritoryDescColumn) = value
            End Set
        End Property
        
        Public Property territory As String
            Get
                Try 
                    Return CType(Me(Me.tableTerritory_Combo.territoryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTerritory_Combo.territoryColumn) = value
            End Set
        End Property
        
        Public Function IsTerritoryDescNull() As Boolean
            Return Me.IsNull(Me.tableTerritory_Combo.TerritoryDescColumn)
        End Function
        
        Public Sub SetTerritoryDescNull()
            Me(Me.tableTerritory_Combo.TerritoryDescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsterritoryNull() As Boolean
            Return Me.IsNull(Me.tableTerritory_Combo.territoryColumn)
        End Function
        
        Public Sub SetterritoryNull()
            Me(Me.tableTerritory_Combo.territoryColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Territory_ComboRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Territory_ComboRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Territory_ComboRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Territory_ComboRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MercuryItemCT_ShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnRowid As DataColumn
        
        Private columnMItemCode As DataColumn
        
        Private column_Item As DataColumn
        
        Private columnCreateDate As DataColumn
        
        Private columnUpdateDate As DataColumn
        
        Friend Sub New()
            MyBase.New("MercuryItemCT_Show")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property RowidColumn As DataColumn
            Get
                Return Me.columnRowid
            End Get
        End Property
        
        Friend ReadOnly Property MItemCodeColumn As DataColumn
            Get
                Return Me.columnMItemCode
            End Get
        End Property
        
        Friend ReadOnly Property _ItemColumn As DataColumn
            Get
                Return Me.column_Item
            End Get
        End Property
        
        Friend ReadOnly Property CreateDateColumn As DataColumn
            Get
                Return Me.columnCreateDate
            End Get
        End Property
        
        Friend ReadOnly Property UpdateDateColumn As DataColumn
            Get
                Return Me.columnUpdateDate
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As MercuryItemCT_ShowRow
            Get
                Return CType(Me.Rows(index),MercuryItemCT_ShowRow)
            End Get
        End Property
        
        Public Event MercuryItemCT_ShowRowChanged As MercuryItemCT_ShowRowChangeEventHandler
        
        Public Event MercuryItemCT_ShowRowChanging As MercuryItemCT_ShowRowChangeEventHandler
        
        Public Event MercuryItemCT_ShowRowDeleted As MercuryItemCT_ShowRowChangeEventHandler
        
        Public Event MercuryItemCT_ShowRowDeleting As MercuryItemCT_ShowRowChangeEventHandler
        
        Public Overloads Sub AddMercuryItemCT_ShowRow(ByVal row As MercuryItemCT_ShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMercuryItemCT_ShowRow(ByVal MItemCode As String, ByVal _Item As String, ByVal CreateDate As Date, ByVal UpdateDate As Date) As MercuryItemCT_ShowRow
            Dim rowMercuryItemCT_ShowRow As MercuryItemCT_ShowRow = CType(Me.NewRow,MercuryItemCT_ShowRow)
            rowMercuryItemCT_ShowRow.ItemArray = New Object() {Nothing, MItemCode, _Item, CreateDate, UpdateDate}
            Me.Rows.Add(rowMercuryItemCT_ShowRow)
            Return rowMercuryItemCT_ShowRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As MercuryItemCT_ShowDataTable = CType(MyBase.Clone,MercuryItemCT_ShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New MercuryItemCT_ShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnRowid = Me.Columns("Rowid")
            Me.columnMItemCode = Me.Columns("MItemCode")
            Me.column_Item = Me.Columns("Item")
            Me.columnCreateDate = Me.Columns("CreateDate")
            Me.columnUpdateDate = Me.Columns("UpdateDate")
        End Sub
        
        Private Sub InitClass()
            Me.columnRowid = New DataColumn("Rowid", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRowid)
            Me.columnMItemCode = New DataColumn("MItemCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMItemCode)
            Me.column_Item = New DataColumn("Item", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_Item)
            Me.columnCreateDate = New DataColumn("CreateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreateDate)
            Me.columnUpdateDate = New DataColumn("UpdateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUpdateDate)
            Me.columnRowid.AutoIncrement = true
            Me.columnRowid.AllowDBNull = false
            Me.columnRowid.ReadOnly = true
            Me.columnMItemCode.AllowDBNull = false
            Me.column_Item.ReadOnly = true
            Me.columnCreateDate.AllowDBNull = false
            Me.columnUpdateDate.AllowDBNull = false
        End Sub
        
        Public Function NewMercuryItemCT_ShowRow() As MercuryItemCT_ShowRow
            Return CType(Me.NewRow,MercuryItemCT_ShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New MercuryItemCT_ShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MercuryItemCT_ShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MercuryItemCT_ShowRowChangedEvent) Is Nothing) Then
                RaiseEvent MercuryItemCT_ShowRowChanged(Me, New MercuryItemCT_ShowRowChangeEvent(CType(e.Row,MercuryItemCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MercuryItemCT_ShowRowChangingEvent) Is Nothing) Then
                RaiseEvent MercuryItemCT_ShowRowChanging(Me, New MercuryItemCT_ShowRowChangeEvent(CType(e.Row,MercuryItemCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MercuryItemCT_ShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent MercuryItemCT_ShowRowDeleted(Me, New MercuryItemCT_ShowRowChangeEvent(CType(e.Row,MercuryItemCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MercuryItemCT_ShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent MercuryItemCT_ShowRowDeleting(Me, New MercuryItemCT_ShowRowChangeEvent(CType(e.Row,MercuryItemCT_ShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMercuryItemCT_ShowRow(ByVal row As MercuryItemCT_ShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MercuryItemCT_ShowRow
        Inherits DataRow
        
        Private tableMercuryItemCT_Show As MercuryItemCT_ShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMercuryItemCT_Show = CType(Me.Table,MercuryItemCT_ShowDataTable)
        End Sub
        
        Public Property Rowid As Integer
            Get
                Return CType(Me(Me.tableMercuryItemCT_Show.RowidColumn),Integer)
            End Get
            Set
                Me(Me.tableMercuryItemCT_Show.RowidColumn) = value
            End Set
        End Property
        
        Public Property MItemCode As String
            Get
                Return CType(Me(Me.tableMercuryItemCT_Show.MItemCodeColumn),String)
            End Get
            Set
                Me(Me.tableMercuryItemCT_Show.MItemCodeColumn) = value
            End Set
        End Property
        
        Public Property _Item As String
            Get
                Try 
                    Return CType(Me(Me.tableMercuryItemCT_Show._ItemColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMercuryItemCT_Show._ItemColumn) = value
            End Set
        End Property
        
        Public Property CreateDate As Date
            Get
                Return CType(Me(Me.tableMercuryItemCT_Show.CreateDateColumn),Date)
            End Get
            Set
                Me(Me.tableMercuryItemCT_Show.CreateDateColumn) = value
            End Set
        End Property
        
        Public Property UpdateDate As Date
            Get
                Return CType(Me(Me.tableMercuryItemCT_Show.UpdateDateColumn),Date)
            End Get
            Set
                Me(Me.tableMercuryItemCT_Show.UpdateDateColumn) = value
            End Set
        End Property
        
        Public Function Is_ItemNull() As Boolean
            Return Me.IsNull(Me.tableMercuryItemCT_Show._ItemColumn)
        End Function
        
        Public Sub Set_ItemNull()
            Me(Me.tableMercuryItemCT_Show._ItemColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MercuryItemCT_ShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As MercuryItemCT_ShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As MercuryItemCT_ShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As MercuryItemCT_ShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Item_ComboDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private column_Item As DataColumn
        
        Private columnitemdesc As DataColumn
        
        Private columnItem_Combo_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("Item_Combo")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property _ItemColumn As DataColumn
            Get
                Return Me.column_Item
            End Get
        End Property
        
        Friend ReadOnly Property itemdescColumn As DataColumn
            Get
                Return Me.columnitemdesc
            End Get
        End Property
        
        Friend ReadOnly Property Item_Combo_IdColumn As DataColumn
            Get
                Return Me.columnItem_Combo_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Item_ComboRow
            Get
                Return CType(Me.Rows(index),Item_ComboRow)
            End Get
        End Property
        
        Public Event Item_ComboRowChanged As Item_ComboRowChangeEventHandler
        
        Public Event Item_ComboRowChanging As Item_ComboRowChangeEventHandler
        
        Public Event Item_ComboRowDeleted As Item_ComboRowChangeEventHandler
        
        Public Event Item_ComboRowDeleting As Item_ComboRowChangeEventHandler
        
        Public Overloads Sub AddItem_ComboRow(ByVal row As Item_ComboRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddItem_ComboRow(ByVal _Item As String, ByVal itemdesc As String) As Item_ComboRow
            Dim rowItem_ComboRow As Item_ComboRow = CType(Me.NewRow,Item_ComboRow)
            rowItem_ComboRow.ItemArray = New Object() {_Item, itemdesc, Nothing}
            Me.Rows.Add(rowItem_ComboRow)
            Return rowItem_ComboRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Item_ComboDataTable = CType(MyBase.Clone,Item_ComboDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Item_ComboDataTable
        End Function
        
        Friend Sub InitVars()
            Me.column_Item = Me.Columns("Item")
            Me.columnitemdesc = Me.Columns("itemdesc")
            Me.columnItem_Combo_Id = Me.Columns("Item_Combo_Id")
        End Sub
        
        Private Sub InitClass()
            Me.column_Item = New DataColumn("Item", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_Item)
            Me.columnitemdesc = New DataColumn("itemdesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitemdesc)
            Me.columnItem_Combo_Id = New DataColumn("Item_Combo_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnItem_Combo_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnItem_Combo_Id}, true))
            Me.column_Item.ReadOnly = true
            Me.columnitemdesc.AllowDBNull = false
            Me.columnItem_Combo_Id.AutoIncrement = true
            Me.columnItem_Combo_Id.AllowDBNull = false
            Me.columnItem_Combo_Id.Unique = true
        End Sub
        
        Public Function NewItem_ComboRow() As Item_ComboRow
            Return CType(Me.NewRow,Item_ComboRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Item_ComboRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Item_ComboRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Item_ComboRowChangedEvent) Is Nothing) Then
                RaiseEvent Item_ComboRowChanged(Me, New Item_ComboRowChangeEvent(CType(e.Row,Item_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Item_ComboRowChangingEvent) Is Nothing) Then
                RaiseEvent Item_ComboRowChanging(Me, New Item_ComboRowChangeEvent(CType(e.Row,Item_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Item_ComboRowDeletedEvent) Is Nothing) Then
                RaiseEvent Item_ComboRowDeleted(Me, New Item_ComboRowChangeEvent(CType(e.Row,Item_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Item_ComboRowDeletingEvent) Is Nothing) Then
                RaiseEvent Item_ComboRowDeleting(Me, New Item_ComboRowChangeEvent(CType(e.Row,Item_ComboRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveItem_ComboRow(ByVal row As Item_ComboRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Item_ComboRow
        Inherits DataRow
        
        Private tableItem_Combo As Item_ComboDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableItem_Combo = CType(Me.Table,Item_ComboDataTable)
        End Sub
        
        Public Property _Item As String
            Get
                Try 
                    Return CType(Me(Me.tableItem_Combo._ItemColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItem_Combo._ItemColumn) = value
            End Set
        End Property
        
        Public Property itemdesc As String
            Get
                Return CType(Me(Me.tableItem_Combo.itemdescColumn),String)
            End Get
            Set
                Me(Me.tableItem_Combo.itemdescColumn) = value
            End Set
        End Property
        
        Public Function Is_ItemNull() As Boolean
            Return Me.IsNull(Me.tableItem_Combo._ItemColumn)
        End Function
        
        Public Sub Set_ItemNull()
            Me(Me.tableItem_Combo._ItemColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetSubKeyProduct_ShowRows() As SubKeyProduct_ShowRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Item_Combo_SubKeyProduct_Show")),SubKeyProduct_ShowRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Item_ComboRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Item_ComboRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Item_ComboRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Item_ComboRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SubKeyProduct_ShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnRowid As DataColumn
        
        Private columnTeamDivision As DataColumn
        
        Private columnLine As DataColumn
        
        Private columnStart_Date As DataColumn
        
        Private columnEnd_Date As DataColumn
        
        Private columnItem_Combo_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("SubKeyProduct_Show")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property RowidColumn As DataColumn
            Get
                Return Me.columnRowid
            End Get
        End Property
        
        Friend ReadOnly Property TeamDivisionColumn As DataColumn
            Get
                Return Me.columnTeamDivision
            End Get
        End Property
        
        Friend ReadOnly Property LineColumn As DataColumn
            Get
                Return Me.columnLine
            End Get
        End Property
        
        Friend ReadOnly Property Start_DateColumn As DataColumn
            Get
                Return Me.columnStart_Date
            End Get
        End Property
        
        Friend ReadOnly Property End_DateColumn As DataColumn
            Get
                Return Me.columnEnd_Date
            End Get
        End Property
        
        Friend ReadOnly Property Item_Combo_IdColumn As DataColumn
            Get
                Return Me.columnItem_Combo_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SubKeyProduct_ShowRow
            Get
                Return CType(Me.Rows(index),SubKeyProduct_ShowRow)
            End Get
        End Property
        
        Public Event SubKeyProduct_ShowRowChanged As SubKeyProduct_ShowRowChangeEventHandler
        
        Public Event SubKeyProduct_ShowRowChanging As SubKeyProduct_ShowRowChangeEventHandler
        
        Public Event SubKeyProduct_ShowRowDeleted As SubKeyProduct_ShowRowChangeEventHandler
        
        Public Event SubKeyProduct_ShowRowDeleting As SubKeyProduct_ShowRowChangeEventHandler
        
        Public Overloads Sub AddSubKeyProduct_ShowRow(ByVal row As SubKeyProduct_ShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSubKeyProduct_ShowRow(ByVal TeamDivision As String, ByVal Line As String, ByVal Start_Date As Date, ByVal End_Date As Date, ByVal parentItem_ComboRowByItem_Combo_SubKeyProduct_Show As Item_ComboRow) As SubKeyProduct_ShowRow
            Dim rowSubKeyProduct_ShowRow As SubKeyProduct_ShowRow = CType(Me.NewRow,SubKeyProduct_ShowRow)
            rowSubKeyProduct_ShowRow.ItemArray = New Object() {Nothing, TeamDivision, Line, Start_Date, End_Date, parentItem_ComboRowByItem_Combo_SubKeyProduct_Show(2)}
            Me.Rows.Add(rowSubKeyProduct_ShowRow)
            Return rowSubKeyProduct_ShowRow
        End Function
        
        Public Function FindByRowid(ByVal Rowid As Decimal) As SubKeyProduct_ShowRow
            Return CType(Me.Rows.Find(New Object() {Rowid}),SubKeyProduct_ShowRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SubKeyProduct_ShowDataTable = CType(MyBase.Clone,SubKeyProduct_ShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SubKeyProduct_ShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnRowid = Me.Columns("Rowid")
            Me.columnTeamDivision = Me.Columns("TeamDivision")
            Me.columnLine = Me.Columns("Line")
            Me.columnStart_Date = Me.Columns("Start_Date")
            Me.columnEnd_Date = Me.Columns("End_Date")
            Me.columnItem_Combo_Id = Me.Columns("Item_Combo_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnRowid = New DataColumn("Rowid", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRowid)
            Me.columnTeamDivision = New DataColumn("TeamDivision", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTeamDivision)
            Me.columnLine = New DataColumn("Line", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLine)
            Me.columnStart_Date = New DataColumn("Start_Date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStart_Date)
            Me.columnEnd_Date = New DataColumn("End_Date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEnd_Date)
            Me.columnItem_Combo_Id = New DataColumn("Item_Combo_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnItem_Combo_Id)
            Me.Constraints.Add(New UniqueConstraint("CodeTablesDSKey8", New DataColumn() {Me.columnRowid}, true))
            Me.columnRowid.AutoIncrement = true
            Me.columnRowid.AllowDBNull = false
            Me.columnRowid.ReadOnly = true
            Me.columnRowid.Unique = true
            Me.columnTeamDivision.ReadOnly = true
            Me.columnLine.ReadOnly = true
        End Sub
        
        Public Function NewSubKeyProduct_ShowRow() As SubKeyProduct_ShowRow
            Return CType(Me.NewRow,SubKeyProduct_ShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SubKeyProduct_ShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SubKeyProduct_ShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SubKeyProduct_ShowRowChangedEvent) Is Nothing) Then
                RaiseEvent SubKeyProduct_ShowRowChanged(Me, New SubKeyProduct_ShowRowChangeEvent(CType(e.Row,SubKeyProduct_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SubKeyProduct_ShowRowChangingEvent) Is Nothing) Then
                RaiseEvent SubKeyProduct_ShowRowChanging(Me, New SubKeyProduct_ShowRowChangeEvent(CType(e.Row,SubKeyProduct_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SubKeyProduct_ShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent SubKeyProduct_ShowRowDeleted(Me, New SubKeyProduct_ShowRowChangeEvent(CType(e.Row,SubKeyProduct_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SubKeyProduct_ShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent SubKeyProduct_ShowRowDeleting(Me, New SubKeyProduct_ShowRowChangeEvent(CType(e.Row,SubKeyProduct_ShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSubKeyProduct_ShowRow(ByVal row As SubKeyProduct_ShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SubKeyProduct_ShowRow
        Inherits DataRow
        
        Private tableSubKeyProduct_Show As SubKeyProduct_ShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSubKeyProduct_Show = CType(Me.Table,SubKeyProduct_ShowDataTable)
        End Sub
        
        Public Property Rowid As Decimal
            Get
                Return CType(Me(Me.tableSubKeyProduct_Show.RowidColumn),Decimal)
            End Get
            Set
                Me(Me.tableSubKeyProduct_Show.RowidColumn) = value
            End Set
        End Property
        
        Public Property TeamDivision As String
            Get
                Try 
                    Return CType(Me(Me.tableSubKeyProduct_Show.TeamDivisionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubKeyProduct_Show.TeamDivisionColumn) = value
            End Set
        End Property
        
        Public Property Line As String
            Get
                Try 
                    Return CType(Me(Me.tableSubKeyProduct_Show.LineColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubKeyProduct_Show.LineColumn) = value
            End Set
        End Property
        
        Public Property Start_Date As Date
            Get
                Try 
                    Return CType(Me(Me.tableSubKeyProduct_Show.Start_DateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubKeyProduct_Show.Start_DateColumn) = value
            End Set
        End Property
        
        Public Property End_Date As Date
            Get
                Try 
                    Return CType(Me(Me.tableSubKeyProduct_Show.End_DateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubKeyProduct_Show.End_DateColumn) = value
            End Set
        End Property
        
        Public Property Item_ComboRow As Item_ComboRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Item_Combo_SubKeyProduct_Show")),Item_ComboRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Item_Combo_SubKeyProduct_Show"))
            End Set
        End Property
        
        Public Function IsTeamDivisionNull() As Boolean
            Return Me.IsNull(Me.tableSubKeyProduct_Show.TeamDivisionColumn)
        End Function
        
        Public Sub SetTeamDivisionNull()
            Me(Me.tableSubKeyProduct_Show.TeamDivisionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLineNull() As Boolean
            Return Me.IsNull(Me.tableSubKeyProduct_Show.LineColumn)
        End Function
        
        Public Sub SetLineNull()
            Me(Me.tableSubKeyProduct_Show.LineColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStart_DateNull() As Boolean
            Return Me.IsNull(Me.tableSubKeyProduct_Show.Start_DateColumn)
        End Function
        
        Public Sub SetStart_DateNull()
            Me(Me.tableSubKeyProduct_Show.Start_DateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEnd_DateNull() As Boolean
            Return Me.IsNull(Me.tableSubKeyProduct_Show.End_DateColumn)
        End Function
        
        Public Sub SetEnd_DateNull()
            Me(Me.tableSubKeyProduct_Show.End_DateColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SubKeyProduct_ShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SubKeyProduct_ShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SubKeyProduct_ShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SubKeyProduct_ShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Division_ComboDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnDivision As DataColumn
        
        Friend Sub New()
            MyBase.New("Division_Combo")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property DivisionColumn As DataColumn
            Get
                Return Me.columnDivision
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Division_ComboRow
            Get
                Return CType(Me.Rows(index),Division_ComboRow)
            End Get
        End Property
        
        Public Event Division_ComboRowChanged As Division_ComboRowChangeEventHandler
        
        Public Event Division_ComboRowChanging As Division_ComboRowChangeEventHandler
        
        Public Event Division_ComboRowDeleted As Division_ComboRowChangeEventHandler
        
        Public Event Division_ComboRowDeleting As Division_ComboRowChangeEventHandler
        
        Public Overloads Sub AddDivision_ComboRow(ByVal row As Division_ComboRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDivision_ComboRow(ByVal Division As String) As Division_ComboRow
            Dim rowDivision_ComboRow As Division_ComboRow = CType(Me.NewRow,Division_ComboRow)
            rowDivision_ComboRow.ItemArray = New Object() {Division}
            Me.Rows.Add(rowDivision_ComboRow)
            Return rowDivision_ComboRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Division_ComboDataTable = CType(MyBase.Clone,Division_ComboDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Division_ComboDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnDivision = Me.Columns("Division")
        End Sub
        
        Private Sub InitClass()
            Me.columnDivision = New DataColumn("Division", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDivision)
            Me.columnDivision.ReadOnly = true
        End Sub
        
        Public Function NewDivision_ComboRow() As Division_ComboRow
            Return CType(Me.NewRow,Division_ComboRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Division_ComboRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Division_ComboRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Division_ComboRowChangedEvent) Is Nothing) Then
                RaiseEvent Division_ComboRowChanged(Me, New Division_ComboRowChangeEvent(CType(e.Row,Division_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Division_ComboRowChangingEvent) Is Nothing) Then
                RaiseEvent Division_ComboRowChanging(Me, New Division_ComboRowChangeEvent(CType(e.Row,Division_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Division_ComboRowDeletedEvent) Is Nothing) Then
                RaiseEvent Division_ComboRowDeleted(Me, New Division_ComboRowChangeEvent(CType(e.Row,Division_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Division_ComboRowDeletingEvent) Is Nothing) Then
                RaiseEvent Division_ComboRowDeleting(Me, New Division_ComboRowChangeEvent(CType(e.Row,Division_ComboRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDivision_ComboRow(ByVal row As Division_ComboRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Division_ComboRow
        Inherits DataRow
        
        Private tableDivision_Combo As Division_ComboDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDivision_Combo = CType(Me.Table,Division_ComboDataTable)
        End Sub
        
        Public Property Division As String
            Get
                Try 
                    Return CType(Me(Me.tableDivision_Combo.DivisionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDivision_Combo.DivisionColumn) = value
            End Set
        End Property
        
        Public Function IsDivisionNull() As Boolean
            Return Me.IsNull(Me.tableDivision_Combo.DivisionColumn)
        End Function
        
        Public Sub SetDivisionNull()
            Me(Me.tableDivision_Combo.DivisionColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Division_ComboRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Division_ComboRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Division_ComboRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Division_ComboRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Group_ComboDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnGroup As DataColumn
        
        Friend Sub New()
            MyBase.New("Group_Combo")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property GroupColumn As DataColumn
            Get
                Return Me.columnGroup
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Group_ComboRow
            Get
                Return CType(Me.Rows(index),Group_ComboRow)
            End Get
        End Property
        
        Public Event Group_ComboRowChanged As Group_ComboRowChangeEventHandler
        
        Public Event Group_ComboRowChanging As Group_ComboRowChangeEventHandler
        
        Public Event Group_ComboRowDeleted As Group_ComboRowChangeEventHandler
        
        Public Event Group_ComboRowDeleting As Group_ComboRowChangeEventHandler
        
        Public Overloads Sub AddGroup_ComboRow(ByVal row As Group_ComboRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGroup_ComboRow(ByVal Group As String) As Group_ComboRow
            Dim rowGroup_ComboRow As Group_ComboRow = CType(Me.NewRow,Group_ComboRow)
            rowGroup_ComboRow.ItemArray = New Object() {Group}
            Me.Rows.Add(rowGroup_ComboRow)
            Return rowGroup_ComboRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Group_ComboDataTable = CType(MyBase.Clone,Group_ComboDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Group_ComboDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnGroup = Me.Columns("Group")
        End Sub
        
        Private Sub InitClass()
            Me.columnGroup = New DataColumn("Group", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGroup)
            Me.columnGroup.ReadOnly = true
        End Sub
        
        Public Function NewGroup_ComboRow() As Group_ComboRow
            Return CType(Me.NewRow,Group_ComboRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Group_ComboRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Group_ComboRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Group_ComboRowChangedEvent) Is Nothing) Then
                RaiseEvent Group_ComboRowChanged(Me, New Group_ComboRowChangeEvent(CType(e.Row,Group_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Group_ComboRowChangingEvent) Is Nothing) Then
                RaiseEvent Group_ComboRowChanging(Me, New Group_ComboRowChangeEvent(CType(e.Row,Group_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Group_ComboRowDeletedEvent) Is Nothing) Then
                RaiseEvent Group_ComboRowDeleted(Me, New Group_ComboRowChangeEvent(CType(e.Row,Group_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Group_ComboRowDeletingEvent) Is Nothing) Then
                RaiseEvent Group_ComboRowDeleting(Me, New Group_ComboRowChangeEvent(CType(e.Row,Group_ComboRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGroup_ComboRow(ByVal row As Group_ComboRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Group_ComboRow
        Inherits DataRow
        
        Private tableGroup_Combo As Group_ComboDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGroup_Combo = CType(Me.Table,Group_ComboDataTable)
        End Sub
        
        Public Property Group As String
            Get
                Try 
                    Return CType(Me(Me.tableGroup_Combo.GroupColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGroup_Combo.GroupColumn) = value
            End Set
        End Property
        
        Public Function IsGroupNull() As Boolean
            Return Me.IsNull(Me.tableGroup_Combo.GroupColumn)
        End Function
        
        Public Sub SetGroupNull()
            Me(Me.tableGroup_Combo.GroupColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Group_ComboRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Group_ComboRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Group_ComboRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Group_ComboRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Province_ComboDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnProvince As DataColumn
        
        Friend Sub New()
            MyBase.New("Province_Combo")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ProvinceColumn As DataColumn
            Get
                Return Me.columnProvince
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Province_ComboRow
            Get
                Return CType(Me.Rows(index),Province_ComboRow)
            End Get
        End Property
        
        Public Event Province_ComboRowChanged As Province_ComboRowChangeEventHandler
        
        Public Event Province_ComboRowChanging As Province_ComboRowChangeEventHandler
        
        Public Event Province_ComboRowDeleted As Province_ComboRowChangeEventHandler
        
        Public Event Province_ComboRowDeleting As Province_ComboRowChangeEventHandler
        
        Public Overloads Sub AddProvince_ComboRow(ByVal row As Province_ComboRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddProvince_ComboRow(ByVal Province As String) As Province_ComboRow
            Dim rowProvince_ComboRow As Province_ComboRow = CType(Me.NewRow,Province_ComboRow)
            rowProvince_ComboRow.ItemArray = New Object() {Province}
            Me.Rows.Add(rowProvince_ComboRow)
            Return rowProvince_ComboRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Province_ComboDataTable = CType(MyBase.Clone,Province_ComboDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Province_ComboDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnProvince = Me.Columns("Province")
        End Sub
        
        Private Sub InitClass()
            Me.columnProvince = New DataColumn("Province", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnProvince)
            Me.columnProvince.ReadOnly = true
        End Sub
        
        Public Function NewProvince_ComboRow() As Province_ComboRow
            Return CType(Me.NewRow,Province_ComboRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Province_ComboRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Province_ComboRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Province_ComboRowChangedEvent) Is Nothing) Then
                RaiseEvent Province_ComboRowChanged(Me, New Province_ComboRowChangeEvent(CType(e.Row,Province_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Province_ComboRowChangingEvent) Is Nothing) Then
                RaiseEvent Province_ComboRowChanging(Me, New Province_ComboRowChangeEvent(CType(e.Row,Province_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Province_ComboRowDeletedEvent) Is Nothing) Then
                RaiseEvent Province_ComboRowDeleted(Me, New Province_ComboRowChangeEvent(CType(e.Row,Province_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Province_ComboRowDeletingEvent) Is Nothing) Then
                RaiseEvent Province_ComboRowDeleting(Me, New Province_ComboRowChangeEvent(CType(e.Row,Province_ComboRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveProvince_ComboRow(ByVal row As Province_ComboRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Province_ComboRow
        Inherits DataRow
        
        Private tableProvince_Combo As Province_ComboDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableProvince_Combo = CType(Me.Table,Province_ComboDataTable)
        End Sub
        
        Public Property Province As String
            Get
                Try 
                    Return CType(Me(Me.tableProvince_Combo.ProvinceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProvince_Combo.ProvinceColumn) = value
            End Set
        End Property
        
        Public Function IsProvinceNull() As Boolean
            Return Me.IsNull(Me.tableProvince_Combo.ProvinceColumn)
        End Function
        
        Public Sub SetProvinceNull()
            Me(Me.tableProvince_Combo.ProvinceColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Province_ComboRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Province_ComboRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Province_ComboRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Province_ComboRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TerritoryCT_ShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnrowid As DataColumn
        
        Private columnterritorycode As DataColumn
        
        Private columnprov_nav As DataColumn
        
        Private columnterritory As DataColumn
        
        Private columnGroupDesc As DataColumn
        
        Private columnProvince As DataColumn
        
        Private columnCreateDate As DataColumn
        
        Private columnUpdateDate As DataColumn
        
        Friend Sub New()
            MyBase.New("TerritoryCT_Show")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property rowidColumn As DataColumn
            Get
                Return Me.columnrowid
            End Get
        End Property
        
        Friend ReadOnly Property territorycodeColumn As DataColumn
            Get
                Return Me.columnterritorycode
            End Get
        End Property
        
        Friend ReadOnly Property prov_navColumn As DataColumn
            Get
                Return Me.columnprov_nav
            End Get
        End Property
        
        Friend ReadOnly Property territoryColumn As DataColumn
            Get
                Return Me.columnterritory
            End Get
        End Property
        
        Friend ReadOnly Property GroupDescColumn As DataColumn
            Get
                Return Me.columnGroupDesc
            End Get
        End Property
        
        Friend ReadOnly Property ProvinceColumn As DataColumn
            Get
                Return Me.columnProvince
            End Get
        End Property
        
        Friend ReadOnly Property CreateDateColumn As DataColumn
            Get
                Return Me.columnCreateDate
            End Get
        End Property
        
        Friend ReadOnly Property UpdateDateColumn As DataColumn
            Get
                Return Me.columnUpdateDate
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TerritoryCT_ShowRow
            Get
                Return CType(Me.Rows(index),TerritoryCT_ShowRow)
            End Get
        End Property
        
        Public Event TerritoryCT_ShowRowChanged As TerritoryCT_ShowRowChangeEventHandler
        
        Public Event TerritoryCT_ShowRowChanging As TerritoryCT_ShowRowChangeEventHandler
        
        Public Event TerritoryCT_ShowRowDeleted As TerritoryCT_ShowRowChangeEventHandler
        
        Public Event TerritoryCT_ShowRowDeleting As TerritoryCT_ShowRowChangeEventHandler
        
        Public Overloads Sub AddTerritoryCT_ShowRow(ByVal row As TerritoryCT_ShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTerritoryCT_ShowRow(ByVal territorycode As String, ByVal prov_nav As String, ByVal territory As String, ByVal GroupDesc As String, ByVal Province As String, ByVal CreateDate As Date, ByVal UpdateDate As Date) As TerritoryCT_ShowRow
            Dim rowTerritoryCT_ShowRow As TerritoryCT_ShowRow = CType(Me.NewRow,TerritoryCT_ShowRow)
            rowTerritoryCT_ShowRow.ItemArray = New Object() {Nothing, territorycode, prov_nav, territory, GroupDesc, Province, CreateDate, UpdateDate}
            Me.Rows.Add(rowTerritoryCT_ShowRow)
            Return rowTerritoryCT_ShowRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TerritoryCT_ShowDataTable = CType(MyBase.Clone,TerritoryCT_ShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TerritoryCT_ShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnrowid = Me.Columns("rowid")
            Me.columnterritorycode = Me.Columns("territorycode")
            Me.columnprov_nav = Me.Columns("prov_nav")
            Me.columnterritory = Me.Columns("territory")
            Me.columnGroupDesc = Me.Columns("GroupDesc")
            Me.columnProvince = Me.Columns("Province")
            Me.columnCreateDate = Me.Columns("CreateDate")
            Me.columnUpdateDate = Me.Columns("UpdateDate")
        End Sub
        
        Private Sub InitClass()
            Me.columnrowid = New DataColumn("rowid", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrowid)
            Me.columnterritorycode = New DataColumn("territorycode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnterritorycode)
            Me.columnprov_nav = New DataColumn("prov_nav", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprov_nav)
            Me.columnterritory = New DataColumn("territory", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnterritory)
            Me.columnGroupDesc = New DataColumn("GroupDesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGroupDesc)
            Me.columnProvince = New DataColumn("Province", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnProvince)
            Me.columnCreateDate = New DataColumn("CreateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreateDate)
            Me.columnUpdateDate = New DataColumn("UpdateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUpdateDate)
            Me.columnrowid.AutoIncrement = true
            Me.columnrowid.AllowDBNull = false
            Me.columnrowid.ReadOnly = true
            Me.columnGroupDesc.ReadOnly = true
            Me.columnProvince.ReadOnly = true
            Me.columnCreateDate.AllowDBNull = false
            Me.columnUpdateDate.AllowDBNull = false
        End Sub
        
        Public Function NewTerritoryCT_ShowRow() As TerritoryCT_ShowRow
            Return CType(Me.NewRow,TerritoryCT_ShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TerritoryCT_ShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TerritoryCT_ShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TerritoryCT_ShowRowChangedEvent) Is Nothing) Then
                RaiseEvent TerritoryCT_ShowRowChanged(Me, New TerritoryCT_ShowRowChangeEvent(CType(e.Row,TerritoryCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TerritoryCT_ShowRowChangingEvent) Is Nothing) Then
                RaiseEvent TerritoryCT_ShowRowChanging(Me, New TerritoryCT_ShowRowChangeEvent(CType(e.Row,TerritoryCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TerritoryCT_ShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent TerritoryCT_ShowRowDeleted(Me, New TerritoryCT_ShowRowChangeEvent(CType(e.Row,TerritoryCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TerritoryCT_ShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent TerritoryCT_ShowRowDeleting(Me, New TerritoryCT_ShowRowChangeEvent(CType(e.Row,TerritoryCT_ShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTerritoryCT_ShowRow(ByVal row As TerritoryCT_ShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TerritoryCT_ShowRow
        Inherits DataRow
        
        Private tableTerritoryCT_Show As TerritoryCT_ShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTerritoryCT_Show = CType(Me.Table,TerritoryCT_ShowDataTable)
        End Sub
        
        Public Property rowid As Decimal
            Get
                Return CType(Me(Me.tableTerritoryCT_Show.rowidColumn),Decimal)
            End Get
            Set
                Me(Me.tableTerritoryCT_Show.rowidColumn) = value
            End Set
        End Property
        
        Public Property territorycode As String
            Get
                Try 
                    Return CType(Me(Me.tableTerritoryCT_Show.territorycodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTerritoryCT_Show.territorycodeColumn) = value
            End Set
        End Property
        
        Public Property prov_nav As String
            Get
                Try 
                    Return CType(Me(Me.tableTerritoryCT_Show.prov_navColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTerritoryCT_Show.prov_navColumn) = value
            End Set
        End Property
        
        Public Property territory As String
            Get
                Try 
                    Return CType(Me(Me.tableTerritoryCT_Show.territoryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTerritoryCT_Show.territoryColumn) = value
            End Set
        End Property
        
        Public Property GroupDesc As String
            Get
                Try 
                    Return CType(Me(Me.tableTerritoryCT_Show.GroupDescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTerritoryCT_Show.GroupDescColumn) = value
            End Set
        End Property
        
        Public Property Province As String
            Get
                Try 
                    Return CType(Me(Me.tableTerritoryCT_Show.ProvinceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTerritoryCT_Show.ProvinceColumn) = value
            End Set
        End Property
        
        Public Property CreateDate As Date
            Get
                Return CType(Me(Me.tableTerritoryCT_Show.CreateDateColumn),Date)
            End Get
            Set
                Me(Me.tableTerritoryCT_Show.CreateDateColumn) = value
            End Set
        End Property
        
        Public Property UpdateDate As Date
            Get
                Return CType(Me(Me.tableTerritoryCT_Show.UpdateDateColumn),Date)
            End Get
            Set
                Me(Me.tableTerritoryCT_Show.UpdateDateColumn) = value
            End Set
        End Property
        
        Public Function IsterritorycodeNull() As Boolean
            Return Me.IsNull(Me.tableTerritoryCT_Show.territorycodeColumn)
        End Function
        
        Public Sub SetterritorycodeNull()
            Me(Me.tableTerritoryCT_Show.territorycodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprov_navNull() As Boolean
            Return Me.IsNull(Me.tableTerritoryCT_Show.prov_navColumn)
        End Function
        
        Public Sub Setprov_navNull()
            Me(Me.tableTerritoryCT_Show.prov_navColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsterritoryNull() As Boolean
            Return Me.IsNull(Me.tableTerritoryCT_Show.territoryColumn)
        End Function
        
        Public Sub SetterritoryNull()
            Me(Me.tableTerritoryCT_Show.territoryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGroupDescNull() As Boolean
            Return Me.IsNull(Me.tableTerritoryCT_Show.GroupDescColumn)
        End Function
        
        Public Sub SetGroupDescNull()
            Me(Me.tableTerritoryCT_Show.GroupDescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsProvinceNull() As Boolean
            Return Me.IsNull(Me.tableTerritoryCT_Show.ProvinceColumn)
        End Function
        
        Public Sub SetProvinceNull()
            Me(Me.tableTerritoryCT_Show.ProvinceColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TerritoryCT_ShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TerritoryCT_ShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TerritoryCT_ShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TerritoryCT_ShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class KeyProducts_ShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnRowid As DataColumn
        
        Private columnTeamDivision As DataColumn
        
        Private columnLine As DataColumn
        
        Private columnStart_Date As DataColumn
        
        Private columnEnd_Date As DataColumn
        
        Friend Sub New()
            MyBase.New("KeyProducts_Show")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property RowidColumn As DataColumn
            Get
                Return Me.columnRowid
            End Get
        End Property
        
        Friend ReadOnly Property TeamDivisionColumn As DataColumn
            Get
                Return Me.columnTeamDivision
            End Get
        End Property
        
        Friend ReadOnly Property LineColumn As DataColumn
            Get
                Return Me.columnLine
            End Get
        End Property
        
        Friend ReadOnly Property Start_DateColumn As DataColumn
            Get
                Return Me.columnStart_Date
            End Get
        End Property
        
        Friend ReadOnly Property End_DateColumn As DataColumn
            Get
                Return Me.columnEnd_Date
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As KeyProducts_ShowRow
            Get
                Return CType(Me.Rows(index),KeyProducts_ShowRow)
            End Get
        End Property
        
        Public Event KeyProducts_ShowRowChanged As KeyProducts_ShowRowChangeEventHandler
        
        Public Event KeyProducts_ShowRowChanging As KeyProducts_ShowRowChangeEventHandler
        
        Public Event KeyProducts_ShowRowDeleted As KeyProducts_ShowRowChangeEventHandler
        
        Public Event KeyProducts_ShowRowDeleting As KeyProducts_ShowRowChangeEventHandler
        
        Public Overloads Sub AddKeyProducts_ShowRow(ByVal row As KeyProducts_ShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddKeyProducts_ShowRow(ByVal TeamDivision As String, ByVal Line As String, ByVal Start_Date As Date, ByVal End_Date As Date) As KeyProducts_ShowRow
            Dim rowKeyProducts_ShowRow As KeyProducts_ShowRow = CType(Me.NewRow,KeyProducts_ShowRow)
            rowKeyProducts_ShowRow.ItemArray = New Object() {Nothing, TeamDivision, Line, Start_Date, End_Date}
            Me.Rows.Add(rowKeyProducts_ShowRow)
            Return rowKeyProducts_ShowRow
        End Function
        
        Public Function FindByRowid(ByVal Rowid As Decimal) As KeyProducts_ShowRow
            Return CType(Me.Rows.Find(New Object() {Rowid}),KeyProducts_ShowRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As KeyProducts_ShowDataTable = CType(MyBase.Clone,KeyProducts_ShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New KeyProducts_ShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnRowid = Me.Columns("Rowid")
            Me.columnTeamDivision = Me.Columns("TeamDivision")
            Me.columnLine = Me.Columns("Line")
            Me.columnStart_Date = Me.Columns("Start_Date")
            Me.columnEnd_Date = Me.Columns("End_Date")
        End Sub
        
        Private Sub InitClass()
            Me.columnRowid = New DataColumn("Rowid", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRowid)
            Me.columnTeamDivision = New DataColumn("TeamDivision", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTeamDivision)
            Me.columnLine = New DataColumn("Line", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLine)
            Me.columnStart_Date = New DataColumn("Start_Date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStart_Date)
            Me.columnEnd_Date = New DataColumn("End_Date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEnd_Date)
            Me.Constraints.Add(New UniqueConstraint("CodeTablesDSKey7", New DataColumn() {Me.columnRowid}, true))
            Me.columnRowid.AutoIncrement = true
            Me.columnRowid.AllowDBNull = false
            Me.columnRowid.ReadOnly = true
            Me.columnRowid.Unique = true
            Me.columnTeamDivision.ReadOnly = true
            Me.columnLine.ReadOnly = true
            Me.columnStart_Date.AllowDBNull = false
            Me.columnEnd_Date.AllowDBNull = false
        End Sub
        
        Public Function NewKeyProducts_ShowRow() As KeyProducts_ShowRow
            Return CType(Me.NewRow,KeyProducts_ShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New KeyProducts_ShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(KeyProducts_ShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.KeyProducts_ShowRowChangedEvent) Is Nothing) Then
                RaiseEvent KeyProducts_ShowRowChanged(Me, New KeyProducts_ShowRowChangeEvent(CType(e.Row,KeyProducts_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.KeyProducts_ShowRowChangingEvent) Is Nothing) Then
                RaiseEvent KeyProducts_ShowRowChanging(Me, New KeyProducts_ShowRowChangeEvent(CType(e.Row,KeyProducts_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.KeyProducts_ShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent KeyProducts_ShowRowDeleted(Me, New KeyProducts_ShowRowChangeEvent(CType(e.Row,KeyProducts_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.KeyProducts_ShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent KeyProducts_ShowRowDeleting(Me, New KeyProducts_ShowRowChangeEvent(CType(e.Row,KeyProducts_ShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveKeyProducts_ShowRow(ByVal row As KeyProducts_ShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class KeyProducts_ShowRow
        Inherits DataRow
        
        Private tableKeyProducts_Show As KeyProducts_ShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableKeyProducts_Show = CType(Me.Table,KeyProducts_ShowDataTable)
        End Sub
        
        Public Property Rowid As Decimal
            Get
                Return CType(Me(Me.tableKeyProducts_Show.RowidColumn),Decimal)
            End Get
            Set
                Me(Me.tableKeyProducts_Show.RowidColumn) = value
            End Set
        End Property
        
        Public Property TeamDivision As String
            Get
                Try 
                    Return CType(Me(Me.tableKeyProducts_Show.TeamDivisionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableKeyProducts_Show.TeamDivisionColumn) = value
            End Set
        End Property
        
        Public Property Line As String
            Get
                Try 
                    Return CType(Me(Me.tableKeyProducts_Show.LineColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableKeyProducts_Show.LineColumn) = value
            End Set
        End Property
        
        Public Property Start_Date As Date
            Get
                Return CType(Me(Me.tableKeyProducts_Show.Start_DateColumn),Date)
            End Get
            Set
                Me(Me.tableKeyProducts_Show.Start_DateColumn) = value
            End Set
        End Property
        
        Public Property End_Date As Date
            Get
                Return CType(Me(Me.tableKeyProducts_Show.End_DateColumn),Date)
            End Get
            Set
                Me(Me.tableKeyProducts_Show.End_DateColumn) = value
            End Set
        End Property
        
        Public Function IsTeamDivisionNull() As Boolean
            Return Me.IsNull(Me.tableKeyProducts_Show.TeamDivisionColumn)
        End Function
        
        Public Sub SetTeamDivisionNull()
            Me(Me.tableKeyProducts_Show.TeamDivisionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLineNull() As Boolean
            Return Me.IsNull(Me.tableKeyProducts_Show.LineColumn)
        End Function
        
        Public Sub SetLineNull()
            Me(Me.tableKeyProducts_Show.LineColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class KeyProducts_ShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As KeyProducts_ShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As KeyProducts_ShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As KeyProducts_ShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TeamDivisionCT_ShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnRowid As DataColumn
        
        Private columnDescription As DataColumn
        
        Private columnCreateDate As DataColumn
        
        Private columnUpdateDate As DataColumn
        
        Friend Sub New()
            MyBase.New("TeamDivisionCT_Show")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property RowidColumn As DataColumn
            Get
                Return Me.columnRowid
            End Get
        End Property
        
        Friend ReadOnly Property DescriptionColumn As DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        Friend ReadOnly Property CreateDateColumn As DataColumn
            Get
                Return Me.columnCreateDate
            End Get
        End Property
        
        Friend ReadOnly Property UpdateDateColumn As DataColumn
            Get
                Return Me.columnUpdateDate
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TeamDivisionCT_ShowRow
            Get
                Return CType(Me.Rows(index),TeamDivisionCT_ShowRow)
            End Get
        End Property
        
        Public Event TeamDivisionCT_ShowRowChanged As TeamDivisionCT_ShowRowChangeEventHandler
        
        Public Event TeamDivisionCT_ShowRowChanging As TeamDivisionCT_ShowRowChangeEventHandler
        
        Public Event TeamDivisionCT_ShowRowDeleted As TeamDivisionCT_ShowRowChangeEventHandler
        
        Public Event TeamDivisionCT_ShowRowDeleting As TeamDivisionCT_ShowRowChangeEventHandler
        
        Public Overloads Sub AddTeamDivisionCT_ShowRow(ByVal row As TeamDivisionCT_ShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTeamDivisionCT_ShowRow(ByVal Description As String, ByVal CreateDate As Date, ByVal UpdateDate As Date) As TeamDivisionCT_ShowRow
            Dim rowTeamDivisionCT_ShowRow As TeamDivisionCT_ShowRow = CType(Me.NewRow,TeamDivisionCT_ShowRow)
            rowTeamDivisionCT_ShowRow.ItemArray = New Object() {Nothing, Description, CreateDate, UpdateDate}
            Me.Rows.Add(rowTeamDivisionCT_ShowRow)
            Return rowTeamDivisionCT_ShowRow
        End Function
        
        Public Function FindByRowid(ByVal Rowid As Integer) As TeamDivisionCT_ShowRow
            Return CType(Me.Rows.Find(New Object() {Rowid}),TeamDivisionCT_ShowRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TeamDivisionCT_ShowDataTable = CType(MyBase.Clone,TeamDivisionCT_ShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TeamDivisionCT_ShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnRowid = Me.Columns("Rowid")
            Me.columnDescription = Me.Columns("Description")
            Me.columnCreateDate = Me.Columns("CreateDate")
            Me.columnUpdateDate = Me.Columns("UpdateDate")
        End Sub
        
        Private Sub InitClass()
            Me.columnRowid = New DataColumn("Rowid", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRowid)
            Me.columnDescription = New DataColumn("Description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescription)
            Me.columnCreateDate = New DataColumn("CreateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreateDate)
            Me.columnUpdateDate = New DataColumn("UpdateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUpdateDate)
            Me.Constraints.Add(New UniqueConstraint("CodeTablesDSKey9", New DataColumn() {Me.columnRowid}, true))
            Me.columnRowid.AutoIncrement = true
            Me.columnRowid.AllowDBNull = false
            Me.columnRowid.ReadOnly = true
            Me.columnRowid.Unique = true
            Me.columnCreateDate.AllowDBNull = false
            Me.columnUpdateDate.AllowDBNull = false
        End Sub
        
        Public Function NewTeamDivisionCT_ShowRow() As TeamDivisionCT_ShowRow
            Return CType(Me.NewRow,TeamDivisionCT_ShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TeamDivisionCT_ShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TeamDivisionCT_ShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TeamDivisionCT_ShowRowChangedEvent) Is Nothing) Then
                RaiseEvent TeamDivisionCT_ShowRowChanged(Me, New TeamDivisionCT_ShowRowChangeEvent(CType(e.Row,TeamDivisionCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TeamDivisionCT_ShowRowChangingEvent) Is Nothing) Then
                RaiseEvent TeamDivisionCT_ShowRowChanging(Me, New TeamDivisionCT_ShowRowChangeEvent(CType(e.Row,TeamDivisionCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TeamDivisionCT_ShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent TeamDivisionCT_ShowRowDeleted(Me, New TeamDivisionCT_ShowRowChangeEvent(CType(e.Row,TeamDivisionCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TeamDivisionCT_ShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent TeamDivisionCT_ShowRowDeleting(Me, New TeamDivisionCT_ShowRowChangeEvent(CType(e.Row,TeamDivisionCT_ShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTeamDivisionCT_ShowRow(ByVal row As TeamDivisionCT_ShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TeamDivisionCT_ShowRow
        Inherits DataRow
        
        Private tableTeamDivisionCT_Show As TeamDivisionCT_ShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTeamDivisionCT_Show = CType(Me.Table,TeamDivisionCT_ShowDataTable)
        End Sub
        
        Public Property Rowid As Integer
            Get
                Return CType(Me(Me.tableTeamDivisionCT_Show.RowidColumn),Integer)
            End Get
            Set
                Me(Me.tableTeamDivisionCT_Show.RowidColumn) = value
            End Set
        End Property
        
        Public Property Description As String
            Get
                Try 
                    Return CType(Me(Me.tableTeamDivisionCT_Show.DescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeamDivisionCT_Show.DescriptionColumn) = value
            End Set
        End Property
        
        Public Property CreateDate As Date
            Get
                Return CType(Me(Me.tableTeamDivisionCT_Show.CreateDateColumn),Date)
            End Get
            Set
                Me(Me.tableTeamDivisionCT_Show.CreateDateColumn) = value
            End Set
        End Property
        
        Public Property UpdateDate As Date
            Get
                Return CType(Me(Me.tableTeamDivisionCT_Show.UpdateDateColumn),Date)
            End Get
            Set
                Me(Me.tableTeamDivisionCT_Show.UpdateDateColumn) = value
            End Set
        End Property
        
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableTeamDivisionCT_Show.DescriptionColumn)
        End Function
        
        Public Sub SetDescriptionNull()
            Me(Me.tableTeamDivisionCT_Show.DescriptionColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TeamDivisionCT_ShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TeamDivisionCT_ShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TeamDivisionCT_ShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TeamDivisionCT_ShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ProductLinesCT_ShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnRowid As DataColumn
        
        Private columnDivision As DataColumn
        
        Private columnDescription As DataColumn
        
        Private columnCreateDate As DataColumn
        
        Private columnUpdateDate As DataColumn
        
        Friend Sub New()
            MyBase.New("ProductLinesCT_Show")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property RowidColumn As DataColumn
            Get
                Return Me.columnRowid
            End Get
        End Property
        
        Friend ReadOnly Property DivisionColumn As DataColumn
            Get
                Return Me.columnDivision
            End Get
        End Property
        
        Friend ReadOnly Property DescriptionColumn As DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        Friend ReadOnly Property CreateDateColumn As DataColumn
            Get
                Return Me.columnCreateDate
            End Get
        End Property
        
        Friend ReadOnly Property UpdateDateColumn As DataColumn
            Get
                Return Me.columnUpdateDate
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProductLinesCT_ShowRow
            Get
                Return CType(Me.Rows(index),ProductLinesCT_ShowRow)
            End Get
        End Property
        
        Public Event ProductLinesCT_ShowRowChanged As ProductLinesCT_ShowRowChangeEventHandler
        
        Public Event ProductLinesCT_ShowRowChanging As ProductLinesCT_ShowRowChangeEventHandler
        
        Public Event ProductLinesCT_ShowRowDeleted As ProductLinesCT_ShowRowChangeEventHandler
        
        Public Event ProductLinesCT_ShowRowDeleting As ProductLinesCT_ShowRowChangeEventHandler
        
        Public Overloads Sub AddProductLinesCT_ShowRow(ByVal row As ProductLinesCT_ShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddProductLinesCT_ShowRow(ByVal Division As String, ByVal Description As String, ByVal CreateDate As Date, ByVal UpdateDate As Date) As ProductLinesCT_ShowRow
            Dim rowProductLinesCT_ShowRow As ProductLinesCT_ShowRow = CType(Me.NewRow,ProductLinesCT_ShowRow)
            rowProductLinesCT_ShowRow.ItemArray = New Object() {Nothing, Division, Description, CreateDate, UpdateDate}
            Me.Rows.Add(rowProductLinesCT_ShowRow)
            Return rowProductLinesCT_ShowRow
        End Function
        
        Public Function FindByRowid(ByVal Rowid As Integer) As ProductLinesCT_ShowRow
            Return CType(Me.Rows.Find(New Object() {Rowid}),ProductLinesCT_ShowRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ProductLinesCT_ShowDataTable = CType(MyBase.Clone,ProductLinesCT_ShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ProductLinesCT_ShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnRowid = Me.Columns("Rowid")
            Me.columnDivision = Me.Columns("Division")
            Me.columnDescription = Me.Columns("Description")
            Me.columnCreateDate = Me.Columns("CreateDate")
            Me.columnUpdateDate = Me.Columns("UpdateDate")
        End Sub
        
        Private Sub InitClass()
            Me.columnRowid = New DataColumn("Rowid", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRowid)
            Me.columnDivision = New DataColumn("Division", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDivision)
            Me.columnDescription = New DataColumn("Description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescription)
            Me.columnCreateDate = New DataColumn("CreateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreateDate)
            Me.columnUpdateDate = New DataColumn("UpdateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUpdateDate)
            Me.Constraints.Add(New UniqueConstraint("CodeTablesDSKey10", New DataColumn() {Me.columnRowid}, true))
            Me.columnRowid.AutoIncrement = true
            Me.columnRowid.AllowDBNull = false
            Me.columnRowid.ReadOnly = true
            Me.columnRowid.Unique = true
            Me.columnCreateDate.AllowDBNull = false
            Me.columnUpdateDate.AllowDBNull = false
        End Sub
        
        Public Function NewProductLinesCT_ShowRow() As ProductLinesCT_ShowRow
            Return CType(Me.NewRow,ProductLinesCT_ShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ProductLinesCT_ShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ProductLinesCT_ShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ProductLinesCT_ShowRowChangedEvent) Is Nothing) Then
                RaiseEvent ProductLinesCT_ShowRowChanged(Me, New ProductLinesCT_ShowRowChangeEvent(CType(e.Row,ProductLinesCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ProductLinesCT_ShowRowChangingEvent) Is Nothing) Then
                RaiseEvent ProductLinesCT_ShowRowChanging(Me, New ProductLinesCT_ShowRowChangeEvent(CType(e.Row,ProductLinesCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ProductLinesCT_ShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent ProductLinesCT_ShowRowDeleted(Me, New ProductLinesCT_ShowRowChangeEvent(CType(e.Row,ProductLinesCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ProductLinesCT_ShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent ProductLinesCT_ShowRowDeleting(Me, New ProductLinesCT_ShowRowChangeEvent(CType(e.Row,ProductLinesCT_ShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveProductLinesCT_ShowRow(ByVal row As ProductLinesCT_ShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ProductLinesCT_ShowRow
        Inherits DataRow
        
        Private tableProductLinesCT_Show As ProductLinesCT_ShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableProductLinesCT_Show = CType(Me.Table,ProductLinesCT_ShowDataTable)
        End Sub
        
        Public Property Rowid As Integer
            Get
                Return CType(Me(Me.tableProductLinesCT_Show.RowidColumn),Integer)
            End Get
            Set
                Me(Me.tableProductLinesCT_Show.RowidColumn) = value
            End Set
        End Property
        
        Public Property Division As String
            Get
                Try 
                    Return CType(Me(Me.tableProductLinesCT_Show.DivisionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductLinesCT_Show.DivisionColumn) = value
            End Set
        End Property
        
        Public Property Description As String
            Get
                Try 
                    Return CType(Me(Me.tableProductLinesCT_Show.DescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductLinesCT_Show.DescriptionColumn) = value
            End Set
        End Property
        
        Public Property CreateDate As Date
            Get
                Return CType(Me(Me.tableProductLinesCT_Show.CreateDateColumn),Date)
            End Get
            Set
                Me(Me.tableProductLinesCT_Show.CreateDateColumn) = value
            End Set
        End Property
        
        Public Property UpdateDate As Date
            Get
                Return CType(Me(Me.tableProductLinesCT_Show.UpdateDateColumn),Date)
            End Get
            Set
                Me(Me.tableProductLinesCT_Show.UpdateDateColumn) = value
            End Set
        End Property
        
        Public Function IsDivisionNull() As Boolean
            Return Me.IsNull(Me.tableProductLinesCT_Show.DivisionColumn)
        End Function
        
        Public Sub SetDivisionNull()
            Me(Me.tableProductLinesCT_Show.DivisionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableProductLinesCT_Show.DescriptionColumn)
        End Function
        
        Public Sub SetDescriptionNull()
            Me(Me.tableProductLinesCT_Show.DescriptionColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ProductLinesCT_ShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ProductLinesCT_ShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ProductLinesCT_ShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ProductLinesCT_ShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CustomerType_ComboDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnType As DataColumn
        
        Friend Sub New()
            MyBase.New("CustomerType_Combo")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property TypeColumn As DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CustomerType_ComboRow
            Get
                Return CType(Me.Rows(index),CustomerType_ComboRow)
            End Get
        End Property
        
        Public Event CustomerType_ComboRowChanged As CustomerType_ComboRowChangeEventHandler
        
        Public Event CustomerType_ComboRowChanging As CustomerType_ComboRowChangeEventHandler
        
        Public Event CustomerType_ComboRowDeleted As CustomerType_ComboRowChangeEventHandler
        
        Public Event CustomerType_ComboRowDeleting As CustomerType_ComboRowChangeEventHandler
        
        Public Overloads Sub AddCustomerType_ComboRow(ByVal row As CustomerType_ComboRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCustomerType_ComboRow(ByVal Type As String) As CustomerType_ComboRow
            Dim rowCustomerType_ComboRow As CustomerType_ComboRow = CType(Me.NewRow,CustomerType_ComboRow)
            rowCustomerType_ComboRow.ItemArray = New Object() {Type}
            Me.Rows.Add(rowCustomerType_ComboRow)
            Return rowCustomerType_ComboRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CustomerType_ComboDataTable = CType(MyBase.Clone,CustomerType_ComboDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CustomerType_ComboDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnType = Me.Columns("Type")
        End Sub
        
        Private Sub InitClass()
            Me.columnType = New DataColumn("Type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnType)
            Me.columnType.ReadOnly = true
        End Sub
        
        Public Function NewCustomerType_ComboRow() As CustomerType_ComboRow
            Return CType(Me.NewRow,CustomerType_ComboRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CustomerType_ComboRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CustomerType_ComboRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CustomerType_ComboRowChangedEvent) Is Nothing) Then
                RaiseEvent CustomerType_ComboRowChanged(Me, New CustomerType_ComboRowChangeEvent(CType(e.Row,CustomerType_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CustomerType_ComboRowChangingEvent) Is Nothing) Then
                RaiseEvent CustomerType_ComboRowChanging(Me, New CustomerType_ComboRowChangeEvent(CType(e.Row,CustomerType_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CustomerType_ComboRowDeletedEvent) Is Nothing) Then
                RaiseEvent CustomerType_ComboRowDeleted(Me, New CustomerType_ComboRowChangeEvent(CType(e.Row,CustomerType_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CustomerType_ComboRowDeletingEvent) Is Nothing) Then
                RaiseEvent CustomerType_ComboRowDeleting(Me, New CustomerType_ComboRowChangeEvent(CType(e.Row,CustomerType_ComboRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCustomerType_ComboRow(ByVal row As CustomerType_ComboRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CustomerType_ComboRow
        Inherits DataRow
        
        Private tableCustomerType_Combo As CustomerType_ComboDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCustomerType_Combo = CType(Me.Table,CustomerType_ComboDataTable)
        End Sub
        
        Public Property Type As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerType_Combo.TypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerType_Combo.TypeColumn) = value
            End Set
        End Property
        
        Public Function IsTypeNull() As Boolean
            Return Me.IsNull(Me.tableCustomerType_Combo.TypeColumn)
        End Function
        
        Public Sub SetTypeNull()
            Me(Me.tableCustomerType_Combo.TypeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CustomerType_ComboRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CustomerType_ComboRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CustomerType_ComboRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CustomerType_ComboRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CallRateBudgetCT_ShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMedrep As DataColumn
        
        Private columnTarget As DataColumn
        
        Private columnCommissionDate As DataColumn
        
        Private columnCreateDate As DataColumn
        
        Private columnUpdateDate As DataColumn
        
        Friend Sub New()
            MyBase.New("CallRateBudgetCT_Show")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property MedrepColumn As DataColumn
            Get
                Return Me.columnMedrep
            End Get
        End Property
        
        Friend ReadOnly Property TargetColumn As DataColumn
            Get
                Return Me.columnTarget
            End Get
        End Property
        
        Friend ReadOnly Property CommissionDateColumn As DataColumn
            Get
                Return Me.columnCommissionDate
            End Get
        End Property
        
        Friend ReadOnly Property CreateDateColumn As DataColumn
            Get
                Return Me.columnCreateDate
            End Get
        End Property
        
        Friend ReadOnly Property UpdateDateColumn As DataColumn
            Get
                Return Me.columnUpdateDate
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CallRateBudgetCT_ShowRow
            Get
                Return CType(Me.Rows(index),CallRateBudgetCT_ShowRow)
            End Get
        End Property
        
        Public Event CallRateBudgetCT_ShowRowChanged As CallRateBudgetCT_ShowRowChangeEventHandler
        
        Public Event CallRateBudgetCT_ShowRowChanging As CallRateBudgetCT_ShowRowChangeEventHandler
        
        Public Event CallRateBudgetCT_ShowRowDeleted As CallRateBudgetCT_ShowRowChangeEventHandler
        
        Public Event CallRateBudgetCT_ShowRowDeleting As CallRateBudgetCT_ShowRowChangeEventHandler
        
        Public Overloads Sub AddCallRateBudgetCT_ShowRow(ByVal row As CallRateBudgetCT_ShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCallRateBudgetCT_ShowRow(ByVal Medrep As String, ByVal Target As Decimal, ByVal CommissionDate As Date, ByVal CreateDate As Date, ByVal UpdateDate As Date) As CallRateBudgetCT_ShowRow
            Dim rowCallRateBudgetCT_ShowRow As CallRateBudgetCT_ShowRow = CType(Me.NewRow,CallRateBudgetCT_ShowRow)
            rowCallRateBudgetCT_ShowRow.ItemArray = New Object() {Medrep, Target, CommissionDate, CreateDate, UpdateDate}
            Me.Rows.Add(rowCallRateBudgetCT_ShowRow)
            Return rowCallRateBudgetCT_ShowRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CallRateBudgetCT_ShowDataTable = CType(MyBase.Clone,CallRateBudgetCT_ShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CallRateBudgetCT_ShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMedrep = Me.Columns("Medrep")
            Me.columnTarget = Me.Columns("Target")
            Me.columnCommissionDate = Me.Columns("CommissionDate")
            Me.columnCreateDate = Me.Columns("CreateDate")
            Me.columnUpdateDate = Me.Columns("UpdateDate")
        End Sub
        
        Private Sub InitClass()
            Me.columnMedrep = New DataColumn("Medrep", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMedrep)
            Me.columnTarget = New DataColumn("Target", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTarget)
            Me.columnCommissionDate = New DataColumn("CommissionDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCommissionDate)
            Me.columnCreateDate = New DataColumn("CreateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreateDate)
            Me.columnUpdateDate = New DataColumn("UpdateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUpdateDate)
            Me.columnMedrep.ReadOnly = true
        End Sub
        
        Public Function NewCallRateBudgetCT_ShowRow() As CallRateBudgetCT_ShowRow
            Return CType(Me.NewRow,CallRateBudgetCT_ShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CallRateBudgetCT_ShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CallRateBudgetCT_ShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CallRateBudgetCT_ShowRowChangedEvent) Is Nothing) Then
                RaiseEvent CallRateBudgetCT_ShowRowChanged(Me, New CallRateBudgetCT_ShowRowChangeEvent(CType(e.Row,CallRateBudgetCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CallRateBudgetCT_ShowRowChangingEvent) Is Nothing) Then
                RaiseEvent CallRateBudgetCT_ShowRowChanging(Me, New CallRateBudgetCT_ShowRowChangeEvent(CType(e.Row,CallRateBudgetCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CallRateBudgetCT_ShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent CallRateBudgetCT_ShowRowDeleted(Me, New CallRateBudgetCT_ShowRowChangeEvent(CType(e.Row,CallRateBudgetCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CallRateBudgetCT_ShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent CallRateBudgetCT_ShowRowDeleting(Me, New CallRateBudgetCT_ShowRowChangeEvent(CType(e.Row,CallRateBudgetCT_ShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCallRateBudgetCT_ShowRow(ByVal row As CallRateBudgetCT_ShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CallRateBudgetCT_ShowRow
        Inherits DataRow
        
        Private tableCallRateBudgetCT_Show As CallRateBudgetCT_ShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCallRateBudgetCT_Show = CType(Me.Table,CallRateBudgetCT_ShowDataTable)
        End Sub
        
        Public Property Medrep As String
            Get
                Try 
                    Return CType(Me(Me.tableCallRateBudgetCT_Show.MedrepColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCallRateBudgetCT_Show.MedrepColumn) = value
            End Set
        End Property
        
        Public Property Target As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCallRateBudgetCT_Show.TargetColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCallRateBudgetCT_Show.TargetColumn) = value
            End Set
        End Property
        
        Public Property CommissionDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableCallRateBudgetCT_Show.CommissionDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCallRateBudgetCT_Show.CommissionDateColumn) = value
            End Set
        End Property
        
        Public Property CreateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableCallRateBudgetCT_Show.CreateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCallRateBudgetCT_Show.CreateDateColumn) = value
            End Set
        End Property
        
        Public Property UpdateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableCallRateBudgetCT_Show.UpdateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCallRateBudgetCT_Show.UpdateDateColumn) = value
            End Set
        End Property
        
        Public Function IsMedrepNull() As Boolean
            Return Me.IsNull(Me.tableCallRateBudgetCT_Show.MedrepColumn)
        End Function
        
        Public Sub SetMedrepNull()
            Me(Me.tableCallRateBudgetCT_Show.MedrepColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTargetNull() As Boolean
            Return Me.IsNull(Me.tableCallRateBudgetCT_Show.TargetColumn)
        End Function
        
        Public Sub SetTargetNull()
            Me(Me.tableCallRateBudgetCT_Show.TargetColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCommissionDateNull() As Boolean
            Return Me.IsNull(Me.tableCallRateBudgetCT_Show.CommissionDateColumn)
        End Function
        
        Public Sub SetCommissionDateNull()
            Me(Me.tableCallRateBudgetCT_Show.CommissionDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreateDateNull() As Boolean
            Return Me.IsNull(Me.tableCallRateBudgetCT_Show.CreateDateColumn)
        End Function
        
        Public Sub SetCreateDateNull()
            Me(Me.tableCallRateBudgetCT_Show.CreateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUpdateDateNull() As Boolean
            Return Me.IsNull(Me.tableCallRateBudgetCT_Show.UpdateDateColumn)
        End Function
        
        Public Sub SetUpdateDateNull()
            Me(Me.tableCallRateBudgetCT_Show.UpdateDateColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CallRateBudgetCT_ShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CallRateBudgetCT_ShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CallRateBudgetCT_ShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CallRateBudgetCT_ShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Medrep_ComboDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMedrep As DataColumn
        
        Friend Sub New()
            MyBase.New("Medrep_Combo")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property MedrepColumn As DataColumn
            Get
                Return Me.columnMedrep
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Medrep_ComboRow
            Get
                Return CType(Me.Rows(index),Medrep_ComboRow)
            End Get
        End Property
        
        Public Event Medrep_ComboRowChanged As Medrep_ComboRowChangeEventHandler
        
        Public Event Medrep_ComboRowChanging As Medrep_ComboRowChangeEventHandler
        
        Public Event Medrep_ComboRowDeleted As Medrep_ComboRowChangeEventHandler
        
        Public Event Medrep_ComboRowDeleting As Medrep_ComboRowChangeEventHandler
        
        Public Overloads Sub AddMedrep_ComboRow(ByVal row As Medrep_ComboRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMedrep_ComboRow(ByVal Medrep As String) As Medrep_ComboRow
            Dim rowMedrep_ComboRow As Medrep_ComboRow = CType(Me.NewRow,Medrep_ComboRow)
            rowMedrep_ComboRow.ItemArray = New Object() {Medrep}
            Me.Rows.Add(rowMedrep_ComboRow)
            Return rowMedrep_ComboRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Medrep_ComboDataTable = CType(MyBase.Clone,Medrep_ComboDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Medrep_ComboDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMedrep = Me.Columns("Medrep")
        End Sub
        
        Private Sub InitClass()
            Me.columnMedrep = New DataColumn("Medrep", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMedrep)
            Me.columnMedrep.ReadOnly = true
        End Sub
        
        Public Function NewMedrep_ComboRow() As Medrep_ComboRow
            Return CType(Me.NewRow,Medrep_ComboRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Medrep_ComboRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Medrep_ComboRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Medrep_ComboRowChangedEvent) Is Nothing) Then
                RaiseEvent Medrep_ComboRowChanged(Me, New Medrep_ComboRowChangeEvent(CType(e.Row,Medrep_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Medrep_ComboRowChangingEvent) Is Nothing) Then
                RaiseEvent Medrep_ComboRowChanging(Me, New Medrep_ComboRowChangeEvent(CType(e.Row,Medrep_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Medrep_ComboRowDeletedEvent) Is Nothing) Then
                RaiseEvent Medrep_ComboRowDeleted(Me, New Medrep_ComboRowChangeEvent(CType(e.Row,Medrep_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Medrep_ComboRowDeletingEvent) Is Nothing) Then
                RaiseEvent Medrep_ComboRowDeleting(Me, New Medrep_ComboRowChangeEvent(CType(e.Row,Medrep_ComboRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMedrep_ComboRow(ByVal row As Medrep_ComboRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Medrep_ComboRow
        Inherits DataRow
        
        Private tableMedrep_Combo As Medrep_ComboDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMedrep_Combo = CType(Me.Table,Medrep_ComboDataTable)
        End Sub
        
        Public Property Medrep As String
            Get
                Try 
                    Return CType(Me(Me.tableMedrep_Combo.MedrepColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMedrep_Combo.MedrepColumn) = value
            End Set
        End Property
        
        Public Function IsMedrepNull() As Boolean
            Return Me.IsNull(Me.tableMedrep_Combo.MedrepColumn)
        End Function
        
        Public Sub SetMedrepNull()
            Me(Me.tableMedrep_Combo.MedrepColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Medrep_ComboRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Medrep_ComboRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Medrep_ComboRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Medrep_ComboRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NsmCT_ShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnRowid As DataColumn
        
        Private columnNsmCode As DataColumn
        
        Private columnNsmName As DataColumn
        
        Private columnEmail As DataColumn
        
        Private columnMobileNo As DataColumn
        
        Private columnHire_Date As DataColumn
        
        Private columnResign_Date As DataColumn
        
        Private columnCreateDate As DataColumn
        
        Private columnUpdateDate As DataColumn
        
        Private columnLastUser As DataColumn
        
        Private columnDivCode As DataColumn
        
        Private columndivision As DataColumn
        
        Private columnStartDate As DataColumn
        
        Private columnEndDate As DataColumn
        
        Friend Sub New()
            MyBase.New("NsmCT_Show")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property RowidColumn As DataColumn
            Get
                Return Me.columnRowid
            End Get
        End Property
        
        Friend ReadOnly Property NsmCodeColumn As DataColumn
            Get
                Return Me.columnNsmCode
            End Get
        End Property
        
        Friend ReadOnly Property NsmNameColumn As DataColumn
            Get
                Return Me.columnNsmName
            End Get
        End Property
        
        Friend ReadOnly Property EmailColumn As DataColumn
            Get
                Return Me.columnEmail
            End Get
        End Property
        
        Friend ReadOnly Property MobileNoColumn As DataColumn
            Get
                Return Me.columnMobileNo
            End Get
        End Property
        
        Friend ReadOnly Property Hire_DateColumn As DataColumn
            Get
                Return Me.columnHire_Date
            End Get
        End Property
        
        Friend ReadOnly Property Resign_DateColumn As DataColumn
            Get
                Return Me.columnResign_Date
            End Get
        End Property
        
        Friend ReadOnly Property CreateDateColumn As DataColumn
            Get
                Return Me.columnCreateDate
            End Get
        End Property
        
        Friend ReadOnly Property UpdateDateColumn As DataColumn
            Get
                Return Me.columnUpdateDate
            End Get
        End Property
        
        Friend ReadOnly Property LastUserColumn As DataColumn
            Get
                Return Me.columnLastUser
            End Get
        End Property
        
        Friend ReadOnly Property DivCodeColumn As DataColumn
            Get
                Return Me.columnDivCode
            End Get
        End Property
        
        Friend ReadOnly Property divisionColumn As DataColumn
            Get
                Return Me.columndivision
            End Get
        End Property
        
        Friend ReadOnly Property StartDateColumn As DataColumn
            Get
                Return Me.columnStartDate
            End Get
        End Property
        
        Friend ReadOnly Property EndDateColumn As DataColumn
            Get
                Return Me.columnEndDate
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As NsmCT_ShowRow
            Get
                Return CType(Me.Rows(index),NsmCT_ShowRow)
            End Get
        End Property
        
        Public Event NsmCT_ShowRowChanged As NsmCT_ShowRowChangeEventHandler
        
        Public Event NsmCT_ShowRowChanging As NsmCT_ShowRowChangeEventHandler
        
        Public Event NsmCT_ShowRowDeleted As NsmCT_ShowRowChangeEventHandler
        
        Public Event NsmCT_ShowRowDeleting As NsmCT_ShowRowChangeEventHandler
        
        Public Overloads Sub AddNsmCT_ShowRow(ByVal row As NsmCT_ShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddNsmCT_ShowRow(ByVal NsmCode As String, ByVal NsmName As String, ByVal Email As String, ByVal MobileNo As String, ByVal Hire_Date As Date, ByVal Resign_Date As Date, ByVal CreateDate As Date, ByVal UpdateDate As Date, ByVal LastUser As String, ByVal DivCode As String, ByVal division As String, ByVal StartDate As Date, ByVal EndDate As Date) As NsmCT_ShowRow
            Dim rowNsmCT_ShowRow As NsmCT_ShowRow = CType(Me.NewRow,NsmCT_ShowRow)
            rowNsmCT_ShowRow.ItemArray = New Object() {Nothing, NsmCode, NsmName, Email, MobileNo, Hire_Date, Resign_Date, CreateDate, UpdateDate, LastUser, DivCode, division, StartDate, EndDate}
            Me.Rows.Add(rowNsmCT_ShowRow)
            Return rowNsmCT_ShowRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As NsmCT_ShowDataTable = CType(MyBase.Clone,NsmCT_ShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New NsmCT_ShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnRowid = Me.Columns("Rowid")
            Me.columnNsmCode = Me.Columns("NsmCode")
            Me.columnNsmName = Me.Columns("NsmName")
            Me.columnEmail = Me.Columns("Email")
            Me.columnMobileNo = Me.Columns("MobileNo")
            Me.columnHire_Date = Me.Columns("Hire_Date")
            Me.columnResign_Date = Me.Columns("Resign_Date")
            Me.columnCreateDate = Me.Columns("CreateDate")
            Me.columnUpdateDate = Me.Columns("UpdateDate")
            Me.columnLastUser = Me.Columns("LastUser")
            Me.columnDivCode = Me.Columns("DivCode")
            Me.columndivision = Me.Columns("division")
            Me.columnStartDate = Me.Columns("StartDate")
            Me.columnEndDate = Me.Columns("EndDate")
        End Sub
        
        Private Sub InitClass()
            Me.columnRowid = New DataColumn("Rowid", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRowid)
            Me.columnNsmCode = New DataColumn("NsmCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNsmCode)
            Me.columnNsmName = New DataColumn("NsmName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNsmName)
            Me.columnEmail = New DataColumn("Email", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmail)
            Me.columnMobileNo = New DataColumn("MobileNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMobileNo)
            Me.columnHire_Date = New DataColumn("Hire_Date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHire_Date)
            Me.columnResign_Date = New DataColumn("Resign_Date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnResign_Date)
            Me.columnCreateDate = New DataColumn("CreateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreateDate)
            Me.columnUpdateDate = New DataColumn("UpdateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUpdateDate)
            Me.columnLastUser = New DataColumn("LastUser", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLastUser)
            Me.columnDivCode = New DataColumn("DivCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDivCode)
            Me.columndivision = New DataColumn("division", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndivision)
            Me.columnStartDate = New DataColumn("StartDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStartDate)
            Me.columnEndDate = New DataColumn("EndDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEndDate)
            Me.columnRowid.AutoIncrement = true
            Me.columnRowid.AllowDBNull = false
            Me.columnRowid.ReadOnly = true
            Me.columndivision.ReadOnly = true
        End Sub
        
        Public Function NewNsmCT_ShowRow() As NsmCT_ShowRow
            Return CType(Me.NewRow,NsmCT_ShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New NsmCT_ShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(NsmCT_ShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NsmCT_ShowRowChangedEvent) Is Nothing) Then
                RaiseEvent NsmCT_ShowRowChanged(Me, New NsmCT_ShowRowChangeEvent(CType(e.Row,NsmCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NsmCT_ShowRowChangingEvent) Is Nothing) Then
                RaiseEvent NsmCT_ShowRowChanging(Me, New NsmCT_ShowRowChangeEvent(CType(e.Row,NsmCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NsmCT_ShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent NsmCT_ShowRowDeleted(Me, New NsmCT_ShowRowChangeEvent(CType(e.Row,NsmCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NsmCT_ShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent NsmCT_ShowRowDeleting(Me, New NsmCT_ShowRowChangeEvent(CType(e.Row,NsmCT_ShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveNsmCT_ShowRow(ByVal row As NsmCT_ShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NsmCT_ShowRow
        Inherits DataRow
        
        Private tableNsmCT_Show As NsmCT_ShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableNsmCT_Show = CType(Me.Table,NsmCT_ShowDataTable)
        End Sub
        
        Public Property Rowid As Decimal
            Get
                Return CType(Me(Me.tableNsmCT_Show.RowidColumn),Decimal)
            End Get
            Set
                Me(Me.tableNsmCT_Show.RowidColumn) = value
            End Set
        End Property
        
        Public Property NsmCode As String
            Get
                Try 
                    Return CType(Me(Me.tableNsmCT_Show.NsmCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNsmCT_Show.NsmCodeColumn) = value
            End Set
        End Property
        
        Public Property NsmName As String
            Get
                Try 
                    Return CType(Me(Me.tableNsmCT_Show.NsmNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNsmCT_Show.NsmNameColumn) = value
            End Set
        End Property
        
        Public Property Email As String
            Get
                Try 
                    Return CType(Me(Me.tableNsmCT_Show.EmailColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNsmCT_Show.EmailColumn) = value
            End Set
        End Property
        
        Public Property MobileNo As String
            Get
                Try 
                    Return CType(Me(Me.tableNsmCT_Show.MobileNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNsmCT_Show.MobileNoColumn) = value
            End Set
        End Property
        
        Public Property Hire_Date As Date
            Get
                Try 
                    Return CType(Me(Me.tableNsmCT_Show.Hire_DateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNsmCT_Show.Hire_DateColumn) = value
            End Set
        End Property
        
        Public Property Resign_Date As Date
            Get
                Try 
                    Return CType(Me(Me.tableNsmCT_Show.Resign_DateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNsmCT_Show.Resign_DateColumn) = value
            End Set
        End Property
        
        Public Property CreateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableNsmCT_Show.CreateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNsmCT_Show.CreateDateColumn) = value
            End Set
        End Property
        
        Public Property UpdateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableNsmCT_Show.UpdateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNsmCT_Show.UpdateDateColumn) = value
            End Set
        End Property
        
        Public Property LastUser As String
            Get
                Try 
                    Return CType(Me(Me.tableNsmCT_Show.LastUserColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNsmCT_Show.LastUserColumn) = value
            End Set
        End Property
        
        Public Property DivCode As String
            Get
                Try 
                    Return CType(Me(Me.tableNsmCT_Show.DivCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNsmCT_Show.DivCodeColumn) = value
            End Set
        End Property
        
        Public Property division As String
            Get
                Try 
                    Return CType(Me(Me.tableNsmCT_Show.divisionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNsmCT_Show.divisionColumn) = value
            End Set
        End Property
        
        Public Property StartDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableNsmCT_Show.StartDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNsmCT_Show.StartDateColumn) = value
            End Set
        End Property
        
        Public Property EndDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableNsmCT_Show.EndDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNsmCT_Show.EndDateColumn) = value
            End Set
        End Property
        
        Public Function IsNsmCodeNull() As Boolean
            Return Me.IsNull(Me.tableNsmCT_Show.NsmCodeColumn)
        End Function
        
        Public Sub SetNsmCodeNull()
            Me(Me.tableNsmCT_Show.NsmCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNsmNameNull() As Boolean
            Return Me.IsNull(Me.tableNsmCT_Show.NsmNameColumn)
        End Function
        
        Public Sub SetNsmNameNull()
            Me(Me.tableNsmCT_Show.NsmNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEmailNull() As Boolean
            Return Me.IsNull(Me.tableNsmCT_Show.EmailColumn)
        End Function
        
        Public Sub SetEmailNull()
            Me(Me.tableNsmCT_Show.EmailColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMobileNoNull() As Boolean
            Return Me.IsNull(Me.tableNsmCT_Show.MobileNoColumn)
        End Function
        
        Public Sub SetMobileNoNull()
            Me(Me.tableNsmCT_Show.MobileNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHire_DateNull() As Boolean
            Return Me.IsNull(Me.tableNsmCT_Show.Hire_DateColumn)
        End Function
        
        Public Sub SetHire_DateNull()
            Me(Me.tableNsmCT_Show.Hire_DateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsResign_DateNull() As Boolean
            Return Me.IsNull(Me.tableNsmCT_Show.Resign_DateColumn)
        End Function
        
        Public Sub SetResign_DateNull()
            Me(Me.tableNsmCT_Show.Resign_DateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreateDateNull() As Boolean
            Return Me.IsNull(Me.tableNsmCT_Show.CreateDateColumn)
        End Function
        
        Public Sub SetCreateDateNull()
            Me(Me.tableNsmCT_Show.CreateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUpdateDateNull() As Boolean
            Return Me.IsNull(Me.tableNsmCT_Show.UpdateDateColumn)
        End Function
        
        Public Sub SetUpdateDateNull()
            Me(Me.tableNsmCT_Show.UpdateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLastUserNull() As Boolean
            Return Me.IsNull(Me.tableNsmCT_Show.LastUserColumn)
        End Function
        
        Public Sub SetLastUserNull()
            Me(Me.tableNsmCT_Show.LastUserColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDivCodeNull() As Boolean
            Return Me.IsNull(Me.tableNsmCT_Show.DivCodeColumn)
        End Function
        
        Public Sub SetDivCodeNull()
            Me(Me.tableNsmCT_Show.DivCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdivisionNull() As Boolean
            Return Me.IsNull(Me.tableNsmCT_Show.divisionColumn)
        End Function
        
        Public Sub SetdivisionNull()
            Me(Me.tableNsmCT_Show.divisionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStartDateNull() As Boolean
            Return Me.IsNull(Me.tableNsmCT_Show.StartDateColumn)
        End Function
        
        Public Sub SetStartDateNull()
            Me(Me.tableNsmCT_Show.StartDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEndDateNull() As Boolean
            Return Me.IsNull(Me.tableNsmCT_Show.EndDateColumn)
        End Function
        
        Public Sub SetEndDateNull()
            Me(Me.tableNsmCT_Show.EndDateColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NsmCT_ShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As NsmCT_ShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As NsmCT_ShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As NsmCT_ShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SuperDivCT_ShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnrowid As DataColumn
        
        Private columnSupervisor As DataColumn
        
        Private columnDivision As DataColumn
        
        Private columnStartDate As DataColumn
        
        Private columnEndDate As DataColumn
        
        Private columnCreateDate As DataColumn
        
        Private columnUpdateDate As DataColumn
        
        Friend Sub New()
            MyBase.New("SuperDivCT_Show")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property rowidColumn As DataColumn
            Get
                Return Me.columnrowid
            End Get
        End Property
        
        Friend ReadOnly Property SupervisorColumn As DataColumn
            Get
                Return Me.columnSupervisor
            End Get
        End Property
        
        Friend ReadOnly Property DivisionColumn As DataColumn
            Get
                Return Me.columnDivision
            End Get
        End Property
        
        Friend ReadOnly Property StartDateColumn As DataColumn
            Get
                Return Me.columnStartDate
            End Get
        End Property
        
        Friend ReadOnly Property EndDateColumn As DataColumn
            Get
                Return Me.columnEndDate
            End Get
        End Property
        
        Friend ReadOnly Property CreateDateColumn As DataColumn
            Get
                Return Me.columnCreateDate
            End Get
        End Property
        
        Friend ReadOnly Property UpdateDateColumn As DataColumn
            Get
                Return Me.columnUpdateDate
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SuperDivCT_ShowRow
            Get
                Return CType(Me.Rows(index),SuperDivCT_ShowRow)
            End Get
        End Property
        
        Public Event SuperDivCT_ShowRowChanged As SuperDivCT_ShowRowChangeEventHandler
        
        Public Event SuperDivCT_ShowRowChanging As SuperDivCT_ShowRowChangeEventHandler
        
        Public Event SuperDivCT_ShowRowDeleted As SuperDivCT_ShowRowChangeEventHandler
        
        Public Event SuperDivCT_ShowRowDeleting As SuperDivCT_ShowRowChangeEventHandler
        
        Public Overloads Sub AddSuperDivCT_ShowRow(ByVal row As SuperDivCT_ShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSuperDivCT_ShowRow(ByVal Supervisor As String, ByVal Division As String, ByVal StartDate As Date, ByVal EndDate As Date, ByVal CreateDate As Date, ByVal UpdateDate As Date) As SuperDivCT_ShowRow
            Dim rowSuperDivCT_ShowRow As SuperDivCT_ShowRow = CType(Me.NewRow,SuperDivCT_ShowRow)
            rowSuperDivCT_ShowRow.ItemArray = New Object() {Nothing, Supervisor, Division, StartDate, EndDate, CreateDate, UpdateDate}
            Me.Rows.Add(rowSuperDivCT_ShowRow)
            Return rowSuperDivCT_ShowRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SuperDivCT_ShowDataTable = CType(MyBase.Clone,SuperDivCT_ShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SuperDivCT_ShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnrowid = Me.Columns("rowid")
            Me.columnSupervisor = Me.Columns("Supervisor")
            Me.columnDivision = Me.Columns("Division")
            Me.columnStartDate = Me.Columns("StartDate")
            Me.columnEndDate = Me.Columns("EndDate")
            Me.columnCreateDate = Me.Columns("CreateDate")
            Me.columnUpdateDate = Me.Columns("UpdateDate")
        End Sub
        
        Private Sub InitClass()
            Me.columnrowid = New DataColumn("rowid", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrowid)
            Me.columnSupervisor = New DataColumn("Supervisor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSupervisor)
            Me.columnDivision = New DataColumn("Division", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDivision)
            Me.columnStartDate = New DataColumn("StartDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStartDate)
            Me.columnEndDate = New DataColumn("EndDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEndDate)
            Me.columnCreateDate = New DataColumn("CreateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreateDate)
            Me.columnUpdateDate = New DataColumn("UpdateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUpdateDate)
            Me.columnrowid.AutoIncrement = true
            Me.columnrowid.AllowDBNull = false
            Me.columnrowid.ReadOnly = true
            Me.columnSupervisor.ReadOnly = true
            Me.columnDivision.ReadOnly = true
        End Sub
        
        Public Function NewSuperDivCT_ShowRow() As SuperDivCT_ShowRow
            Return CType(Me.NewRow,SuperDivCT_ShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SuperDivCT_ShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SuperDivCT_ShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SuperDivCT_ShowRowChangedEvent) Is Nothing) Then
                RaiseEvent SuperDivCT_ShowRowChanged(Me, New SuperDivCT_ShowRowChangeEvent(CType(e.Row,SuperDivCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SuperDivCT_ShowRowChangingEvent) Is Nothing) Then
                RaiseEvent SuperDivCT_ShowRowChanging(Me, New SuperDivCT_ShowRowChangeEvent(CType(e.Row,SuperDivCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SuperDivCT_ShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent SuperDivCT_ShowRowDeleted(Me, New SuperDivCT_ShowRowChangeEvent(CType(e.Row,SuperDivCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SuperDivCT_ShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent SuperDivCT_ShowRowDeleting(Me, New SuperDivCT_ShowRowChangeEvent(CType(e.Row,SuperDivCT_ShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSuperDivCT_ShowRow(ByVal row As SuperDivCT_ShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SuperDivCT_ShowRow
        Inherits DataRow
        
        Private tableSuperDivCT_Show As SuperDivCT_ShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSuperDivCT_Show = CType(Me.Table,SuperDivCT_ShowDataTable)
        End Sub
        
        Public Property rowid As Integer
            Get
                Return CType(Me(Me.tableSuperDivCT_Show.rowidColumn),Integer)
            End Get
            Set
                Me(Me.tableSuperDivCT_Show.rowidColumn) = value
            End Set
        End Property
        
        Public Property Supervisor As String
            Get
                Try 
                    Return CType(Me(Me.tableSuperDivCT_Show.SupervisorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSuperDivCT_Show.SupervisorColumn) = value
            End Set
        End Property
        
        Public Property Division As String
            Get
                Try 
                    Return CType(Me(Me.tableSuperDivCT_Show.DivisionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSuperDivCT_Show.DivisionColumn) = value
            End Set
        End Property
        
        Public Property StartDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableSuperDivCT_Show.StartDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSuperDivCT_Show.StartDateColumn) = value
            End Set
        End Property
        
        Public Property EndDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableSuperDivCT_Show.EndDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSuperDivCT_Show.EndDateColumn) = value
            End Set
        End Property
        
        Public Property CreateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableSuperDivCT_Show.CreateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSuperDivCT_Show.CreateDateColumn) = value
            End Set
        End Property
        
        Public Property UpdateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableSuperDivCT_Show.UpdateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSuperDivCT_Show.UpdateDateColumn) = value
            End Set
        End Property
        
        Public Function IsSupervisorNull() As Boolean
            Return Me.IsNull(Me.tableSuperDivCT_Show.SupervisorColumn)
        End Function
        
        Public Sub SetSupervisorNull()
            Me(Me.tableSuperDivCT_Show.SupervisorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDivisionNull() As Boolean
            Return Me.IsNull(Me.tableSuperDivCT_Show.DivisionColumn)
        End Function
        
        Public Sub SetDivisionNull()
            Me(Me.tableSuperDivCT_Show.DivisionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStartDateNull() As Boolean
            Return Me.IsNull(Me.tableSuperDivCT_Show.StartDateColumn)
        End Function
        
        Public Sub SetStartDateNull()
            Me(Me.tableSuperDivCT_Show.StartDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEndDateNull() As Boolean
            Return Me.IsNull(Me.tableSuperDivCT_Show.EndDateColumn)
        End Function
        
        Public Sub SetEndDateNull()
            Me(Me.tableSuperDivCT_Show.EndDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreateDateNull() As Boolean
            Return Me.IsNull(Me.tableSuperDivCT_Show.CreateDateColumn)
        End Function
        
        Public Sub SetCreateDateNull()
            Me(Me.tableSuperDivCT_Show.CreateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUpdateDateNull() As Boolean
            Return Me.IsNull(Me.tableSuperDivCT_Show.UpdateDateColumn)
        End Function
        
        Public Sub SetUpdateDateNull()
            Me(Me.tableSuperDivCT_Show.UpdateDateColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SuperDivCT_ShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SuperDivCT_ShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SuperDivCT_ShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SuperDivCT_ShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Supervisor_ComboDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSupervisor As DataColumn
        
        Friend Sub New()
            MyBase.New("Supervisor_Combo")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SupervisorColumn As DataColumn
            Get
                Return Me.columnSupervisor
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Supervisor_ComboRow
            Get
                Return CType(Me.Rows(index),Supervisor_ComboRow)
            End Get
        End Property
        
        Public Event Supervisor_ComboRowChanged As Supervisor_ComboRowChangeEventHandler
        
        Public Event Supervisor_ComboRowChanging As Supervisor_ComboRowChangeEventHandler
        
        Public Event Supervisor_ComboRowDeleted As Supervisor_ComboRowChangeEventHandler
        
        Public Event Supervisor_ComboRowDeleting As Supervisor_ComboRowChangeEventHandler
        
        Public Overloads Sub AddSupervisor_ComboRow(ByVal row As Supervisor_ComboRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSupervisor_ComboRow(ByVal Supervisor As String) As Supervisor_ComboRow
            Dim rowSupervisor_ComboRow As Supervisor_ComboRow = CType(Me.NewRow,Supervisor_ComboRow)
            rowSupervisor_ComboRow.ItemArray = New Object() {Supervisor}
            Me.Rows.Add(rowSupervisor_ComboRow)
            Return rowSupervisor_ComboRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Supervisor_ComboDataTable = CType(MyBase.Clone,Supervisor_ComboDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Supervisor_ComboDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSupervisor = Me.Columns("Supervisor")
        End Sub
        
        Private Sub InitClass()
            Me.columnSupervisor = New DataColumn("Supervisor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSupervisor)
            Me.columnSupervisor.ReadOnly = true
        End Sub
        
        Public Function NewSupervisor_ComboRow() As Supervisor_ComboRow
            Return CType(Me.NewRow,Supervisor_ComboRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Supervisor_ComboRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Supervisor_ComboRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Supervisor_ComboRowChangedEvent) Is Nothing) Then
                RaiseEvent Supervisor_ComboRowChanged(Me, New Supervisor_ComboRowChangeEvent(CType(e.Row,Supervisor_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Supervisor_ComboRowChangingEvent) Is Nothing) Then
                RaiseEvent Supervisor_ComboRowChanging(Me, New Supervisor_ComboRowChangeEvent(CType(e.Row,Supervisor_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Supervisor_ComboRowDeletedEvent) Is Nothing) Then
                RaiseEvent Supervisor_ComboRowDeleted(Me, New Supervisor_ComboRowChangeEvent(CType(e.Row,Supervisor_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Supervisor_ComboRowDeletingEvent) Is Nothing) Then
                RaiseEvent Supervisor_ComboRowDeleting(Me, New Supervisor_ComboRowChangeEvent(CType(e.Row,Supervisor_ComboRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSupervisor_ComboRow(ByVal row As Supervisor_ComboRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Supervisor_ComboRow
        Inherits DataRow
        
        Private tableSupervisor_Combo As Supervisor_ComboDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSupervisor_Combo = CType(Me.Table,Supervisor_ComboDataTable)
        End Sub
        
        Public Property Supervisor As String
            Get
                Try 
                    Return CType(Me(Me.tableSupervisor_Combo.SupervisorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSupervisor_Combo.SupervisorColumn) = value
            End Set
        End Property
        
        Public Function IsSupervisorNull() As Boolean
            Return Me.IsNull(Me.tableSupervisor_Combo.SupervisorColumn)
        End Function
        
        Public Sub SetSupervisorNull()
            Me(Me.tableSupervisor_Combo.SupervisorColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Supervisor_ComboRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Supervisor_ComboRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Supervisor_ComboRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Supervisor_ComboRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CallRateTransCT_ShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnrowid As DataColumn
        
        Private columnMedrep As DataColumn
        
        Private columnCallRate As DataColumn
        
        Private columnTarget As DataColumn
        
        Private columnSupervisor As DataColumn
        
        Private columnNSM As DataColumn
        
        Private columnDivision As DataColumn
        
        Private columnCommissionDate As DataColumn
        
        Private columnCreateDate As DataColumn
        
        Private columnUpdateDate As DataColumn
        
        Friend Sub New()
            MyBase.New("CallRateTransCT_Show")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property rowidColumn As DataColumn
            Get
                Return Me.columnrowid
            End Get
        End Property
        
        Friend ReadOnly Property MedrepColumn As DataColumn
            Get
                Return Me.columnMedrep
            End Get
        End Property
        
        Friend ReadOnly Property CallRateColumn As DataColumn
            Get
                Return Me.columnCallRate
            End Get
        End Property
        
        Friend ReadOnly Property TargetColumn As DataColumn
            Get
                Return Me.columnTarget
            End Get
        End Property
        
        Friend ReadOnly Property SupervisorColumn As DataColumn
            Get
                Return Me.columnSupervisor
            End Get
        End Property
        
        Friend ReadOnly Property NSMColumn As DataColumn
            Get
                Return Me.columnNSM
            End Get
        End Property
        
        Friend ReadOnly Property DivisionColumn As DataColumn
            Get
                Return Me.columnDivision
            End Get
        End Property
        
        Friend ReadOnly Property CommissionDateColumn As DataColumn
            Get
                Return Me.columnCommissionDate
            End Get
        End Property
        
        Friend ReadOnly Property CreateDateColumn As DataColumn
            Get
                Return Me.columnCreateDate
            End Get
        End Property
        
        Friend ReadOnly Property UpdateDateColumn As DataColumn
            Get
                Return Me.columnUpdateDate
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CallRateTransCT_ShowRow
            Get
                Return CType(Me.Rows(index),CallRateTransCT_ShowRow)
            End Get
        End Property
        
        Public Event CallRateTransCT_ShowRowChanged As CallRateTransCT_ShowRowChangeEventHandler
        
        Public Event CallRateTransCT_ShowRowChanging As CallRateTransCT_ShowRowChangeEventHandler
        
        Public Event CallRateTransCT_ShowRowDeleted As CallRateTransCT_ShowRowChangeEventHandler
        
        Public Event CallRateTransCT_ShowRowDeleting As CallRateTransCT_ShowRowChangeEventHandler
        
        Public Overloads Sub AddCallRateTransCT_ShowRow(ByVal row As CallRateTransCT_ShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCallRateTransCT_ShowRow(ByVal Medrep As String, ByVal CallRate As Integer, ByVal Target As Decimal, ByVal Supervisor As String, ByVal NSM As String, ByVal Division As String, ByVal CommissionDate As Date, ByVal CreateDate As Date, ByVal UpdateDate As Date) As CallRateTransCT_ShowRow
            Dim rowCallRateTransCT_ShowRow As CallRateTransCT_ShowRow = CType(Me.NewRow,CallRateTransCT_ShowRow)
            rowCallRateTransCT_ShowRow.ItemArray = New Object() {Nothing, Medrep, CallRate, Target, Supervisor, NSM, Division, CommissionDate, CreateDate, UpdateDate}
            Me.Rows.Add(rowCallRateTransCT_ShowRow)
            Return rowCallRateTransCT_ShowRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CallRateTransCT_ShowDataTable = CType(MyBase.Clone,CallRateTransCT_ShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CallRateTransCT_ShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnrowid = Me.Columns("rowid")
            Me.columnMedrep = Me.Columns("Medrep")
            Me.columnCallRate = Me.Columns("CallRate")
            Me.columnTarget = Me.Columns("Target")
            Me.columnSupervisor = Me.Columns("Supervisor")
            Me.columnNSM = Me.Columns("NSM")
            Me.columnDivision = Me.Columns("Division")
            Me.columnCommissionDate = Me.Columns("CommissionDate")
            Me.columnCreateDate = Me.Columns("CreateDate")
            Me.columnUpdateDate = Me.Columns("UpdateDate")
        End Sub
        
        Private Sub InitClass()
            Me.columnrowid = New DataColumn("rowid", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrowid)
            Me.columnMedrep = New DataColumn("Medrep", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMedrep)
            Me.columnCallRate = New DataColumn("CallRate", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCallRate)
            Me.columnTarget = New DataColumn("Target", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTarget)
            Me.columnSupervisor = New DataColumn("Supervisor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSupervisor)
            Me.columnNSM = New DataColumn("NSM", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNSM)
            Me.columnDivision = New DataColumn("Division", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDivision)
            Me.columnCommissionDate = New DataColumn("CommissionDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCommissionDate)
            Me.columnCreateDate = New DataColumn("CreateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreateDate)
            Me.columnUpdateDate = New DataColumn("UpdateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUpdateDate)
            Me.columnrowid.AutoIncrement = true
            Me.columnrowid.AllowDBNull = false
            Me.columnrowid.ReadOnly = true
            Me.columnMedrep.ReadOnly = true
            Me.columnSupervisor.ReadOnly = true
            Me.columnNSM.ReadOnly = true
            Me.columnDivision.ReadOnly = true
        End Sub
        
        Public Function NewCallRateTransCT_ShowRow() As CallRateTransCT_ShowRow
            Return CType(Me.NewRow,CallRateTransCT_ShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CallRateTransCT_ShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CallRateTransCT_ShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CallRateTransCT_ShowRowChangedEvent) Is Nothing) Then
                RaiseEvent CallRateTransCT_ShowRowChanged(Me, New CallRateTransCT_ShowRowChangeEvent(CType(e.Row,CallRateTransCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CallRateTransCT_ShowRowChangingEvent) Is Nothing) Then
                RaiseEvent CallRateTransCT_ShowRowChanging(Me, New CallRateTransCT_ShowRowChangeEvent(CType(e.Row,CallRateTransCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CallRateTransCT_ShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent CallRateTransCT_ShowRowDeleted(Me, New CallRateTransCT_ShowRowChangeEvent(CType(e.Row,CallRateTransCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CallRateTransCT_ShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent CallRateTransCT_ShowRowDeleting(Me, New CallRateTransCT_ShowRowChangeEvent(CType(e.Row,CallRateTransCT_ShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCallRateTransCT_ShowRow(ByVal row As CallRateTransCT_ShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CallRateTransCT_ShowRow
        Inherits DataRow
        
        Private tableCallRateTransCT_Show As CallRateTransCT_ShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCallRateTransCT_Show = CType(Me.Table,CallRateTransCT_ShowDataTable)
        End Sub
        
        Public Property rowid As Decimal
            Get
                Return CType(Me(Me.tableCallRateTransCT_Show.rowidColumn),Decimal)
            End Get
            Set
                Me(Me.tableCallRateTransCT_Show.rowidColumn) = value
            End Set
        End Property
        
        Public Property Medrep As String
            Get
                Try 
                    Return CType(Me(Me.tableCallRateTransCT_Show.MedrepColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCallRateTransCT_Show.MedrepColumn) = value
            End Set
        End Property
        
        Public Property CallRate As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCallRateTransCT_Show.CallRateColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCallRateTransCT_Show.CallRateColumn) = value
            End Set
        End Property
        
        Public Property Target As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCallRateTransCT_Show.TargetColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCallRateTransCT_Show.TargetColumn) = value
            End Set
        End Property
        
        Public Property Supervisor As String
            Get
                Try 
                    Return CType(Me(Me.tableCallRateTransCT_Show.SupervisorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCallRateTransCT_Show.SupervisorColumn) = value
            End Set
        End Property
        
        Public Property NSM As String
            Get
                Try 
                    Return CType(Me(Me.tableCallRateTransCT_Show.NSMColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCallRateTransCT_Show.NSMColumn) = value
            End Set
        End Property
        
        Public Property Division As String
            Get
                Try 
                    Return CType(Me(Me.tableCallRateTransCT_Show.DivisionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCallRateTransCT_Show.DivisionColumn) = value
            End Set
        End Property
        
        Public Property CommissionDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableCallRateTransCT_Show.CommissionDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCallRateTransCT_Show.CommissionDateColumn) = value
            End Set
        End Property
        
        Public Property CreateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableCallRateTransCT_Show.CreateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCallRateTransCT_Show.CreateDateColumn) = value
            End Set
        End Property
        
        Public Property UpdateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableCallRateTransCT_Show.UpdateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCallRateTransCT_Show.UpdateDateColumn) = value
            End Set
        End Property
        
        Public Function IsMedrepNull() As Boolean
            Return Me.IsNull(Me.tableCallRateTransCT_Show.MedrepColumn)
        End Function
        
        Public Sub SetMedrepNull()
            Me(Me.tableCallRateTransCT_Show.MedrepColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCallRateNull() As Boolean
            Return Me.IsNull(Me.tableCallRateTransCT_Show.CallRateColumn)
        End Function
        
        Public Sub SetCallRateNull()
            Me(Me.tableCallRateTransCT_Show.CallRateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTargetNull() As Boolean
            Return Me.IsNull(Me.tableCallRateTransCT_Show.TargetColumn)
        End Function
        
        Public Sub SetTargetNull()
            Me(Me.tableCallRateTransCT_Show.TargetColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSupervisorNull() As Boolean
            Return Me.IsNull(Me.tableCallRateTransCT_Show.SupervisorColumn)
        End Function
        
        Public Sub SetSupervisorNull()
            Me(Me.tableCallRateTransCT_Show.SupervisorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNSMNull() As Boolean
            Return Me.IsNull(Me.tableCallRateTransCT_Show.NSMColumn)
        End Function
        
        Public Sub SetNSMNull()
            Me(Me.tableCallRateTransCT_Show.NSMColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDivisionNull() As Boolean
            Return Me.IsNull(Me.tableCallRateTransCT_Show.DivisionColumn)
        End Function
        
        Public Sub SetDivisionNull()
            Me(Me.tableCallRateTransCT_Show.DivisionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCommissionDateNull() As Boolean
            Return Me.IsNull(Me.tableCallRateTransCT_Show.CommissionDateColumn)
        End Function
        
        Public Sub SetCommissionDateNull()
            Me(Me.tableCallRateTransCT_Show.CommissionDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreateDateNull() As Boolean
            Return Me.IsNull(Me.tableCallRateTransCT_Show.CreateDateColumn)
        End Function
        
        Public Sub SetCreateDateNull()
            Me(Me.tableCallRateTransCT_Show.CreateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUpdateDateNull() As Boolean
            Return Me.IsNull(Me.tableCallRateTransCT_Show.UpdateDateColumn)
        End Function
        
        Public Sub SetUpdateDateNull()
            Me(Me.tableCallRateTransCT_Show.UpdateDateColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CallRateTransCT_ShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CallRateTransCT_ShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CallRateTransCT_ShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CallRateTransCT_ShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QpiTerritoryBudgetCT_ShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnrowid As DataColumn
        
        Private columnTerritory As DataColumn
        
        Private columnamount As DataColumn
        
        Private columnqty As DataColumn
        
        Private column_Item As DataColumn
        
        Private columnMedrep As DataColumn
        
        Private columncreatedate As DataColumn
        
        Private columnupdatedate As DataColumn
        
        Private columnstartdate As DataColumn
        
        Private columnenddate As DataColumn
        
        Friend Sub New()
            MyBase.New("QpiTerritoryBudgetCT_Show")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property rowidColumn As DataColumn
            Get
                Return Me.columnrowid
            End Get
        End Property
        
        Friend ReadOnly Property TerritoryColumn As DataColumn
            Get
                Return Me.columnTerritory
            End Get
        End Property
        
        Friend ReadOnly Property amountColumn As DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        Friend ReadOnly Property qtyColumn As DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        Friend ReadOnly Property _ItemColumn As DataColumn
            Get
                Return Me.column_Item
            End Get
        End Property
        
        Friend ReadOnly Property MedrepColumn As DataColumn
            Get
                Return Me.columnMedrep
            End Get
        End Property
        
        Friend ReadOnly Property createdateColumn As DataColumn
            Get
                Return Me.columncreatedate
            End Get
        End Property
        
        Friend ReadOnly Property updatedateColumn As DataColumn
            Get
                Return Me.columnupdatedate
            End Get
        End Property
        
        Friend ReadOnly Property startdateColumn As DataColumn
            Get
                Return Me.columnstartdate
            End Get
        End Property
        
        Friend ReadOnly Property enddateColumn As DataColumn
            Get
                Return Me.columnenddate
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As QpiTerritoryBudgetCT_ShowRow
            Get
                Return CType(Me.Rows(index),QpiTerritoryBudgetCT_ShowRow)
            End Get
        End Property
        
        Public Event QpiTerritoryBudgetCT_ShowRowChanged As QpiTerritoryBudgetCT_ShowRowChangeEventHandler
        
        Public Event QpiTerritoryBudgetCT_ShowRowChanging As QpiTerritoryBudgetCT_ShowRowChangeEventHandler
        
        Public Event QpiTerritoryBudgetCT_ShowRowDeleted As QpiTerritoryBudgetCT_ShowRowChangeEventHandler
        
        Public Event QpiTerritoryBudgetCT_ShowRowDeleting As QpiTerritoryBudgetCT_ShowRowChangeEventHandler
        
        Public Overloads Sub AddQpiTerritoryBudgetCT_ShowRow(ByVal row As QpiTerritoryBudgetCT_ShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddQpiTerritoryBudgetCT_ShowRow(ByVal Territory As String, ByVal amount As Decimal, ByVal qty As Integer, ByVal _Item As String, ByVal Medrep As String, ByVal createdate As Date, ByVal updatedate As Date, ByVal startdate As Date, ByVal enddate As Date) As QpiTerritoryBudgetCT_ShowRow
            Dim rowQpiTerritoryBudgetCT_ShowRow As QpiTerritoryBudgetCT_ShowRow = CType(Me.NewRow,QpiTerritoryBudgetCT_ShowRow)
            rowQpiTerritoryBudgetCT_ShowRow.ItemArray = New Object() {Nothing, Territory, amount, qty, _Item, Medrep, createdate, updatedate, startdate, enddate}
            Me.Rows.Add(rowQpiTerritoryBudgetCT_ShowRow)
            Return rowQpiTerritoryBudgetCT_ShowRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As QpiTerritoryBudgetCT_ShowDataTable = CType(MyBase.Clone,QpiTerritoryBudgetCT_ShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New QpiTerritoryBudgetCT_ShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnrowid = Me.Columns("rowid")
            Me.columnTerritory = Me.Columns("Territory")
            Me.columnamount = Me.Columns("amount")
            Me.columnqty = Me.Columns("qty")
            Me.column_Item = Me.Columns("Item")
            Me.columnMedrep = Me.Columns("Medrep")
            Me.columncreatedate = Me.Columns("createdate")
            Me.columnupdatedate = Me.Columns("updatedate")
            Me.columnstartdate = Me.Columns("startdate")
            Me.columnenddate = Me.Columns("enddate")
        End Sub
        
        Private Sub InitClass()
            Me.columnrowid = New DataColumn("rowid", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrowid)
            Me.columnTerritory = New DataColumn("Territory", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTerritory)
            Me.columnamount = New DataColumn("amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount)
            Me.columnqty = New DataColumn("qty", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnqty)
            Me.column_Item = New DataColumn("Item", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_Item)
            Me.columnMedrep = New DataColumn("Medrep", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMedrep)
            Me.columncreatedate = New DataColumn("createdate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncreatedate)
            Me.columnupdatedate = New DataColumn("updatedate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnupdatedate)
            Me.columnstartdate = New DataColumn("startdate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstartdate)
            Me.columnenddate = New DataColumn("enddate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnenddate)
            Me.columnrowid.AutoIncrement = true
            Me.columnrowid.AllowDBNull = false
            Me.columnrowid.ReadOnly = true
            Me.columnTerritory.ReadOnly = true
            Me.column_Item.ReadOnly = true
            Me.columnMedrep.ReadOnly = true
        End Sub
        
        Public Function NewQpiTerritoryBudgetCT_ShowRow() As QpiTerritoryBudgetCT_ShowRow
            Return CType(Me.NewRow,QpiTerritoryBudgetCT_ShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New QpiTerritoryBudgetCT_ShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(QpiTerritoryBudgetCT_ShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.QpiTerritoryBudgetCT_ShowRowChangedEvent) Is Nothing) Then
                RaiseEvent QpiTerritoryBudgetCT_ShowRowChanged(Me, New QpiTerritoryBudgetCT_ShowRowChangeEvent(CType(e.Row,QpiTerritoryBudgetCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.QpiTerritoryBudgetCT_ShowRowChangingEvent) Is Nothing) Then
                RaiseEvent QpiTerritoryBudgetCT_ShowRowChanging(Me, New QpiTerritoryBudgetCT_ShowRowChangeEvent(CType(e.Row,QpiTerritoryBudgetCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.QpiTerritoryBudgetCT_ShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent QpiTerritoryBudgetCT_ShowRowDeleted(Me, New QpiTerritoryBudgetCT_ShowRowChangeEvent(CType(e.Row,QpiTerritoryBudgetCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.QpiTerritoryBudgetCT_ShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent QpiTerritoryBudgetCT_ShowRowDeleting(Me, New QpiTerritoryBudgetCT_ShowRowChangeEvent(CType(e.Row,QpiTerritoryBudgetCT_ShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveQpiTerritoryBudgetCT_ShowRow(ByVal row As QpiTerritoryBudgetCT_ShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QpiTerritoryBudgetCT_ShowRow
        Inherits DataRow
        
        Private tableQpiTerritoryBudgetCT_Show As QpiTerritoryBudgetCT_ShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableQpiTerritoryBudgetCT_Show = CType(Me.Table,QpiTerritoryBudgetCT_ShowDataTable)
        End Sub
        
        Public Property rowid As Integer
            Get
                Return CType(Me(Me.tableQpiTerritoryBudgetCT_Show.rowidColumn),Integer)
            End Get
            Set
                Me(Me.tableQpiTerritoryBudgetCT_Show.rowidColumn) = value
            End Set
        End Property
        
        Public Property Territory As String
            Get
                Try 
                    Return CType(Me(Me.tableQpiTerritoryBudgetCT_Show.TerritoryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQpiTerritoryBudgetCT_Show.TerritoryColumn) = value
            End Set
        End Property
        
        Public Property amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableQpiTerritoryBudgetCT_Show.amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQpiTerritoryBudgetCT_Show.amountColumn) = value
            End Set
        End Property
        
        Public Property qty As Integer
            Get
                Try 
                    Return CType(Me(Me.tableQpiTerritoryBudgetCT_Show.qtyColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQpiTerritoryBudgetCT_Show.qtyColumn) = value
            End Set
        End Property
        
        Public Property _Item As String
            Get
                Try 
                    Return CType(Me(Me.tableQpiTerritoryBudgetCT_Show._ItemColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQpiTerritoryBudgetCT_Show._ItemColumn) = value
            End Set
        End Property
        
        Public Property Medrep As String
            Get
                Try 
                    Return CType(Me(Me.tableQpiTerritoryBudgetCT_Show.MedrepColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQpiTerritoryBudgetCT_Show.MedrepColumn) = value
            End Set
        End Property
        
        Public Property createdate As Date
            Get
                Try 
                    Return CType(Me(Me.tableQpiTerritoryBudgetCT_Show.createdateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQpiTerritoryBudgetCT_Show.createdateColumn) = value
            End Set
        End Property
        
        Public Property updatedate As Date
            Get
                Try 
                    Return CType(Me(Me.tableQpiTerritoryBudgetCT_Show.updatedateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQpiTerritoryBudgetCT_Show.updatedateColumn) = value
            End Set
        End Property
        
        Public Property startdate As Date
            Get
                Try 
                    Return CType(Me(Me.tableQpiTerritoryBudgetCT_Show.startdateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQpiTerritoryBudgetCT_Show.startdateColumn) = value
            End Set
        End Property
        
        Public Property enddate As Date
            Get
                Try 
                    Return CType(Me(Me.tableQpiTerritoryBudgetCT_Show.enddateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQpiTerritoryBudgetCT_Show.enddateColumn) = value
            End Set
        End Property
        
        Public Function IsTerritoryNull() As Boolean
            Return Me.IsNull(Me.tableQpiTerritoryBudgetCT_Show.TerritoryColumn)
        End Function
        
        Public Sub SetTerritoryNull()
            Me(Me.tableQpiTerritoryBudgetCT_Show.TerritoryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsamountNull() As Boolean
            Return Me.IsNull(Me.tableQpiTerritoryBudgetCT_Show.amountColumn)
        End Function
        
        Public Sub SetamountNull()
            Me(Me.tableQpiTerritoryBudgetCT_Show.amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsqtyNull() As Boolean
            Return Me.IsNull(Me.tableQpiTerritoryBudgetCT_Show.qtyColumn)
        End Function
        
        Public Sub SetqtyNull()
            Me(Me.tableQpiTerritoryBudgetCT_Show.qtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Is_ItemNull() As Boolean
            Return Me.IsNull(Me.tableQpiTerritoryBudgetCT_Show._ItemColumn)
        End Function
        
        Public Sub Set_ItemNull()
            Me(Me.tableQpiTerritoryBudgetCT_Show._ItemColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMedrepNull() As Boolean
            Return Me.IsNull(Me.tableQpiTerritoryBudgetCT_Show.MedrepColumn)
        End Function
        
        Public Sub SetMedrepNull()
            Me(Me.tableQpiTerritoryBudgetCT_Show.MedrepColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscreatedateNull() As Boolean
            Return Me.IsNull(Me.tableQpiTerritoryBudgetCT_Show.createdateColumn)
        End Function
        
        Public Sub SetcreatedateNull()
            Me(Me.tableQpiTerritoryBudgetCT_Show.createdateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsupdatedateNull() As Boolean
            Return Me.IsNull(Me.tableQpiTerritoryBudgetCT_Show.updatedateColumn)
        End Function
        
        Public Sub SetupdatedateNull()
            Me(Me.tableQpiTerritoryBudgetCT_Show.updatedateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsstartdateNull() As Boolean
            Return Me.IsNull(Me.tableQpiTerritoryBudgetCT_Show.startdateColumn)
        End Function
        
        Public Sub SetstartdateNull()
            Me(Me.tableQpiTerritoryBudgetCT_Show.startdateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsenddateNull() As Boolean
            Return Me.IsNull(Me.tableQpiTerritoryBudgetCT_Show.enddateColumn)
        End Function
        
        Public Sub SetenddateNull()
            Me(Me.tableQpiTerritoryBudgetCT_Show.enddateColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QpiTerritoryBudgetCT_ShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As QpiTerritoryBudgetCT_ShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As QpiTerritoryBudgetCT_ShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As QpiTerritoryBudgetCT_ShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DSm_ComboDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnDsm As DataColumn
        
        Private columnDsmName As DataColumn
        
        Friend Sub New()
            MyBase.New("DSm_Combo")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property DsmColumn As DataColumn
            Get
                Return Me.columnDsm
            End Get
        End Property
        
        Friend ReadOnly Property DsmNameColumn As DataColumn
            Get
                Return Me.columnDsmName
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As DSm_ComboRow
            Get
                Return CType(Me.Rows(index),DSm_ComboRow)
            End Get
        End Property
        
        Public Event DSm_ComboRowChanged As DSm_ComboRowChangeEventHandler
        
        Public Event DSm_ComboRowChanging As DSm_ComboRowChangeEventHandler
        
        Public Event DSm_ComboRowDeleted As DSm_ComboRowChangeEventHandler
        
        Public Event DSm_ComboRowDeleting As DSm_ComboRowChangeEventHandler
        
        Public Overloads Sub AddDSm_ComboRow(ByVal row As DSm_ComboRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDSm_ComboRow(ByVal Dsm As String, ByVal DsmName As String) As DSm_ComboRow
            Dim rowDSm_ComboRow As DSm_ComboRow = CType(Me.NewRow,DSm_ComboRow)
            rowDSm_ComboRow.ItemArray = New Object() {Dsm, DsmName}
            Me.Rows.Add(rowDSm_ComboRow)
            Return rowDSm_ComboRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As DSm_ComboDataTable = CType(MyBase.Clone,DSm_ComboDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New DSm_ComboDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnDsm = Me.Columns("Dsm")
            Me.columnDsmName = Me.Columns("DsmName")
        End Sub
        
        Private Sub InitClass()
            Me.columnDsm = New DataColumn("Dsm", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDsm)
            Me.columnDsmName = New DataColumn("DsmName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDsmName)
            Me.columnDsm.ReadOnly = true
            Me.columnDsmName.ReadOnly = true
        End Sub
        
        Public Function NewDSm_ComboRow() As DSm_ComboRow
            Return CType(Me.NewRow,DSm_ComboRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New DSm_ComboRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DSm_ComboRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DSm_ComboRowChangedEvent) Is Nothing) Then
                RaiseEvent DSm_ComboRowChanged(Me, New DSm_ComboRowChangeEvent(CType(e.Row,DSm_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DSm_ComboRowChangingEvent) Is Nothing) Then
                RaiseEvent DSm_ComboRowChanging(Me, New DSm_ComboRowChangeEvent(CType(e.Row,DSm_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DSm_ComboRowDeletedEvent) Is Nothing) Then
                RaiseEvent DSm_ComboRowDeleted(Me, New DSm_ComboRowChangeEvent(CType(e.Row,DSm_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DSm_ComboRowDeletingEvent) Is Nothing) Then
                RaiseEvent DSm_ComboRowDeleting(Me, New DSm_ComboRowChangeEvent(CType(e.Row,DSm_ComboRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDSm_ComboRow(ByVal row As DSm_ComboRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DSm_ComboRow
        Inherits DataRow
        
        Private tableDSm_Combo As DSm_ComboDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDSm_Combo = CType(Me.Table,DSm_ComboDataTable)
        End Sub
        
        Public Property Dsm As String
            Get
                Try 
                    Return CType(Me(Me.tableDSm_Combo.DsmColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSm_Combo.DsmColumn) = value
            End Set
        End Property
        
        Public Property DsmName As String
            Get
                Try 
                    Return CType(Me(Me.tableDSm_Combo.DsmNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSm_Combo.DsmNameColumn) = value
            End Set
        End Property
        
        Public Function IsDsmNull() As Boolean
            Return Me.IsNull(Me.tableDSm_Combo.DsmColumn)
        End Function
        
        Public Sub SetDsmNull()
            Me(Me.tableDSm_Combo.DsmColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDsmNameNull() As Boolean
            Return Me.IsNull(Me.tableDSm_Combo.DsmNameColumn)
        End Function
        
        Public Sub SetDsmNameNull()
            Me(Me.tableDSm_Combo.DsmNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DSm_ComboRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As DSm_ComboRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As DSm_ComboRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As DSm_ComboRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NSM_ComboDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnNSMcode As DataColumn
        
        Friend Sub New()
            MyBase.New("NSM_Combo")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property NSMcodeColumn As DataColumn
            Get
                Return Me.columnNSMcode
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As NSM_ComboRow
            Get
                Return CType(Me.Rows(index),NSM_ComboRow)
            End Get
        End Property
        
        Public Event NSM_ComboRowChanged As NSM_ComboRowChangeEventHandler
        
        Public Event NSM_ComboRowChanging As NSM_ComboRowChangeEventHandler
        
        Public Event NSM_ComboRowDeleted As NSM_ComboRowChangeEventHandler
        
        Public Event NSM_ComboRowDeleting As NSM_ComboRowChangeEventHandler
        
        Public Overloads Sub AddNSM_ComboRow(ByVal row As NSM_ComboRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddNSM_ComboRow(ByVal NSMcode As String) As NSM_ComboRow
            Dim rowNSM_ComboRow As NSM_ComboRow = CType(Me.NewRow,NSM_ComboRow)
            rowNSM_ComboRow.ItemArray = New Object() {NSMcode}
            Me.Rows.Add(rowNSM_ComboRow)
            Return rowNSM_ComboRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As NSM_ComboDataTable = CType(MyBase.Clone,NSM_ComboDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New NSM_ComboDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnNSMcode = Me.Columns("NSMcode")
        End Sub
        
        Private Sub InitClass()
            Me.columnNSMcode = New DataColumn("NSMcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNSMcode)
            Me.columnNSMcode.ReadOnly = true
        End Sub
        
        Public Function NewNSM_ComboRow() As NSM_ComboRow
            Return CType(Me.NewRow,NSM_ComboRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New NSM_ComboRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(NSM_ComboRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NSM_ComboRowChangedEvent) Is Nothing) Then
                RaiseEvent NSM_ComboRowChanged(Me, New NSM_ComboRowChangeEvent(CType(e.Row,NSM_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NSM_ComboRowChangingEvent) Is Nothing) Then
                RaiseEvent NSM_ComboRowChanging(Me, New NSM_ComboRowChangeEvent(CType(e.Row,NSM_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NSM_ComboRowDeletedEvent) Is Nothing) Then
                RaiseEvent NSM_ComboRowDeleted(Me, New NSM_ComboRowChangeEvent(CType(e.Row,NSM_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NSM_ComboRowDeletingEvent) Is Nothing) Then
                RaiseEvent NSM_ComboRowDeleting(Me, New NSM_ComboRowChangeEvent(CType(e.Row,NSM_ComboRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveNSM_ComboRow(ByVal row As NSM_ComboRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NSM_ComboRow
        Inherits DataRow
        
        Private tableNSM_Combo As NSM_ComboDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableNSM_Combo = CType(Me.Table,NSM_ComboDataTable)
        End Sub
        
        Public Property NSMcode As String
            Get
                Try 
                    Return CType(Me(Me.tableNSM_Combo.NSMcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNSM_Combo.NSMcodeColumn) = value
            End Set
        End Property
        
        Public Function IsNSMcodeNull() As Boolean
            Return Me.IsNull(Me.tableNSM_Combo.NSMcodeColumn)
        End Function
        
        Public Sub SetNSMcodeNull()
            Me(Me.tableNSM_Combo.NSMcodeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NSM_ComboRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As NSM_ComboRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As NSM_ComboRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As NSM_ComboRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Customer_ComboDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCustomer As DataColumn
        
        Private columncustname As DataColumn
        
        Friend Sub New()
            MyBase.New("Customer_Combo")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CustomerColumn As DataColumn
            Get
                Return Me.columnCustomer
            End Get
        End Property
        
        Friend ReadOnly Property custnameColumn As DataColumn
            Get
                Return Me.columncustname
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Customer_ComboRow
            Get
                Return CType(Me.Rows(index),Customer_ComboRow)
            End Get
        End Property
        
        Public Event Customer_ComboRowChanged As Customer_ComboRowChangeEventHandler
        
        Public Event Customer_ComboRowChanging As Customer_ComboRowChangeEventHandler
        
        Public Event Customer_ComboRowDeleted As Customer_ComboRowChangeEventHandler
        
        Public Event Customer_ComboRowDeleting As Customer_ComboRowChangeEventHandler
        
        Public Overloads Sub AddCustomer_ComboRow(ByVal row As Customer_ComboRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCustomer_ComboRow(ByVal Customer As String, ByVal custname As String) As Customer_ComboRow
            Dim rowCustomer_ComboRow As Customer_ComboRow = CType(Me.NewRow,Customer_ComboRow)
            rowCustomer_ComboRow.ItemArray = New Object() {Customer, custname}
            Me.Rows.Add(rowCustomer_ComboRow)
            Return rowCustomer_ComboRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Customer_ComboDataTable = CType(MyBase.Clone,Customer_ComboDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Customer_ComboDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCustomer = Me.Columns("Customer")
            Me.columncustname = Me.Columns("custname")
        End Sub
        
        Private Sub InitClass()
            Me.columnCustomer = New DataColumn("Customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCustomer)
            Me.columncustname = New DataColumn("custname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncustname)
            Me.columnCustomer.ReadOnly = true
            Me.columncustname.ReadOnly = true
        End Sub
        
        Public Function NewCustomer_ComboRow() As Customer_ComboRow
            Return CType(Me.NewRow,Customer_ComboRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Customer_ComboRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Customer_ComboRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Customer_ComboRowChangedEvent) Is Nothing) Then
                RaiseEvent Customer_ComboRowChanged(Me, New Customer_ComboRowChangeEvent(CType(e.Row,Customer_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Customer_ComboRowChangingEvent) Is Nothing) Then
                RaiseEvent Customer_ComboRowChanging(Me, New Customer_ComboRowChangeEvent(CType(e.Row,Customer_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Customer_ComboRowDeletedEvent) Is Nothing) Then
                RaiseEvent Customer_ComboRowDeleted(Me, New Customer_ComboRowChangeEvent(CType(e.Row,Customer_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Customer_ComboRowDeletingEvent) Is Nothing) Then
                RaiseEvent Customer_ComboRowDeleting(Me, New Customer_ComboRowChangeEvent(CType(e.Row,Customer_ComboRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCustomer_ComboRow(ByVal row As Customer_ComboRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Customer_ComboRow
        Inherits DataRow
        
        Private tableCustomer_Combo As Customer_ComboDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCustomer_Combo = CType(Me.Table,Customer_ComboDataTable)
        End Sub
        
        Public Property Customer As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomer_Combo.CustomerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomer_Combo.CustomerColumn) = value
            End Set
        End Property
        
        Public Property custname As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomer_Combo.custnameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomer_Combo.custnameColumn) = value
            End Set
        End Property
        
        Public Function IsCustomerNull() As Boolean
            Return Me.IsNull(Me.tableCustomer_Combo.CustomerColumn)
        End Function
        
        Public Sub SetCustomerNull()
            Me(Me.tableCustomer_Combo.CustomerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscustnameNull() As Boolean
            Return Me.IsNull(Me.tableCustomer_Combo.custnameColumn)
        End Function
        
        Public Sub SetcustnameNull()
            Me(Me.tableCustomer_Combo.custnameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Customer_ComboRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Customer_ComboRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Customer_ComboRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Customer_ComboRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CallRate_CalenderizedDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnNsm As DataColumn
        
        Private columnDsm As DataColumn
        
        Private columnMedrep As DataColumn
        
        Private columnCallRate As DataColumn
        
        Private columnTarget As DataColumn
        
        Private columnCommissionDate As DataColumn
        
        Friend Sub New()
            MyBase.New("CallRate_Calenderized")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property NsmColumn As DataColumn
            Get
                Return Me.columnNsm
            End Get
        End Property
        
        Friend ReadOnly Property DsmColumn As DataColumn
            Get
                Return Me.columnDsm
            End Get
        End Property
        
        Friend ReadOnly Property MedrepColumn As DataColumn
            Get
                Return Me.columnMedrep
            End Get
        End Property
        
        Friend ReadOnly Property CallRateColumn As DataColumn
            Get
                Return Me.columnCallRate
            End Get
        End Property
        
        Friend ReadOnly Property TargetColumn As DataColumn
            Get
                Return Me.columnTarget
            End Get
        End Property
        
        Friend ReadOnly Property CommissionDateColumn As DataColumn
            Get
                Return Me.columnCommissionDate
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CallRate_CalenderizedRow
            Get
                Return CType(Me.Rows(index),CallRate_CalenderizedRow)
            End Get
        End Property
        
        Public Event CallRate_CalenderizedRowChanged As CallRate_CalenderizedRowChangeEventHandler
        
        Public Event CallRate_CalenderizedRowChanging As CallRate_CalenderizedRowChangeEventHandler
        
        Public Event CallRate_CalenderizedRowDeleted As CallRate_CalenderizedRowChangeEventHandler
        
        Public Event CallRate_CalenderizedRowDeleting As CallRate_CalenderizedRowChangeEventHandler
        
        Public Overloads Sub AddCallRate_CalenderizedRow(ByVal row As CallRate_CalenderizedRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCallRate_CalenderizedRow(ByVal Nsm As String, ByVal Dsm As String, ByVal Medrep As String, ByVal CallRate As Integer, ByVal Target As Decimal, ByVal CommissionDate As Date) As CallRate_CalenderizedRow
            Dim rowCallRate_CalenderizedRow As CallRate_CalenderizedRow = CType(Me.NewRow,CallRate_CalenderizedRow)
            rowCallRate_CalenderizedRow.ItemArray = New Object() {Nsm, Dsm, Medrep, CallRate, Target, CommissionDate}
            Me.Rows.Add(rowCallRate_CalenderizedRow)
            Return rowCallRate_CalenderizedRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CallRate_CalenderizedDataTable = CType(MyBase.Clone,CallRate_CalenderizedDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CallRate_CalenderizedDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnNsm = Me.Columns("Nsm")
            Me.columnDsm = Me.Columns("Dsm")
            Me.columnMedrep = Me.Columns("Medrep")
            Me.columnCallRate = Me.Columns("CallRate")
            Me.columnTarget = Me.Columns("Target")
            Me.columnCommissionDate = Me.Columns("CommissionDate")
        End Sub
        
        Private Sub InitClass()
            Me.columnNsm = New DataColumn("Nsm", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNsm)
            Me.columnDsm = New DataColumn("Dsm", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDsm)
            Me.columnMedrep = New DataColumn("Medrep", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMedrep)
            Me.columnCallRate = New DataColumn("CallRate", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCallRate)
            Me.columnTarget = New DataColumn("Target", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTarget)
            Me.columnCommissionDate = New DataColumn("CommissionDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCommissionDate)
            Me.columnCallRate.ReadOnly = true
            Me.columnTarget.ReadOnly = true
        End Sub
        
        Public Function NewCallRate_CalenderizedRow() As CallRate_CalenderizedRow
            Return CType(Me.NewRow,CallRate_CalenderizedRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CallRate_CalenderizedRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CallRate_CalenderizedRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CallRate_CalenderizedRowChangedEvent) Is Nothing) Then
                RaiseEvent CallRate_CalenderizedRowChanged(Me, New CallRate_CalenderizedRowChangeEvent(CType(e.Row,CallRate_CalenderizedRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CallRate_CalenderizedRowChangingEvent) Is Nothing) Then
                RaiseEvent CallRate_CalenderizedRowChanging(Me, New CallRate_CalenderizedRowChangeEvent(CType(e.Row,CallRate_CalenderizedRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CallRate_CalenderizedRowDeletedEvent) Is Nothing) Then
                RaiseEvent CallRate_CalenderizedRowDeleted(Me, New CallRate_CalenderizedRowChangeEvent(CType(e.Row,CallRate_CalenderizedRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CallRate_CalenderizedRowDeletingEvent) Is Nothing) Then
                RaiseEvent CallRate_CalenderizedRowDeleting(Me, New CallRate_CalenderizedRowChangeEvent(CType(e.Row,CallRate_CalenderizedRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCallRate_CalenderizedRow(ByVal row As CallRate_CalenderizedRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CallRate_CalenderizedRow
        Inherits DataRow
        
        Private tableCallRate_Calenderized As CallRate_CalenderizedDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCallRate_Calenderized = CType(Me.Table,CallRate_CalenderizedDataTable)
        End Sub
        
        Public Property Nsm As String
            Get
                Try 
                    Return CType(Me(Me.tableCallRate_Calenderized.NsmColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCallRate_Calenderized.NsmColumn) = value
            End Set
        End Property
        
        Public Property Dsm As String
            Get
                Try 
                    Return CType(Me(Me.tableCallRate_Calenderized.DsmColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCallRate_Calenderized.DsmColumn) = value
            End Set
        End Property
        
        Public Property Medrep As String
            Get
                Try 
                    Return CType(Me(Me.tableCallRate_Calenderized.MedrepColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCallRate_Calenderized.MedrepColumn) = value
            End Set
        End Property
        
        Public Property CallRate As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCallRate_Calenderized.CallRateColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCallRate_Calenderized.CallRateColumn) = value
            End Set
        End Property
        
        Public Property Target As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCallRate_Calenderized.TargetColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCallRate_Calenderized.TargetColumn) = value
            End Set
        End Property
        
        Public Property CommissionDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableCallRate_Calenderized.CommissionDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCallRate_Calenderized.CommissionDateColumn) = value
            End Set
        End Property
        
        Public Function IsNsmNull() As Boolean
            Return Me.IsNull(Me.tableCallRate_Calenderized.NsmColumn)
        End Function
        
        Public Sub SetNsmNull()
            Me(Me.tableCallRate_Calenderized.NsmColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDsmNull() As Boolean
            Return Me.IsNull(Me.tableCallRate_Calenderized.DsmColumn)
        End Function
        
        Public Sub SetDsmNull()
            Me(Me.tableCallRate_Calenderized.DsmColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMedrepNull() As Boolean
            Return Me.IsNull(Me.tableCallRate_Calenderized.MedrepColumn)
        End Function
        
        Public Sub SetMedrepNull()
            Me(Me.tableCallRate_Calenderized.MedrepColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCallRateNull() As Boolean
            Return Me.IsNull(Me.tableCallRate_Calenderized.CallRateColumn)
        End Function
        
        Public Sub SetCallRateNull()
            Me(Me.tableCallRate_Calenderized.CallRateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTargetNull() As Boolean
            Return Me.IsNull(Me.tableCallRate_Calenderized.TargetColumn)
        End Function
        
        Public Sub SetTargetNull()
            Me(Me.tableCallRate_Calenderized.TargetColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCommissionDateNull() As Boolean
            Return Me.IsNull(Me.tableCallRate_Calenderized.CommissionDateColumn)
        End Function
        
        Public Sub SetCommissionDateNull()
            Me(Me.tableCallRate_Calenderized.CommissionDateColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CallRate_CalenderizedRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CallRate_CalenderizedRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CallRate_CalenderizedRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CallRate_CalenderizedRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CallRate_MonthlyDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnNsm As DataColumn
        
        Private columnDsm As DataColumn
        
        Private columnMedrep As DataColumn
        
        Private columnCallRate As DataColumn
        
        Private columnTarget As DataColumn
        
        Friend Sub New()
            MyBase.New("CallRate_Monthly")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property NsmColumn As DataColumn
            Get
                Return Me.columnNsm
            End Get
        End Property
        
        Friend ReadOnly Property DsmColumn As DataColumn
            Get
                Return Me.columnDsm
            End Get
        End Property
        
        Friend ReadOnly Property MedrepColumn As DataColumn
            Get
                Return Me.columnMedrep
            End Get
        End Property
        
        Friend ReadOnly Property CallRateColumn As DataColumn
            Get
                Return Me.columnCallRate
            End Get
        End Property
        
        Friend ReadOnly Property TargetColumn As DataColumn
            Get
                Return Me.columnTarget
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CallRate_MonthlyRow
            Get
                Return CType(Me.Rows(index),CallRate_MonthlyRow)
            End Get
        End Property
        
        Public Event CallRate_MonthlyRowChanged As CallRate_MonthlyRowChangeEventHandler
        
        Public Event CallRate_MonthlyRowChanging As CallRate_MonthlyRowChangeEventHandler
        
        Public Event CallRate_MonthlyRowDeleted As CallRate_MonthlyRowChangeEventHandler
        
        Public Event CallRate_MonthlyRowDeleting As CallRate_MonthlyRowChangeEventHandler
        
        Public Overloads Sub AddCallRate_MonthlyRow(ByVal row As CallRate_MonthlyRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCallRate_MonthlyRow(ByVal Nsm As String, ByVal Dsm As String, ByVal Medrep As String, ByVal CallRate As Integer, ByVal Target As Decimal) As CallRate_MonthlyRow
            Dim rowCallRate_MonthlyRow As CallRate_MonthlyRow = CType(Me.NewRow,CallRate_MonthlyRow)
            rowCallRate_MonthlyRow.ItemArray = New Object() {Nsm, Dsm, Medrep, CallRate, Target}
            Me.Rows.Add(rowCallRate_MonthlyRow)
            Return rowCallRate_MonthlyRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CallRate_MonthlyDataTable = CType(MyBase.Clone,CallRate_MonthlyDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CallRate_MonthlyDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnNsm = Me.Columns("Nsm")
            Me.columnDsm = Me.Columns("Dsm")
            Me.columnMedrep = Me.Columns("Medrep")
            Me.columnCallRate = Me.Columns("CallRate")
            Me.columnTarget = Me.Columns("Target")
        End Sub
        
        Private Sub InitClass()
            Me.columnNsm = New DataColumn("Nsm", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNsm)
            Me.columnDsm = New DataColumn("Dsm", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDsm)
            Me.columnMedrep = New DataColumn("Medrep", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMedrep)
            Me.columnCallRate = New DataColumn("CallRate", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCallRate)
            Me.columnTarget = New DataColumn("Target", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTarget)
            Me.columnCallRate.ReadOnly = true
            Me.columnTarget.ReadOnly = true
        End Sub
        
        Public Function NewCallRate_MonthlyRow() As CallRate_MonthlyRow
            Return CType(Me.NewRow,CallRate_MonthlyRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CallRate_MonthlyRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CallRate_MonthlyRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CallRate_MonthlyRowChangedEvent) Is Nothing) Then
                RaiseEvent CallRate_MonthlyRowChanged(Me, New CallRate_MonthlyRowChangeEvent(CType(e.Row,CallRate_MonthlyRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CallRate_MonthlyRowChangingEvent) Is Nothing) Then
                RaiseEvent CallRate_MonthlyRowChanging(Me, New CallRate_MonthlyRowChangeEvent(CType(e.Row,CallRate_MonthlyRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CallRate_MonthlyRowDeletedEvent) Is Nothing) Then
                RaiseEvent CallRate_MonthlyRowDeleted(Me, New CallRate_MonthlyRowChangeEvent(CType(e.Row,CallRate_MonthlyRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CallRate_MonthlyRowDeletingEvent) Is Nothing) Then
                RaiseEvent CallRate_MonthlyRowDeleting(Me, New CallRate_MonthlyRowChangeEvent(CType(e.Row,CallRate_MonthlyRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCallRate_MonthlyRow(ByVal row As CallRate_MonthlyRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CallRate_MonthlyRow
        Inherits DataRow
        
        Private tableCallRate_Monthly As CallRate_MonthlyDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCallRate_Monthly = CType(Me.Table,CallRate_MonthlyDataTable)
        End Sub
        
        Public Property Nsm As String
            Get
                Try 
                    Return CType(Me(Me.tableCallRate_Monthly.NsmColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCallRate_Monthly.NsmColumn) = value
            End Set
        End Property
        
        Public Property Dsm As String
            Get
                Try 
                    Return CType(Me(Me.tableCallRate_Monthly.DsmColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCallRate_Monthly.DsmColumn) = value
            End Set
        End Property
        
        Public Property Medrep As String
            Get
                Try 
                    Return CType(Me(Me.tableCallRate_Monthly.MedrepColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCallRate_Monthly.MedrepColumn) = value
            End Set
        End Property
        
        Public Property CallRate As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCallRate_Monthly.CallRateColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCallRate_Monthly.CallRateColumn) = value
            End Set
        End Property
        
        Public Property Target As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCallRate_Monthly.TargetColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCallRate_Monthly.TargetColumn) = value
            End Set
        End Property
        
        Public Function IsNsmNull() As Boolean
            Return Me.IsNull(Me.tableCallRate_Monthly.NsmColumn)
        End Function
        
        Public Sub SetNsmNull()
            Me(Me.tableCallRate_Monthly.NsmColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDsmNull() As Boolean
            Return Me.IsNull(Me.tableCallRate_Monthly.DsmColumn)
        End Function
        
        Public Sub SetDsmNull()
            Me(Me.tableCallRate_Monthly.DsmColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMedrepNull() As Boolean
            Return Me.IsNull(Me.tableCallRate_Monthly.MedrepColumn)
        End Function
        
        Public Sub SetMedrepNull()
            Me(Me.tableCallRate_Monthly.MedrepColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCallRateNull() As Boolean
            Return Me.IsNull(Me.tableCallRate_Monthly.CallRateColumn)
        End Function
        
        Public Sub SetCallRateNull()
            Me(Me.tableCallRate_Monthly.CallRateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTargetNull() As Boolean
            Return Me.IsNull(Me.tableCallRate_Monthly.TargetColumn)
        End Function
        
        Public Sub SetTargetNull()
            Me(Me.tableCallRate_Monthly.TargetColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CallRate_MonthlyRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CallRate_MonthlyRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CallRate_MonthlyRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CallRate_MonthlyRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BudgetOsCT_ShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnRowid As DataColumn
        
        Private column_Item As DataColumn
        
        Private columnCommissionDate As DataColumn
        
        Private columnCreateDate As DataColumn
        
        Private columnUpdateDate As DataColumn
        
        Friend Sub New()
            MyBase.New("BudgetOsCT_Show")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property RowidColumn As DataColumn
            Get
                Return Me.columnRowid
            End Get
        End Property
        
        Friend ReadOnly Property _ItemColumn As DataColumn
            Get
                Return Me.column_Item
            End Get
        End Property
        
        Friend ReadOnly Property CommissionDateColumn As DataColumn
            Get
                Return Me.columnCommissionDate
            End Get
        End Property
        
        Friend ReadOnly Property CreateDateColumn As DataColumn
            Get
                Return Me.columnCreateDate
            End Get
        End Property
        
        Friend ReadOnly Property UpdateDateColumn As DataColumn
            Get
                Return Me.columnUpdateDate
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BudgetOsCT_ShowRow
            Get
                Return CType(Me.Rows(index),BudgetOsCT_ShowRow)
            End Get
        End Property
        
        Public Event BudgetOsCT_ShowRowChanged As BudgetOsCT_ShowRowChangeEventHandler
        
        Public Event BudgetOsCT_ShowRowChanging As BudgetOsCT_ShowRowChangeEventHandler
        
        Public Event BudgetOsCT_ShowRowDeleted As BudgetOsCT_ShowRowChangeEventHandler
        
        Public Event BudgetOsCT_ShowRowDeleting As BudgetOsCT_ShowRowChangeEventHandler
        
        Public Overloads Sub AddBudgetOsCT_ShowRow(ByVal row As BudgetOsCT_ShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBudgetOsCT_ShowRow(ByVal _Item As String, ByVal CommissionDate As Date, ByVal CreateDate As Date, ByVal UpdateDate As Date) As BudgetOsCT_ShowRow
            Dim rowBudgetOsCT_ShowRow As BudgetOsCT_ShowRow = CType(Me.NewRow,BudgetOsCT_ShowRow)
            rowBudgetOsCT_ShowRow.ItemArray = New Object() {Nothing, _Item, CommissionDate, CreateDate, UpdateDate}
            Me.Rows.Add(rowBudgetOsCT_ShowRow)
            Return rowBudgetOsCT_ShowRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BudgetOsCT_ShowDataTable = CType(MyBase.Clone,BudgetOsCT_ShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BudgetOsCT_ShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnRowid = Me.Columns("Rowid")
            Me.column_Item = Me.Columns("Item")
            Me.columnCommissionDate = Me.Columns("CommissionDate")
            Me.columnCreateDate = Me.Columns("CreateDate")
            Me.columnUpdateDate = Me.Columns("UpdateDate")
        End Sub
        
        Private Sub InitClass()
            Me.columnRowid = New DataColumn("Rowid", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRowid)
            Me.column_Item = New DataColumn("Item", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_Item)
            Me.columnCommissionDate = New DataColumn("CommissionDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCommissionDate)
            Me.columnCreateDate = New DataColumn("CreateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreateDate)
            Me.columnUpdateDate = New DataColumn("UpdateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUpdateDate)
            Me.columnRowid.AutoIncrement = true
            Me.columnRowid.AllowDBNull = false
            Me.columnRowid.ReadOnly = true
            Me.column_Item.ReadOnly = true
        End Sub
        
        Public Function NewBudgetOsCT_ShowRow() As BudgetOsCT_ShowRow
            Return CType(Me.NewRow,BudgetOsCT_ShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BudgetOsCT_ShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BudgetOsCT_ShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BudgetOsCT_ShowRowChangedEvent) Is Nothing) Then
                RaiseEvent BudgetOsCT_ShowRowChanged(Me, New BudgetOsCT_ShowRowChangeEvent(CType(e.Row,BudgetOsCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BudgetOsCT_ShowRowChangingEvent) Is Nothing) Then
                RaiseEvent BudgetOsCT_ShowRowChanging(Me, New BudgetOsCT_ShowRowChangeEvent(CType(e.Row,BudgetOsCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BudgetOsCT_ShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent BudgetOsCT_ShowRowDeleted(Me, New BudgetOsCT_ShowRowChangeEvent(CType(e.Row,BudgetOsCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BudgetOsCT_ShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent BudgetOsCT_ShowRowDeleting(Me, New BudgetOsCT_ShowRowChangeEvent(CType(e.Row,BudgetOsCT_ShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBudgetOsCT_ShowRow(ByVal row As BudgetOsCT_ShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BudgetOsCT_ShowRow
        Inherits DataRow
        
        Private tableBudgetOsCT_Show As BudgetOsCT_ShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBudgetOsCT_Show = CType(Me.Table,BudgetOsCT_ShowDataTable)
        End Sub
        
        Public Property Rowid As Integer
            Get
                Return CType(Me(Me.tableBudgetOsCT_Show.RowidColumn),Integer)
            End Get
            Set
                Me(Me.tableBudgetOsCT_Show.RowidColumn) = value
            End Set
        End Property
        
        Public Property _Item As String
            Get
                Try 
                    Return CType(Me(Me.tableBudgetOsCT_Show._ItemColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBudgetOsCT_Show._ItemColumn) = value
            End Set
        End Property
        
        Public Property CommissionDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableBudgetOsCT_Show.CommissionDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBudgetOsCT_Show.CommissionDateColumn) = value
            End Set
        End Property
        
        Public Property CreateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableBudgetOsCT_Show.CreateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBudgetOsCT_Show.CreateDateColumn) = value
            End Set
        End Property
        
        Public Property UpdateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableBudgetOsCT_Show.UpdateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBudgetOsCT_Show.UpdateDateColumn) = value
            End Set
        End Property
        
        Public Function Is_ItemNull() As Boolean
            Return Me.IsNull(Me.tableBudgetOsCT_Show._ItemColumn)
        End Function
        
        Public Sub Set_ItemNull()
            Me(Me.tableBudgetOsCT_Show._ItemColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCommissionDateNull() As Boolean
            Return Me.IsNull(Me.tableBudgetOsCT_Show.CommissionDateColumn)
        End Function
        
        Public Sub SetCommissionDateNull()
            Me(Me.tableBudgetOsCT_Show.CommissionDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreateDateNull() As Boolean
            Return Me.IsNull(Me.tableBudgetOsCT_Show.CreateDateColumn)
        End Function
        
        Public Sub SetCreateDateNull()
            Me(Me.tableBudgetOsCT_Show.CreateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUpdateDateNull() As Boolean
            Return Me.IsNull(Me.tableBudgetOsCT_Show.UpdateDateColumn)
        End Function
        
        Public Sub SetUpdateDateNull()
            Me(Me.tableBudgetOsCT_Show.UpdateDateColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BudgetOsCT_ShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BudgetOsCT_ShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BudgetOsCT_ShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BudgetOsCT_ShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ItemCodTab_ShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnRowid As DataColumn
        
        Private columnItemCode As DataColumn
        
        Private columnMetroDrugCode As DataColumn
        
        Private columnMercuryItemCode As DataColumn
        
        Private columnItemDesc As DataColumn
        
        Private columnGenericName As DataColumn
        
        Private columnItemUnit As DataColumn
        
        Private columnUnitPrice As DataColumn
        
        Private columnMercurySTPrice As DataColumn
        
        Private columnPrinCode As DataColumn
        
        Private columnPrinName As DataColumn
        
        Private columnDivCode As DataColumn
        
        Private columnDivName As DataColumn
        
        Private columnProductLine As DataColumn
        
        Private columnProductForm As DataColumn
        
        Private columnLaunchDate As DataColumn
        
        Private columnInActiveDate As DataColumn
        
        Private columnStatus As DataColumn
        
        Friend Sub New()
            MyBase.New("ItemCodTab_Show")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property RowidColumn As DataColumn
            Get
                Return Me.columnRowid
            End Get
        End Property
        
        Friend ReadOnly Property ItemCodeColumn As DataColumn
            Get
                Return Me.columnItemCode
            End Get
        End Property
        
        Friend ReadOnly Property MetroDrugCodeColumn As DataColumn
            Get
                Return Me.columnMetroDrugCode
            End Get
        End Property
        
        Friend ReadOnly Property MercuryItemCodeColumn As DataColumn
            Get
                Return Me.columnMercuryItemCode
            End Get
        End Property
        
        Friend ReadOnly Property ItemDescColumn As DataColumn
            Get
                Return Me.columnItemDesc
            End Get
        End Property
        
        Friend ReadOnly Property GenericNameColumn As DataColumn
            Get
                Return Me.columnGenericName
            End Get
        End Property
        
        Friend ReadOnly Property ItemUnitColumn As DataColumn
            Get
                Return Me.columnItemUnit
            End Get
        End Property
        
        Friend ReadOnly Property UnitPriceColumn As DataColumn
            Get
                Return Me.columnUnitPrice
            End Get
        End Property
        
        Friend ReadOnly Property MercurySTPriceColumn As DataColumn
            Get
                Return Me.columnMercurySTPrice
            End Get
        End Property
        
        Friend ReadOnly Property PrinCodeColumn As DataColumn
            Get
                Return Me.columnPrinCode
            End Get
        End Property
        
        Friend ReadOnly Property PrinNameColumn As DataColumn
            Get
                Return Me.columnPrinName
            End Get
        End Property
        
        Friend ReadOnly Property DivCodeColumn As DataColumn
            Get
                Return Me.columnDivCode
            End Get
        End Property
        
        Friend ReadOnly Property DivNameColumn As DataColumn
            Get
                Return Me.columnDivName
            End Get
        End Property
        
        Friend ReadOnly Property ProductLineColumn As DataColumn
            Get
                Return Me.columnProductLine
            End Get
        End Property
        
        Friend ReadOnly Property ProductFormColumn As DataColumn
            Get
                Return Me.columnProductForm
            End Get
        End Property
        
        Friend ReadOnly Property LaunchDateColumn As DataColumn
            Get
                Return Me.columnLaunchDate
            End Get
        End Property
        
        Friend ReadOnly Property InActiveDateColumn As DataColumn
            Get
                Return Me.columnInActiveDate
            End Get
        End Property
        
        Friend ReadOnly Property StatusColumn As DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ItemCodTab_ShowRow
            Get
                Return CType(Me.Rows(index),ItemCodTab_ShowRow)
            End Get
        End Property
        
        Public Event ItemCodTab_ShowRowChanged As ItemCodTab_ShowRowChangeEventHandler
        
        Public Event ItemCodTab_ShowRowChanging As ItemCodTab_ShowRowChangeEventHandler
        
        Public Event ItemCodTab_ShowRowDeleted As ItemCodTab_ShowRowChangeEventHandler
        
        Public Event ItemCodTab_ShowRowDeleting As ItemCodTab_ShowRowChangeEventHandler
        
        Public Overloads Sub AddItemCodTab_ShowRow(ByVal row As ItemCodTab_ShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddItemCodTab_ShowRow( _
                    ByVal ItemCode As String,  _
                    ByVal MetroDrugCode As String,  _
                    ByVal MercuryItemCode As String,  _
                    ByVal ItemDesc As String,  _
                    ByVal GenericName As String,  _
                    ByVal ItemUnit As String,  _
                    ByVal UnitPrice As Decimal,  _
                    ByVal MercurySTPrice As Decimal,  _
                    ByVal PrinCode As String,  _
                    ByVal PrinName As String,  _
                    ByVal DivCode As String,  _
                    ByVal DivName As String,  _
                    ByVal ProductLine As String,  _
                    ByVal ProductForm As String,  _
                    ByVal LaunchDate As Date,  _
                    ByVal InActiveDate As Date,  _
                    ByVal Status As String) As ItemCodTab_ShowRow
            Dim rowItemCodTab_ShowRow As ItemCodTab_ShowRow = CType(Me.NewRow,ItemCodTab_ShowRow)
            rowItemCodTab_ShowRow.ItemArray = New Object() {Nothing, ItemCode, MetroDrugCode, MercuryItemCode, ItemDesc, GenericName, ItemUnit, UnitPrice, MercurySTPrice, PrinCode, PrinName, DivCode, DivName, ProductLine, ProductForm, LaunchDate, InActiveDate, Status}
            Me.Rows.Add(rowItemCodTab_ShowRow)
            Return rowItemCodTab_ShowRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ItemCodTab_ShowDataTable = CType(MyBase.Clone,ItemCodTab_ShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ItemCodTab_ShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnRowid = Me.Columns("Rowid")
            Me.columnItemCode = Me.Columns("ItemCode")
            Me.columnMetroDrugCode = Me.Columns("MetroDrugCode")
            Me.columnMercuryItemCode = Me.Columns("MercuryItemCode")
            Me.columnItemDesc = Me.Columns("ItemDesc")
            Me.columnGenericName = Me.Columns("GenericName")
            Me.columnItemUnit = Me.Columns("ItemUnit")
            Me.columnUnitPrice = Me.Columns("UnitPrice")
            Me.columnMercurySTPrice = Me.Columns("MercurySTPrice")
            Me.columnPrinCode = Me.Columns("PrinCode")
            Me.columnPrinName = Me.Columns("PrinName")
            Me.columnDivCode = Me.Columns("DivCode")
            Me.columnDivName = Me.Columns("DivName")
            Me.columnProductLine = Me.Columns("ProductLine")
            Me.columnProductForm = Me.Columns("ProductForm")
            Me.columnLaunchDate = Me.Columns("LaunchDate")
            Me.columnInActiveDate = Me.Columns("InActiveDate")
            Me.columnStatus = Me.Columns("Status")
        End Sub
        
        Private Sub InitClass()
            Me.columnRowid = New DataColumn("Rowid", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRowid)
            Me.columnItemCode = New DataColumn("ItemCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemCode)
            Me.columnMetroDrugCode = New DataColumn("MetroDrugCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMetroDrugCode)
            Me.columnMercuryItemCode = New DataColumn("MercuryItemCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMercuryItemCode)
            Me.columnItemDesc = New DataColumn("ItemDesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemDesc)
            Me.columnGenericName = New DataColumn("GenericName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGenericName)
            Me.columnItemUnit = New DataColumn("ItemUnit", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemUnit)
            Me.columnUnitPrice = New DataColumn("UnitPrice", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUnitPrice)
            Me.columnMercurySTPrice = New DataColumn("MercurySTPrice", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMercurySTPrice)
            Me.columnPrinCode = New DataColumn("PrinCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrinCode)
            Me.columnPrinName = New DataColumn("PrinName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrinName)
            Me.columnDivCode = New DataColumn("DivCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDivCode)
            Me.columnDivName = New DataColumn("DivName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDivName)
            Me.columnProductLine = New DataColumn("ProductLine", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnProductLine)
            Me.columnProductForm = New DataColumn("ProductForm", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnProductForm)
            Me.columnLaunchDate = New DataColumn("LaunchDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLaunchDate)
            Me.columnInActiveDate = New DataColumn("InActiveDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInActiveDate)
            Me.columnStatus = New DataColumn("Status", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatus)
            Me.columnRowid.AutoIncrement = true
            Me.columnRowid.AllowDBNull = false
            Me.columnRowid.ReadOnly = true
            Me.columnItemCode.AllowDBNull = false
            Me.columnItemDesc.AllowDBNull = false
            Me.columnItemUnit.AllowDBNull = false
            Me.columnUnitPrice.AllowDBNull = false
        End Sub
        
        Public Function NewItemCodTab_ShowRow() As ItemCodTab_ShowRow
            Return CType(Me.NewRow,ItemCodTab_ShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ItemCodTab_ShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ItemCodTab_ShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ItemCodTab_ShowRowChangedEvent) Is Nothing) Then
                RaiseEvent ItemCodTab_ShowRowChanged(Me, New ItemCodTab_ShowRowChangeEvent(CType(e.Row,ItemCodTab_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ItemCodTab_ShowRowChangingEvent) Is Nothing) Then
                RaiseEvent ItemCodTab_ShowRowChanging(Me, New ItemCodTab_ShowRowChangeEvent(CType(e.Row,ItemCodTab_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ItemCodTab_ShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent ItemCodTab_ShowRowDeleted(Me, New ItemCodTab_ShowRowChangeEvent(CType(e.Row,ItemCodTab_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ItemCodTab_ShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent ItemCodTab_ShowRowDeleting(Me, New ItemCodTab_ShowRowChangeEvent(CType(e.Row,ItemCodTab_ShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveItemCodTab_ShowRow(ByVal row As ItemCodTab_ShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ItemCodTab_ShowRow
        Inherits DataRow
        
        Private tableItemCodTab_Show As ItemCodTab_ShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableItemCodTab_Show = CType(Me.Table,ItemCodTab_ShowDataTable)
        End Sub
        
        Public Property Rowid As Decimal
            Get
                Return CType(Me(Me.tableItemCodTab_Show.RowidColumn),Decimal)
            End Get
            Set
                Me(Me.tableItemCodTab_Show.RowidColumn) = value
            End Set
        End Property
        
        Public Property ItemCode As String
            Get
                Return CType(Me(Me.tableItemCodTab_Show.ItemCodeColumn),String)
            End Get
            Set
                Me(Me.tableItemCodTab_Show.ItemCodeColumn) = value
            End Set
        End Property
        
        Public Property MetroDrugCode As String
            Get
                Try 
                    Return CType(Me(Me.tableItemCodTab_Show.MetroDrugCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemCodTab_Show.MetroDrugCodeColumn) = value
            End Set
        End Property
        
        Public Property MercuryItemCode As String
            Get
                Try 
                    Return CType(Me(Me.tableItemCodTab_Show.MercuryItemCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemCodTab_Show.MercuryItemCodeColumn) = value
            End Set
        End Property
        
        Public Property ItemDesc As String
            Get
                Return CType(Me(Me.tableItemCodTab_Show.ItemDescColumn),String)
            End Get
            Set
                Me(Me.tableItemCodTab_Show.ItemDescColumn) = value
            End Set
        End Property
        
        Public Property GenericName As String
            Get
                Try 
                    Return CType(Me(Me.tableItemCodTab_Show.GenericNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemCodTab_Show.GenericNameColumn) = value
            End Set
        End Property
        
        Public Property ItemUnit As String
            Get
                Return CType(Me(Me.tableItemCodTab_Show.ItemUnitColumn),String)
            End Get
            Set
                Me(Me.tableItemCodTab_Show.ItemUnitColumn) = value
            End Set
        End Property
        
        Public Property UnitPrice As Decimal
            Get
                Return CType(Me(Me.tableItemCodTab_Show.UnitPriceColumn),Decimal)
            End Get
            Set
                Me(Me.tableItemCodTab_Show.UnitPriceColumn) = value
            End Set
        End Property
        
        Public Property MercurySTPrice As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableItemCodTab_Show.MercurySTPriceColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemCodTab_Show.MercurySTPriceColumn) = value
            End Set
        End Property
        
        Public Property PrinCode As String
            Get
                Try 
                    Return CType(Me(Me.tableItemCodTab_Show.PrinCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemCodTab_Show.PrinCodeColumn) = value
            End Set
        End Property
        
        Public Property PrinName As String
            Get
                Try 
                    Return CType(Me(Me.tableItemCodTab_Show.PrinNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemCodTab_Show.PrinNameColumn) = value
            End Set
        End Property
        
        Public Property DivCode As String
            Get
                Try 
                    Return CType(Me(Me.tableItemCodTab_Show.DivCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemCodTab_Show.DivCodeColumn) = value
            End Set
        End Property
        
        Public Property DivName As String
            Get
                Try 
                    Return CType(Me(Me.tableItemCodTab_Show.DivNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemCodTab_Show.DivNameColumn) = value
            End Set
        End Property
        
        Public Property ProductLine As String
            Get
                Try 
                    Return CType(Me(Me.tableItemCodTab_Show.ProductLineColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemCodTab_Show.ProductLineColumn) = value
            End Set
        End Property
        
        Public Property ProductForm As String
            Get
                Try 
                    Return CType(Me(Me.tableItemCodTab_Show.ProductFormColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemCodTab_Show.ProductFormColumn) = value
            End Set
        End Property
        
        Public Property LaunchDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableItemCodTab_Show.LaunchDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemCodTab_Show.LaunchDateColumn) = value
            End Set
        End Property
        
        Public Property InActiveDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableItemCodTab_Show.InActiveDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemCodTab_Show.InActiveDateColumn) = value
            End Set
        End Property
        
        Public Property Status As String
            Get
                Try 
                    Return CType(Me(Me.tableItemCodTab_Show.StatusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemCodTab_Show.StatusColumn) = value
            End Set
        End Property
        
        Public Function IsMetroDrugCodeNull() As Boolean
            Return Me.IsNull(Me.tableItemCodTab_Show.MetroDrugCodeColumn)
        End Function
        
        Public Sub SetMetroDrugCodeNull()
            Me(Me.tableItemCodTab_Show.MetroDrugCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMercuryItemCodeNull() As Boolean
            Return Me.IsNull(Me.tableItemCodTab_Show.MercuryItemCodeColumn)
        End Function
        
        Public Sub SetMercuryItemCodeNull()
            Me(Me.tableItemCodTab_Show.MercuryItemCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGenericNameNull() As Boolean
            Return Me.IsNull(Me.tableItemCodTab_Show.GenericNameColumn)
        End Function
        
        Public Sub SetGenericNameNull()
            Me(Me.tableItemCodTab_Show.GenericNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMercurySTPriceNull() As Boolean
            Return Me.IsNull(Me.tableItemCodTab_Show.MercurySTPriceColumn)
        End Function
        
        Public Sub SetMercurySTPriceNull()
            Me(Me.tableItemCodTab_Show.MercurySTPriceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPrinCodeNull() As Boolean
            Return Me.IsNull(Me.tableItemCodTab_Show.PrinCodeColumn)
        End Function
        
        Public Sub SetPrinCodeNull()
            Me(Me.tableItemCodTab_Show.PrinCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPrinNameNull() As Boolean
            Return Me.IsNull(Me.tableItemCodTab_Show.PrinNameColumn)
        End Function
        
        Public Sub SetPrinNameNull()
            Me(Me.tableItemCodTab_Show.PrinNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDivCodeNull() As Boolean
            Return Me.IsNull(Me.tableItemCodTab_Show.DivCodeColumn)
        End Function
        
        Public Sub SetDivCodeNull()
            Me(Me.tableItemCodTab_Show.DivCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDivNameNull() As Boolean
            Return Me.IsNull(Me.tableItemCodTab_Show.DivNameColumn)
        End Function
        
        Public Sub SetDivNameNull()
            Me(Me.tableItemCodTab_Show.DivNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsProductLineNull() As Boolean
            Return Me.IsNull(Me.tableItemCodTab_Show.ProductLineColumn)
        End Function
        
        Public Sub SetProductLineNull()
            Me(Me.tableItemCodTab_Show.ProductLineColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsProductFormNull() As Boolean
            Return Me.IsNull(Me.tableItemCodTab_Show.ProductFormColumn)
        End Function
        
        Public Sub SetProductFormNull()
            Me(Me.tableItemCodTab_Show.ProductFormColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLaunchDateNull() As Boolean
            Return Me.IsNull(Me.tableItemCodTab_Show.LaunchDateColumn)
        End Function
        
        Public Sub SetLaunchDateNull()
            Me(Me.tableItemCodTab_Show.LaunchDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsInActiveDateNull() As Boolean
            Return Me.IsNull(Me.tableItemCodTab_Show.InActiveDateColumn)
        End Function
        
        Public Sub SetInActiveDateNull()
            Me(Me.tableItemCodTab_Show.InActiveDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tableItemCodTab_Show.StatusColumn)
        End Function
        
        Public Sub SetStatusNull()
            Me(Me.tableItemCodTab_Show.StatusColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ItemCodTab_ShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ItemCodTab_ShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ItemCodTab_ShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ItemCodTab_ShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PrincipalCodTab_ShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnRowid As DataColumn
        
        Private columnPrinCode As DataColumn
        
        Private columnPrinName As DataColumn
        
        Private columnDivCode As DataColumn
        
        Private columnDivision As DataColumn
        
        Private columnDivGroup As DataColumn
        
        Private columnShortName As DataColumn
        
        Private columnCreateDate As DataColumn
        
        Private columnUpdateDate As DataColumn
        
        Private columnStatus As DataColumn
        
        Private columnLastUser As DataColumn
        
        Private columnStartDate As DataColumn
        
        Private columnEndDate As DataColumn
        
        Friend Sub New()
            MyBase.New("PrincipalCodTab_Show")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property RowidColumn As DataColumn
            Get
                Return Me.columnRowid
            End Get
        End Property
        
        Friend ReadOnly Property PrinCodeColumn As DataColumn
            Get
                Return Me.columnPrinCode
            End Get
        End Property
        
        Friend ReadOnly Property PrinNameColumn As DataColumn
            Get
                Return Me.columnPrinName
            End Get
        End Property
        
        Friend ReadOnly Property DivCodeColumn As DataColumn
            Get
                Return Me.columnDivCode
            End Get
        End Property
        
        Friend ReadOnly Property DivisionColumn As DataColumn
            Get
                Return Me.columnDivision
            End Get
        End Property
        
        Friend ReadOnly Property DivGroupColumn As DataColumn
            Get
                Return Me.columnDivGroup
            End Get
        End Property
        
        Friend ReadOnly Property ShortNameColumn As DataColumn
            Get
                Return Me.columnShortName
            End Get
        End Property
        
        Friend ReadOnly Property CreateDateColumn As DataColumn
            Get
                Return Me.columnCreateDate
            End Get
        End Property
        
        Friend ReadOnly Property UpdateDateColumn As DataColumn
            Get
                Return Me.columnUpdateDate
            End Get
        End Property
        
        Friend ReadOnly Property StatusColumn As DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        Friend ReadOnly Property LastUserColumn As DataColumn
            Get
                Return Me.columnLastUser
            End Get
        End Property
        
        Friend ReadOnly Property StartDateColumn As DataColumn
            Get
                Return Me.columnStartDate
            End Get
        End Property
        
        Friend ReadOnly Property EndDateColumn As DataColumn
            Get
                Return Me.columnEndDate
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PrincipalCodTab_ShowRow
            Get
                Return CType(Me.Rows(index),PrincipalCodTab_ShowRow)
            End Get
        End Property
        
        Public Event PrincipalCodTab_ShowRowChanged As PrincipalCodTab_ShowRowChangeEventHandler
        
        Public Event PrincipalCodTab_ShowRowChanging As PrincipalCodTab_ShowRowChangeEventHandler
        
        Public Event PrincipalCodTab_ShowRowDeleted As PrincipalCodTab_ShowRowChangeEventHandler
        
        Public Event PrincipalCodTab_ShowRowDeleting As PrincipalCodTab_ShowRowChangeEventHandler
        
        Public Overloads Sub AddPrincipalCodTab_ShowRow(ByVal row As PrincipalCodTab_ShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPrincipalCodTab_ShowRow(ByVal Rowid As Integer, ByVal PrinCode As String, ByVal PrinName As String, ByVal DivCode As String, ByVal Division As String, ByVal DivGroup As String, ByVal ShortName As String, ByVal CreateDate As Date, ByVal UpdateDate As Date, ByVal Status As String, ByVal LastUser As String, ByVal StartDate As Date, ByVal EndDate As Date) As PrincipalCodTab_ShowRow
            Dim rowPrincipalCodTab_ShowRow As PrincipalCodTab_ShowRow = CType(Me.NewRow,PrincipalCodTab_ShowRow)
            rowPrincipalCodTab_ShowRow.ItemArray = New Object() {Rowid, PrinCode, PrinName, DivCode, Division, DivGroup, ShortName, CreateDate, UpdateDate, Status, LastUser, StartDate, EndDate}
            Me.Rows.Add(rowPrincipalCodTab_ShowRow)
            Return rowPrincipalCodTab_ShowRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PrincipalCodTab_ShowDataTable = CType(MyBase.Clone,PrincipalCodTab_ShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PrincipalCodTab_ShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnRowid = Me.Columns("Rowid")
            Me.columnPrinCode = Me.Columns("PrinCode")
            Me.columnPrinName = Me.Columns("PrinName")
            Me.columnDivCode = Me.Columns("DivCode")
            Me.columnDivision = Me.Columns("Division")
            Me.columnDivGroup = Me.Columns("DivGroup")
            Me.columnShortName = Me.Columns("ShortName")
            Me.columnCreateDate = Me.Columns("CreateDate")
            Me.columnUpdateDate = Me.Columns("UpdateDate")
            Me.columnStatus = Me.Columns("Status")
            Me.columnLastUser = Me.Columns("LastUser")
            Me.columnStartDate = Me.Columns("StartDate")
            Me.columnEndDate = Me.Columns("EndDate")
        End Sub
        
        Private Sub InitClass()
            Me.columnRowid = New DataColumn("Rowid", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRowid)
            Me.columnPrinCode = New DataColumn("PrinCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrinCode)
            Me.columnPrinName = New DataColumn("PrinName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrinName)
            Me.columnDivCode = New DataColumn("DivCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDivCode)
            Me.columnDivision = New DataColumn("Division", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDivision)
            Me.columnDivGroup = New DataColumn("DivGroup", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDivGroup)
            Me.columnShortName = New DataColumn("ShortName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnShortName)
            Me.columnCreateDate = New DataColumn("CreateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreateDate)
            Me.columnUpdateDate = New DataColumn("UpdateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUpdateDate)
            Me.columnStatus = New DataColumn("Status", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatus)
            Me.columnLastUser = New DataColumn("LastUser", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLastUser)
            Me.columnStartDate = New DataColumn("StartDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStartDate)
            Me.columnEndDate = New DataColumn("EndDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEndDate)
        End Sub
        
        Public Function NewPrincipalCodTab_ShowRow() As PrincipalCodTab_ShowRow
            Return CType(Me.NewRow,PrincipalCodTab_ShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PrincipalCodTab_ShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PrincipalCodTab_ShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PrincipalCodTab_ShowRowChangedEvent) Is Nothing) Then
                RaiseEvent PrincipalCodTab_ShowRowChanged(Me, New PrincipalCodTab_ShowRowChangeEvent(CType(e.Row,PrincipalCodTab_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PrincipalCodTab_ShowRowChangingEvent) Is Nothing) Then
                RaiseEvent PrincipalCodTab_ShowRowChanging(Me, New PrincipalCodTab_ShowRowChangeEvent(CType(e.Row,PrincipalCodTab_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PrincipalCodTab_ShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent PrincipalCodTab_ShowRowDeleted(Me, New PrincipalCodTab_ShowRowChangeEvent(CType(e.Row,PrincipalCodTab_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PrincipalCodTab_ShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent PrincipalCodTab_ShowRowDeleting(Me, New PrincipalCodTab_ShowRowChangeEvent(CType(e.Row,PrincipalCodTab_ShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePrincipalCodTab_ShowRow(ByVal row As PrincipalCodTab_ShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PrincipalCodTab_ShowRow
        Inherits DataRow
        
        Private tablePrincipalCodTab_Show As PrincipalCodTab_ShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePrincipalCodTab_Show = CType(Me.Table,PrincipalCodTab_ShowDataTable)
        End Sub
        
        Public Property Rowid As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePrincipalCodTab_Show.RowidColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrincipalCodTab_Show.RowidColumn) = value
            End Set
        End Property
        
        Public Property PrinCode As String
            Get
                Try 
                    Return CType(Me(Me.tablePrincipalCodTab_Show.PrinCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrincipalCodTab_Show.PrinCodeColumn) = value
            End Set
        End Property
        
        Public Property PrinName As String
            Get
                Try 
                    Return CType(Me(Me.tablePrincipalCodTab_Show.PrinNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrincipalCodTab_Show.PrinNameColumn) = value
            End Set
        End Property
        
        Public Property DivCode As String
            Get
                Try 
                    Return CType(Me(Me.tablePrincipalCodTab_Show.DivCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrincipalCodTab_Show.DivCodeColumn) = value
            End Set
        End Property
        
        Public Property Division As String
            Get
                Try 
                    Return CType(Me(Me.tablePrincipalCodTab_Show.DivisionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrincipalCodTab_Show.DivisionColumn) = value
            End Set
        End Property
        
        Public Property DivGroup As String
            Get
                Try 
                    Return CType(Me(Me.tablePrincipalCodTab_Show.DivGroupColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrincipalCodTab_Show.DivGroupColumn) = value
            End Set
        End Property
        
        Public Property ShortName As String
            Get
                Try 
                    Return CType(Me(Me.tablePrincipalCodTab_Show.ShortNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrincipalCodTab_Show.ShortNameColumn) = value
            End Set
        End Property
        
        Public Property CreateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tablePrincipalCodTab_Show.CreateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrincipalCodTab_Show.CreateDateColumn) = value
            End Set
        End Property
        
        Public Property UpdateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tablePrincipalCodTab_Show.UpdateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrincipalCodTab_Show.UpdateDateColumn) = value
            End Set
        End Property
        
        Public Property Status As String
            Get
                Try 
                    Return CType(Me(Me.tablePrincipalCodTab_Show.StatusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrincipalCodTab_Show.StatusColumn) = value
            End Set
        End Property
        
        Public Property LastUser As String
            Get
                Try 
                    Return CType(Me(Me.tablePrincipalCodTab_Show.LastUserColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrincipalCodTab_Show.LastUserColumn) = value
            End Set
        End Property
        
        Public Property StartDate As Date
            Get
                Try 
                    Return CType(Me(Me.tablePrincipalCodTab_Show.StartDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrincipalCodTab_Show.StartDateColumn) = value
            End Set
        End Property
        
        Public Property EndDate As Date
            Get
                Try 
                    Return CType(Me(Me.tablePrincipalCodTab_Show.EndDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrincipalCodTab_Show.EndDateColumn) = value
            End Set
        End Property
        
        Public Function IsRowidNull() As Boolean
            Return Me.IsNull(Me.tablePrincipalCodTab_Show.RowidColumn)
        End Function
        
        Public Sub SetRowidNull()
            Me(Me.tablePrincipalCodTab_Show.RowidColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPrinCodeNull() As Boolean
            Return Me.IsNull(Me.tablePrincipalCodTab_Show.PrinCodeColumn)
        End Function
        
        Public Sub SetPrinCodeNull()
            Me(Me.tablePrincipalCodTab_Show.PrinCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPrinNameNull() As Boolean
            Return Me.IsNull(Me.tablePrincipalCodTab_Show.PrinNameColumn)
        End Function
        
        Public Sub SetPrinNameNull()
            Me(Me.tablePrincipalCodTab_Show.PrinNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDivCodeNull() As Boolean
            Return Me.IsNull(Me.tablePrincipalCodTab_Show.DivCodeColumn)
        End Function
        
        Public Sub SetDivCodeNull()
            Me(Me.tablePrincipalCodTab_Show.DivCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDivisionNull() As Boolean
            Return Me.IsNull(Me.tablePrincipalCodTab_Show.DivisionColumn)
        End Function
        
        Public Sub SetDivisionNull()
            Me(Me.tablePrincipalCodTab_Show.DivisionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDivGroupNull() As Boolean
            Return Me.IsNull(Me.tablePrincipalCodTab_Show.DivGroupColumn)
        End Function
        
        Public Sub SetDivGroupNull()
            Me(Me.tablePrincipalCodTab_Show.DivGroupColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsShortNameNull() As Boolean
            Return Me.IsNull(Me.tablePrincipalCodTab_Show.ShortNameColumn)
        End Function
        
        Public Sub SetShortNameNull()
            Me(Me.tablePrincipalCodTab_Show.ShortNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreateDateNull() As Boolean
            Return Me.IsNull(Me.tablePrincipalCodTab_Show.CreateDateColumn)
        End Function
        
        Public Sub SetCreateDateNull()
            Me(Me.tablePrincipalCodTab_Show.CreateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUpdateDateNull() As Boolean
            Return Me.IsNull(Me.tablePrincipalCodTab_Show.UpdateDateColumn)
        End Function
        
        Public Sub SetUpdateDateNull()
            Me(Me.tablePrincipalCodTab_Show.UpdateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tablePrincipalCodTab_Show.StatusColumn)
        End Function
        
        Public Sub SetStatusNull()
            Me(Me.tablePrincipalCodTab_Show.StatusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLastUserNull() As Boolean
            Return Me.IsNull(Me.tablePrincipalCodTab_Show.LastUserColumn)
        End Function
        
        Public Sub SetLastUserNull()
            Me(Me.tablePrincipalCodTab_Show.LastUserColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStartDateNull() As Boolean
            Return Me.IsNull(Me.tablePrincipalCodTab_Show.StartDateColumn)
        End Function
        
        Public Sub SetStartDateNull()
            Me(Me.tablePrincipalCodTab_Show.StartDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEndDateNull() As Boolean
            Return Me.IsNull(Me.tablePrincipalCodTab_Show.EndDateColumn)
        End Function
        
        Public Sub SetEndDateNull()
            Me(Me.tablePrincipalCodTab_Show.EndDateColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PrincipalCodTab_ShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PrincipalCodTab_ShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PrincipalCodTab_ShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PrincipalCodTab_ShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ProdManCT_ShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnRowid As DataColumn
        
        Private columnPmCode As DataColumn
        
        Private columnPmName As DataColumn
        
        Private columnEmail As DataColumn
        
        Private columnMobileNo As DataColumn
        
        Private columnHire_Date As DataColumn
        
        Private columnResign_Date As DataColumn
        
        Private columnCreateDate As DataColumn
        
        Private columnUpdateDate As DataColumn
        
        Private columnLastUser As DataColumn
        
        Private columnDivCode As DataColumn
        
        Private columndivision As DataColumn
        
        Private columnStartDate As DataColumn
        
        Private columnEndDate As DataColumn
        
        Friend Sub New()
            MyBase.New("ProdManCT_Show")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property RowidColumn As DataColumn
            Get
                Return Me.columnRowid
            End Get
        End Property
        
        Friend ReadOnly Property PmCodeColumn As DataColumn
            Get
                Return Me.columnPmCode
            End Get
        End Property
        
        Friend ReadOnly Property PmNameColumn As DataColumn
            Get
                Return Me.columnPmName
            End Get
        End Property
        
        Friend ReadOnly Property EmailColumn As DataColumn
            Get
                Return Me.columnEmail
            End Get
        End Property
        
        Friend ReadOnly Property MobileNoColumn As DataColumn
            Get
                Return Me.columnMobileNo
            End Get
        End Property
        
        Friend ReadOnly Property Hire_DateColumn As DataColumn
            Get
                Return Me.columnHire_Date
            End Get
        End Property
        
        Friend ReadOnly Property Resign_DateColumn As DataColumn
            Get
                Return Me.columnResign_Date
            End Get
        End Property
        
        Friend ReadOnly Property CreateDateColumn As DataColumn
            Get
                Return Me.columnCreateDate
            End Get
        End Property
        
        Friend ReadOnly Property UpdateDateColumn As DataColumn
            Get
                Return Me.columnUpdateDate
            End Get
        End Property
        
        Friend ReadOnly Property LastUserColumn As DataColumn
            Get
                Return Me.columnLastUser
            End Get
        End Property
        
        Friend ReadOnly Property DivCodeColumn As DataColumn
            Get
                Return Me.columnDivCode
            End Get
        End Property
        
        Friend ReadOnly Property divisionColumn As DataColumn
            Get
                Return Me.columndivision
            End Get
        End Property
        
        Friend ReadOnly Property StartDateColumn As DataColumn
            Get
                Return Me.columnStartDate
            End Get
        End Property
        
        Friend ReadOnly Property EndDateColumn As DataColumn
            Get
                Return Me.columnEndDate
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProdManCT_ShowRow
            Get
                Return CType(Me.Rows(index),ProdManCT_ShowRow)
            End Get
        End Property
        
        Public Event ProdManCT_ShowRowChanged As ProdManCT_ShowRowChangeEventHandler
        
        Public Event ProdManCT_ShowRowChanging As ProdManCT_ShowRowChangeEventHandler
        
        Public Event ProdManCT_ShowRowDeleted As ProdManCT_ShowRowChangeEventHandler
        
        Public Event ProdManCT_ShowRowDeleting As ProdManCT_ShowRowChangeEventHandler
        
        Public Overloads Sub AddProdManCT_ShowRow(ByVal row As ProdManCT_ShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddProdManCT_ShowRow(ByVal PmCode As String, ByVal PmName As String, ByVal Email As String, ByVal MobileNo As String, ByVal Hire_Date As Date, ByVal Resign_Date As Date, ByVal CreateDate As Date, ByVal UpdateDate As Date, ByVal LastUser As String, ByVal DivCode As String, ByVal division As String, ByVal StartDate As Date, ByVal EndDate As Date) As ProdManCT_ShowRow
            Dim rowProdManCT_ShowRow As ProdManCT_ShowRow = CType(Me.NewRow,ProdManCT_ShowRow)
            rowProdManCT_ShowRow.ItemArray = New Object() {Nothing, PmCode, PmName, Email, MobileNo, Hire_Date, Resign_Date, CreateDate, UpdateDate, LastUser, DivCode, division, StartDate, EndDate}
            Me.Rows.Add(rowProdManCT_ShowRow)
            Return rowProdManCT_ShowRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ProdManCT_ShowDataTable = CType(MyBase.Clone,ProdManCT_ShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ProdManCT_ShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnRowid = Me.Columns("Rowid")
            Me.columnPmCode = Me.Columns("PmCode")
            Me.columnPmName = Me.Columns("PmName")
            Me.columnEmail = Me.Columns("Email")
            Me.columnMobileNo = Me.Columns("MobileNo")
            Me.columnHire_Date = Me.Columns("Hire_Date")
            Me.columnResign_Date = Me.Columns("Resign_Date")
            Me.columnCreateDate = Me.Columns("CreateDate")
            Me.columnUpdateDate = Me.Columns("UpdateDate")
            Me.columnLastUser = Me.Columns("LastUser")
            Me.columnDivCode = Me.Columns("DivCode")
            Me.columndivision = Me.Columns("division")
            Me.columnStartDate = Me.Columns("StartDate")
            Me.columnEndDate = Me.Columns("EndDate")
        End Sub
        
        Private Sub InitClass()
            Me.columnRowid = New DataColumn("Rowid", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRowid)
            Me.columnPmCode = New DataColumn("PmCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPmCode)
            Me.columnPmName = New DataColumn("PmName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPmName)
            Me.columnEmail = New DataColumn("Email", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmail)
            Me.columnMobileNo = New DataColumn("MobileNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMobileNo)
            Me.columnHire_Date = New DataColumn("Hire_Date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHire_Date)
            Me.columnResign_Date = New DataColumn("Resign_Date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnResign_Date)
            Me.columnCreateDate = New DataColumn("CreateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreateDate)
            Me.columnUpdateDate = New DataColumn("UpdateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUpdateDate)
            Me.columnLastUser = New DataColumn("LastUser", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLastUser)
            Me.columnDivCode = New DataColumn("DivCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDivCode)
            Me.columndivision = New DataColumn("division", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndivision)
            Me.columnStartDate = New DataColumn("StartDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStartDate)
            Me.columnEndDate = New DataColumn("EndDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEndDate)
            Me.columnRowid.AutoIncrement = true
            Me.columnRowid.AllowDBNull = false
            Me.columnRowid.ReadOnly = true
            Me.columndivision.ReadOnly = true
        End Sub
        
        Public Function NewProdManCT_ShowRow() As ProdManCT_ShowRow
            Return CType(Me.NewRow,ProdManCT_ShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ProdManCT_ShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ProdManCT_ShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ProdManCT_ShowRowChangedEvent) Is Nothing) Then
                RaiseEvent ProdManCT_ShowRowChanged(Me, New ProdManCT_ShowRowChangeEvent(CType(e.Row,ProdManCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ProdManCT_ShowRowChangingEvent) Is Nothing) Then
                RaiseEvent ProdManCT_ShowRowChanging(Me, New ProdManCT_ShowRowChangeEvent(CType(e.Row,ProdManCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ProdManCT_ShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent ProdManCT_ShowRowDeleted(Me, New ProdManCT_ShowRowChangeEvent(CType(e.Row,ProdManCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ProdManCT_ShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent ProdManCT_ShowRowDeleting(Me, New ProdManCT_ShowRowChangeEvent(CType(e.Row,ProdManCT_ShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveProdManCT_ShowRow(ByVal row As ProdManCT_ShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ProdManCT_ShowRow
        Inherits DataRow
        
        Private tableProdManCT_Show As ProdManCT_ShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableProdManCT_Show = CType(Me.Table,ProdManCT_ShowDataTable)
        End Sub
        
        Public Property Rowid As Decimal
            Get
                Return CType(Me(Me.tableProdManCT_Show.RowidColumn),Decimal)
            End Get
            Set
                Me(Me.tableProdManCT_Show.RowidColumn) = value
            End Set
        End Property
        
        Public Property PmCode As String
            Get
                Try 
                    Return CType(Me(Me.tableProdManCT_Show.PmCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProdManCT_Show.PmCodeColumn) = value
            End Set
        End Property
        
        Public Property PmName As String
            Get
                Try 
                    Return CType(Me(Me.tableProdManCT_Show.PmNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProdManCT_Show.PmNameColumn) = value
            End Set
        End Property
        
        Public Property Email As String
            Get
                Try 
                    Return CType(Me(Me.tableProdManCT_Show.EmailColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProdManCT_Show.EmailColumn) = value
            End Set
        End Property
        
        Public Property MobileNo As String
            Get
                Try 
                    Return CType(Me(Me.tableProdManCT_Show.MobileNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProdManCT_Show.MobileNoColumn) = value
            End Set
        End Property
        
        Public Property Hire_Date As Date
            Get
                Try 
                    Return CType(Me(Me.tableProdManCT_Show.Hire_DateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProdManCT_Show.Hire_DateColumn) = value
            End Set
        End Property
        
        Public Property Resign_Date As Date
            Get
                Try 
                    Return CType(Me(Me.tableProdManCT_Show.Resign_DateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProdManCT_Show.Resign_DateColumn) = value
            End Set
        End Property
        
        Public Property CreateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableProdManCT_Show.CreateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProdManCT_Show.CreateDateColumn) = value
            End Set
        End Property
        
        Public Property UpdateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableProdManCT_Show.UpdateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProdManCT_Show.UpdateDateColumn) = value
            End Set
        End Property
        
        Public Property LastUser As String
            Get
                Try 
                    Return CType(Me(Me.tableProdManCT_Show.LastUserColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProdManCT_Show.LastUserColumn) = value
            End Set
        End Property
        
        Public Property DivCode As String
            Get
                Try 
                    Return CType(Me(Me.tableProdManCT_Show.DivCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProdManCT_Show.DivCodeColumn) = value
            End Set
        End Property
        
        Public Property division As String
            Get
                Try 
                    Return CType(Me(Me.tableProdManCT_Show.divisionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProdManCT_Show.divisionColumn) = value
            End Set
        End Property
        
        Public Property StartDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableProdManCT_Show.StartDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProdManCT_Show.StartDateColumn) = value
            End Set
        End Property
        
        Public Property EndDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableProdManCT_Show.EndDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProdManCT_Show.EndDateColumn) = value
            End Set
        End Property
        
        Public Function IsPmCodeNull() As Boolean
            Return Me.IsNull(Me.tableProdManCT_Show.PmCodeColumn)
        End Function
        
        Public Sub SetPmCodeNull()
            Me(Me.tableProdManCT_Show.PmCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPmNameNull() As Boolean
            Return Me.IsNull(Me.tableProdManCT_Show.PmNameColumn)
        End Function
        
        Public Sub SetPmNameNull()
            Me(Me.tableProdManCT_Show.PmNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEmailNull() As Boolean
            Return Me.IsNull(Me.tableProdManCT_Show.EmailColumn)
        End Function
        
        Public Sub SetEmailNull()
            Me(Me.tableProdManCT_Show.EmailColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMobileNoNull() As Boolean
            Return Me.IsNull(Me.tableProdManCT_Show.MobileNoColumn)
        End Function
        
        Public Sub SetMobileNoNull()
            Me(Me.tableProdManCT_Show.MobileNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHire_DateNull() As Boolean
            Return Me.IsNull(Me.tableProdManCT_Show.Hire_DateColumn)
        End Function
        
        Public Sub SetHire_DateNull()
            Me(Me.tableProdManCT_Show.Hire_DateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsResign_DateNull() As Boolean
            Return Me.IsNull(Me.tableProdManCT_Show.Resign_DateColumn)
        End Function
        
        Public Sub SetResign_DateNull()
            Me(Me.tableProdManCT_Show.Resign_DateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreateDateNull() As Boolean
            Return Me.IsNull(Me.tableProdManCT_Show.CreateDateColumn)
        End Function
        
        Public Sub SetCreateDateNull()
            Me(Me.tableProdManCT_Show.CreateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUpdateDateNull() As Boolean
            Return Me.IsNull(Me.tableProdManCT_Show.UpdateDateColumn)
        End Function
        
        Public Sub SetUpdateDateNull()
            Me(Me.tableProdManCT_Show.UpdateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLastUserNull() As Boolean
            Return Me.IsNull(Me.tableProdManCT_Show.LastUserColumn)
        End Function
        
        Public Sub SetLastUserNull()
            Me(Me.tableProdManCT_Show.LastUserColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDivCodeNull() As Boolean
            Return Me.IsNull(Me.tableProdManCT_Show.DivCodeColumn)
        End Function
        
        Public Sub SetDivCodeNull()
            Me(Me.tableProdManCT_Show.DivCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdivisionNull() As Boolean
            Return Me.IsNull(Me.tableProdManCT_Show.divisionColumn)
        End Function
        
        Public Sub SetdivisionNull()
            Me(Me.tableProdManCT_Show.divisionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStartDateNull() As Boolean
            Return Me.IsNull(Me.tableProdManCT_Show.StartDateColumn)
        End Function
        
        Public Sub SetStartDateNull()
            Me(Me.tableProdManCT_Show.StartDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEndDateNull() As Boolean
            Return Me.IsNull(Me.tableProdManCT_Show.EndDateColumn)
        End Function
        
        Public Sub SetEndDateNull()
            Me(Me.tableProdManCT_Show.EndDateColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ProdManCT_ShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ProdManCT_ShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ProdManCT_ShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ProdManCT_ShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ItemPriceHist_DS_ShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnRowid As DataColumn
        
        Private columnItemCode As DataColumn
        
        Private columnStart_Date As DataColumn
        
        Private columnEnd_Date As DataColumn
        
        Private columnSellingPrice As DataColumn
        
        Private columnCreateDate As DataColumn
        
        Private columnUpdateDate As DataColumn
        
        Private columnLastUser As DataColumn
        
        Friend Sub New()
            MyBase.New("ItemPriceHist_DS_Show")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property RowidColumn As DataColumn
            Get
                Return Me.columnRowid
            End Get
        End Property
        
        Friend ReadOnly Property ItemCodeColumn As DataColumn
            Get
                Return Me.columnItemCode
            End Get
        End Property
        
        Friend ReadOnly Property Start_DateColumn As DataColumn
            Get
                Return Me.columnStart_Date
            End Get
        End Property
        
        Friend ReadOnly Property End_DateColumn As DataColumn
            Get
                Return Me.columnEnd_Date
            End Get
        End Property
        
        Friend ReadOnly Property SellingPriceColumn As DataColumn
            Get
                Return Me.columnSellingPrice
            End Get
        End Property
        
        Friend ReadOnly Property CreateDateColumn As DataColumn
            Get
                Return Me.columnCreateDate
            End Get
        End Property
        
        Friend ReadOnly Property UpdateDateColumn As DataColumn
            Get
                Return Me.columnUpdateDate
            End Get
        End Property
        
        Friend ReadOnly Property LastUserColumn As DataColumn
            Get
                Return Me.columnLastUser
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ItemPriceHist_DS_ShowRow
            Get
                Return CType(Me.Rows(index),ItemPriceHist_DS_ShowRow)
            End Get
        End Property
        
        Public Event ItemPriceHist_DS_ShowRowChanged As ItemPriceHist_DS_ShowRowChangeEventHandler
        
        Public Event ItemPriceHist_DS_ShowRowChanging As ItemPriceHist_DS_ShowRowChangeEventHandler
        
        Public Event ItemPriceHist_DS_ShowRowDeleted As ItemPriceHist_DS_ShowRowChangeEventHandler
        
        Public Event ItemPriceHist_DS_ShowRowDeleting As ItemPriceHist_DS_ShowRowChangeEventHandler
        
        Public Overloads Sub AddItemPriceHist_DS_ShowRow(ByVal row As ItemPriceHist_DS_ShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddItemPriceHist_DS_ShowRow(ByVal Rowid As Integer, ByVal ItemCode As String, ByVal Start_Date As Date, ByVal End_Date As Date, ByVal SellingPrice As Double, ByVal CreateDate As Date, ByVal UpdateDate As Date, ByVal LastUser As String) As ItemPriceHist_DS_ShowRow
            Dim rowItemPriceHist_DS_ShowRow As ItemPriceHist_DS_ShowRow = CType(Me.NewRow,ItemPriceHist_DS_ShowRow)
            rowItemPriceHist_DS_ShowRow.ItemArray = New Object() {Rowid, ItemCode, Start_Date, End_Date, SellingPrice, CreateDate, UpdateDate, LastUser}
            Me.Rows.Add(rowItemPriceHist_DS_ShowRow)
            Return rowItemPriceHist_DS_ShowRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ItemPriceHist_DS_ShowDataTable = CType(MyBase.Clone,ItemPriceHist_DS_ShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ItemPriceHist_DS_ShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnRowid = Me.Columns("Rowid")
            Me.columnItemCode = Me.Columns("ItemCode")
            Me.columnStart_Date = Me.Columns("Start_Date")
            Me.columnEnd_Date = Me.Columns("End_Date")
            Me.columnSellingPrice = Me.Columns("SellingPrice")
            Me.columnCreateDate = Me.Columns("CreateDate")
            Me.columnUpdateDate = Me.Columns("UpdateDate")
            Me.columnLastUser = Me.Columns("LastUser")
        End Sub
        
        Private Sub InitClass()
            Me.columnRowid = New DataColumn("Rowid", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRowid)
            Me.columnItemCode = New DataColumn("ItemCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemCode)
            Me.columnStart_Date = New DataColumn("Start_Date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStart_Date)
            Me.columnEnd_Date = New DataColumn("End_Date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEnd_Date)
            Me.columnSellingPrice = New DataColumn("SellingPrice", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSellingPrice)
            Me.columnCreateDate = New DataColumn("CreateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreateDate)
            Me.columnUpdateDate = New DataColumn("UpdateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUpdateDate)
            Me.columnLastUser = New DataColumn("LastUser", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLastUser)
        End Sub
        
        Public Function NewItemPriceHist_DS_ShowRow() As ItemPriceHist_DS_ShowRow
            Return CType(Me.NewRow,ItemPriceHist_DS_ShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ItemPriceHist_DS_ShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ItemPriceHist_DS_ShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ItemPriceHist_DS_ShowRowChangedEvent) Is Nothing) Then
                RaiseEvent ItemPriceHist_DS_ShowRowChanged(Me, New ItemPriceHist_DS_ShowRowChangeEvent(CType(e.Row,ItemPriceHist_DS_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ItemPriceHist_DS_ShowRowChangingEvent) Is Nothing) Then
                RaiseEvent ItemPriceHist_DS_ShowRowChanging(Me, New ItemPriceHist_DS_ShowRowChangeEvent(CType(e.Row,ItemPriceHist_DS_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ItemPriceHist_DS_ShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent ItemPriceHist_DS_ShowRowDeleted(Me, New ItemPriceHist_DS_ShowRowChangeEvent(CType(e.Row,ItemPriceHist_DS_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ItemPriceHist_DS_ShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent ItemPriceHist_DS_ShowRowDeleting(Me, New ItemPriceHist_DS_ShowRowChangeEvent(CType(e.Row,ItemPriceHist_DS_ShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveItemPriceHist_DS_ShowRow(ByVal row As ItemPriceHist_DS_ShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ItemPriceHist_DS_ShowRow
        Inherits DataRow
        
        Private tableItemPriceHist_DS_Show As ItemPriceHist_DS_ShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableItemPriceHist_DS_Show = CType(Me.Table,ItemPriceHist_DS_ShowDataTable)
        End Sub
        
        Public Property Rowid As Integer
            Get
                Try 
                    Return CType(Me(Me.tableItemPriceHist_DS_Show.RowidColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemPriceHist_DS_Show.RowidColumn) = value
            End Set
        End Property
        
        Public Property ItemCode As String
            Get
                Try 
                    Return CType(Me(Me.tableItemPriceHist_DS_Show.ItemCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemPriceHist_DS_Show.ItemCodeColumn) = value
            End Set
        End Property
        
        Public Property Start_Date As Date
            Get
                Try 
                    Return CType(Me(Me.tableItemPriceHist_DS_Show.Start_DateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemPriceHist_DS_Show.Start_DateColumn) = value
            End Set
        End Property
        
        Public Property End_Date As Date
            Get
                Try 
                    Return CType(Me(Me.tableItemPriceHist_DS_Show.End_DateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemPriceHist_DS_Show.End_DateColumn) = value
            End Set
        End Property
        
        Public Property SellingPrice As Double
            Get
                Try 
                    Return CType(Me(Me.tableItemPriceHist_DS_Show.SellingPriceColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemPriceHist_DS_Show.SellingPriceColumn) = value
            End Set
        End Property
        
        Public Property CreateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableItemPriceHist_DS_Show.CreateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemPriceHist_DS_Show.CreateDateColumn) = value
            End Set
        End Property
        
        Public Property UpdateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableItemPriceHist_DS_Show.UpdateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemPriceHist_DS_Show.UpdateDateColumn) = value
            End Set
        End Property
        
        Public Property LastUser As String
            Get
                Try 
                    Return CType(Me(Me.tableItemPriceHist_DS_Show.LastUserColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemPriceHist_DS_Show.LastUserColumn) = value
            End Set
        End Property
        
        Public Function IsRowidNull() As Boolean
            Return Me.IsNull(Me.tableItemPriceHist_DS_Show.RowidColumn)
        End Function
        
        Public Sub SetRowidNull()
            Me(Me.tableItemPriceHist_DS_Show.RowidColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItemCodeNull() As Boolean
            Return Me.IsNull(Me.tableItemPriceHist_DS_Show.ItemCodeColumn)
        End Function
        
        Public Sub SetItemCodeNull()
            Me(Me.tableItemPriceHist_DS_Show.ItemCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStart_DateNull() As Boolean
            Return Me.IsNull(Me.tableItemPriceHist_DS_Show.Start_DateColumn)
        End Function
        
        Public Sub SetStart_DateNull()
            Me(Me.tableItemPriceHist_DS_Show.Start_DateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEnd_DateNull() As Boolean
            Return Me.IsNull(Me.tableItemPriceHist_DS_Show.End_DateColumn)
        End Function
        
        Public Sub SetEnd_DateNull()
            Me(Me.tableItemPriceHist_DS_Show.End_DateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSellingPriceNull() As Boolean
            Return Me.IsNull(Me.tableItemPriceHist_DS_Show.SellingPriceColumn)
        End Function
        
        Public Sub SetSellingPriceNull()
            Me(Me.tableItemPriceHist_DS_Show.SellingPriceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreateDateNull() As Boolean
            Return Me.IsNull(Me.tableItemPriceHist_DS_Show.CreateDateColumn)
        End Function
        
        Public Sub SetCreateDateNull()
            Me(Me.tableItemPriceHist_DS_Show.CreateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUpdateDateNull() As Boolean
            Return Me.IsNull(Me.tableItemPriceHist_DS_Show.UpdateDateColumn)
        End Function
        
        Public Sub SetUpdateDateNull()
            Me(Me.tableItemPriceHist_DS_Show.UpdateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLastUserNull() As Boolean
            Return Me.IsNull(Me.tableItemPriceHist_DS_Show.LastUserColumn)
        End Function
        
        Public Sub SetLastUserNull()
            Me(Me.tableItemPriceHist_DS_Show.LastUserColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ItemPriceHist_DS_ShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ItemPriceHist_DS_ShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ItemPriceHist_DS_ShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ItemPriceHist_DS_ShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ItemDivision_ShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnRowid As DataColumn
        
        Private columnItemCode As DataColumn
        
        Private columnDivCode As DataColumn
        
        Private columnDivName As DataColumn
        
        Private columnStartDate As DataColumn
        
        Private columnEndDate As DataColumn
        
        Private columnCreateDate As DataColumn
        
        Private columnUpdateDate As DataColumn
        
        Private columnLastUser As DataColumn
        
        Friend Sub New()
            MyBase.New("ItemDivision_Show")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property RowidColumn As DataColumn
            Get
                Return Me.columnRowid
            End Get
        End Property
        
        Friend ReadOnly Property ItemCodeColumn As DataColumn
            Get
                Return Me.columnItemCode
            End Get
        End Property
        
        Friend ReadOnly Property DivCodeColumn As DataColumn
            Get
                Return Me.columnDivCode
            End Get
        End Property
        
        Friend ReadOnly Property DivNameColumn As DataColumn
            Get
                Return Me.columnDivName
            End Get
        End Property
        
        Friend ReadOnly Property StartDateColumn As DataColumn
            Get
                Return Me.columnStartDate
            End Get
        End Property
        
        Friend ReadOnly Property EndDateColumn As DataColumn
            Get
                Return Me.columnEndDate
            End Get
        End Property
        
        Friend ReadOnly Property CreateDateColumn As DataColumn
            Get
                Return Me.columnCreateDate
            End Get
        End Property
        
        Friend ReadOnly Property UpdateDateColumn As DataColumn
            Get
                Return Me.columnUpdateDate
            End Get
        End Property
        
        Friend ReadOnly Property LastUserColumn As DataColumn
            Get
                Return Me.columnLastUser
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ItemDivision_ShowRow
            Get
                Return CType(Me.Rows(index),ItemDivision_ShowRow)
            End Get
        End Property
        
        Public Event ItemDivision_ShowRowChanged As ItemDivision_ShowRowChangeEventHandler
        
        Public Event ItemDivision_ShowRowChanging As ItemDivision_ShowRowChangeEventHandler
        
        Public Event ItemDivision_ShowRowDeleted As ItemDivision_ShowRowChangeEventHandler
        
        Public Event ItemDivision_ShowRowDeleting As ItemDivision_ShowRowChangeEventHandler
        
        Public Overloads Sub AddItemDivision_ShowRow(ByVal row As ItemDivision_ShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddItemDivision_ShowRow(ByVal Rowid As Integer, ByVal ItemCode As String, ByVal DivCode As String, ByVal DivName As String, ByVal StartDate As Date, ByVal EndDate As Date, ByVal CreateDate As Date, ByVal UpdateDate As Date, ByVal LastUser As String) As ItemDivision_ShowRow
            Dim rowItemDivision_ShowRow As ItemDivision_ShowRow = CType(Me.NewRow,ItemDivision_ShowRow)
            rowItemDivision_ShowRow.ItemArray = New Object() {Rowid, ItemCode, DivCode, DivName, StartDate, EndDate, CreateDate, UpdateDate, LastUser}
            Me.Rows.Add(rowItemDivision_ShowRow)
            Return rowItemDivision_ShowRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ItemDivision_ShowDataTable = CType(MyBase.Clone,ItemDivision_ShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ItemDivision_ShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnRowid = Me.Columns("Rowid")
            Me.columnItemCode = Me.Columns("ItemCode")
            Me.columnDivCode = Me.Columns("DivCode")
            Me.columnDivName = Me.Columns("DivName")
            Me.columnStartDate = Me.Columns("StartDate")
            Me.columnEndDate = Me.Columns("EndDate")
            Me.columnCreateDate = Me.Columns("CreateDate")
            Me.columnUpdateDate = Me.Columns("UpdateDate")
            Me.columnLastUser = Me.Columns("LastUser")
        End Sub
        
        Private Sub InitClass()
            Me.columnRowid = New DataColumn("Rowid", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRowid)
            Me.columnItemCode = New DataColumn("ItemCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemCode)
            Me.columnDivCode = New DataColumn("DivCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDivCode)
            Me.columnDivName = New DataColumn("DivName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDivName)
            Me.columnStartDate = New DataColumn("StartDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStartDate)
            Me.columnEndDate = New DataColumn("EndDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEndDate)
            Me.columnCreateDate = New DataColumn("CreateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreateDate)
            Me.columnUpdateDate = New DataColumn("UpdateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUpdateDate)
            Me.columnLastUser = New DataColumn("LastUser", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLastUser)
        End Sub
        
        Public Function NewItemDivision_ShowRow() As ItemDivision_ShowRow
            Return CType(Me.NewRow,ItemDivision_ShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ItemDivision_ShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ItemDivision_ShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ItemDivision_ShowRowChangedEvent) Is Nothing) Then
                RaiseEvent ItemDivision_ShowRowChanged(Me, New ItemDivision_ShowRowChangeEvent(CType(e.Row,ItemDivision_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ItemDivision_ShowRowChangingEvent) Is Nothing) Then
                RaiseEvent ItemDivision_ShowRowChanging(Me, New ItemDivision_ShowRowChangeEvent(CType(e.Row,ItemDivision_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ItemDivision_ShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent ItemDivision_ShowRowDeleted(Me, New ItemDivision_ShowRowChangeEvent(CType(e.Row,ItemDivision_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ItemDivision_ShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent ItemDivision_ShowRowDeleting(Me, New ItemDivision_ShowRowChangeEvent(CType(e.Row,ItemDivision_ShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveItemDivision_ShowRow(ByVal row As ItemDivision_ShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ItemDivision_ShowRow
        Inherits DataRow
        
        Private tableItemDivision_Show As ItemDivision_ShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableItemDivision_Show = CType(Me.Table,ItemDivision_ShowDataTable)
        End Sub
        
        Public Property Rowid As Integer
            Get
                Try 
                    Return CType(Me(Me.tableItemDivision_Show.RowidColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemDivision_Show.RowidColumn) = value
            End Set
        End Property
        
        Public Property ItemCode As String
            Get
                Try 
                    Return CType(Me(Me.tableItemDivision_Show.ItemCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemDivision_Show.ItemCodeColumn) = value
            End Set
        End Property
        
        Public Property DivCode As String
            Get
                Try 
                    Return CType(Me(Me.tableItemDivision_Show.DivCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemDivision_Show.DivCodeColumn) = value
            End Set
        End Property
        
        Public Property DivName As String
            Get
                Try 
                    Return CType(Me(Me.tableItemDivision_Show.DivNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemDivision_Show.DivNameColumn) = value
            End Set
        End Property
        
        Public Property StartDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableItemDivision_Show.StartDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemDivision_Show.StartDateColumn) = value
            End Set
        End Property
        
        Public Property EndDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableItemDivision_Show.EndDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemDivision_Show.EndDateColumn) = value
            End Set
        End Property
        
        Public Property CreateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableItemDivision_Show.CreateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemDivision_Show.CreateDateColumn) = value
            End Set
        End Property
        
        Public Property UpdateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableItemDivision_Show.UpdateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemDivision_Show.UpdateDateColumn) = value
            End Set
        End Property
        
        Public Property LastUser As String
            Get
                Try 
                    Return CType(Me(Me.tableItemDivision_Show.LastUserColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemDivision_Show.LastUserColumn) = value
            End Set
        End Property
        
        Public Function IsRowidNull() As Boolean
            Return Me.IsNull(Me.tableItemDivision_Show.RowidColumn)
        End Function
        
        Public Sub SetRowidNull()
            Me(Me.tableItemDivision_Show.RowidColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItemCodeNull() As Boolean
            Return Me.IsNull(Me.tableItemDivision_Show.ItemCodeColumn)
        End Function
        
        Public Sub SetItemCodeNull()
            Me(Me.tableItemDivision_Show.ItemCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDivCodeNull() As Boolean
            Return Me.IsNull(Me.tableItemDivision_Show.DivCodeColumn)
        End Function
        
        Public Sub SetDivCodeNull()
            Me(Me.tableItemDivision_Show.DivCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDivNameNull() As Boolean
            Return Me.IsNull(Me.tableItemDivision_Show.DivNameColumn)
        End Function
        
        Public Sub SetDivNameNull()
            Me(Me.tableItemDivision_Show.DivNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStartDateNull() As Boolean
            Return Me.IsNull(Me.tableItemDivision_Show.StartDateColumn)
        End Function
        
        Public Sub SetStartDateNull()
            Me(Me.tableItemDivision_Show.StartDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEndDateNull() As Boolean
            Return Me.IsNull(Me.tableItemDivision_Show.EndDateColumn)
        End Function
        
        Public Sub SetEndDateNull()
            Me(Me.tableItemDivision_Show.EndDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreateDateNull() As Boolean
            Return Me.IsNull(Me.tableItemDivision_Show.CreateDateColumn)
        End Function
        
        Public Sub SetCreateDateNull()
            Me(Me.tableItemDivision_Show.CreateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUpdateDateNull() As Boolean
            Return Me.IsNull(Me.tableItemDivision_Show.UpdateDateColumn)
        End Function
        
        Public Sub SetUpdateDateNull()
            Me(Me.tableItemDivision_Show.UpdateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLastUserNull() As Boolean
            Return Me.IsNull(Me.tableItemDivision_Show.LastUserColumn)
        End Function
        
        Public Sub SetLastUserNull()
            Me(Me.tableItemDivision_Show.LastUserColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ItemDivision_ShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ItemDivision_ShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ItemDivision_ShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ItemDivision_ShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ItemPrincipal_ShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnRowid As DataColumn
        
        Private columnItemCode As DataColumn
        
        Private columnPrinCode As DataColumn
        
        Private columnPrinName As DataColumn
        
        Private columnStart_Date As DataColumn
        
        Private columnEnd_Date As DataColumn
        
        Private columnCreateDate As DataColumn
        
        Private columnUpdateDate As DataColumn
        
        Private columnLastUser As DataColumn
        
        Friend Sub New()
            MyBase.New("ItemPrincipal_Show")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property RowidColumn As DataColumn
            Get
                Return Me.columnRowid
            End Get
        End Property
        
        Friend ReadOnly Property ItemCodeColumn As DataColumn
            Get
                Return Me.columnItemCode
            End Get
        End Property
        
        Friend ReadOnly Property PrinCodeColumn As DataColumn
            Get
                Return Me.columnPrinCode
            End Get
        End Property
        
        Friend ReadOnly Property PrinNameColumn As DataColumn
            Get
                Return Me.columnPrinName
            End Get
        End Property
        
        Friend ReadOnly Property Start_DateColumn As DataColumn
            Get
                Return Me.columnStart_Date
            End Get
        End Property
        
        Friend ReadOnly Property End_DateColumn As DataColumn
            Get
                Return Me.columnEnd_Date
            End Get
        End Property
        
        Friend ReadOnly Property CreateDateColumn As DataColumn
            Get
                Return Me.columnCreateDate
            End Get
        End Property
        
        Friend ReadOnly Property UpdateDateColumn As DataColumn
            Get
                Return Me.columnUpdateDate
            End Get
        End Property
        
        Friend ReadOnly Property LastUserColumn As DataColumn
            Get
                Return Me.columnLastUser
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ItemPrincipal_ShowRow
            Get
                Return CType(Me.Rows(index),ItemPrincipal_ShowRow)
            End Get
        End Property
        
        Public Event ItemPrincipal_ShowRowChanged As ItemPrincipal_ShowRowChangeEventHandler
        
        Public Event ItemPrincipal_ShowRowChanging As ItemPrincipal_ShowRowChangeEventHandler
        
        Public Event ItemPrincipal_ShowRowDeleted As ItemPrincipal_ShowRowChangeEventHandler
        
        Public Event ItemPrincipal_ShowRowDeleting As ItemPrincipal_ShowRowChangeEventHandler
        
        Public Overloads Sub AddItemPrincipal_ShowRow(ByVal row As ItemPrincipal_ShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddItemPrincipal_ShowRow(ByVal Rowid As Integer, ByVal ItemCode As String, ByVal PrinCode As String, ByVal PrinName As String, ByVal Start_Date As Date, ByVal End_Date As Date, ByVal CreateDate As Date, ByVal UpdateDate As Date, ByVal LastUser As String) As ItemPrincipal_ShowRow
            Dim rowItemPrincipal_ShowRow As ItemPrincipal_ShowRow = CType(Me.NewRow,ItemPrincipal_ShowRow)
            rowItemPrincipal_ShowRow.ItemArray = New Object() {Rowid, ItemCode, PrinCode, PrinName, Start_Date, End_Date, CreateDate, UpdateDate, LastUser}
            Me.Rows.Add(rowItemPrincipal_ShowRow)
            Return rowItemPrincipal_ShowRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ItemPrincipal_ShowDataTable = CType(MyBase.Clone,ItemPrincipal_ShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ItemPrincipal_ShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnRowid = Me.Columns("Rowid")
            Me.columnItemCode = Me.Columns("ItemCode")
            Me.columnPrinCode = Me.Columns("PrinCode")
            Me.columnPrinName = Me.Columns("PrinName")
            Me.columnStart_Date = Me.Columns("Start_Date")
            Me.columnEnd_Date = Me.Columns("End_Date")
            Me.columnCreateDate = Me.Columns("CreateDate")
            Me.columnUpdateDate = Me.Columns("UpdateDate")
            Me.columnLastUser = Me.Columns("LastUser")
        End Sub
        
        Private Sub InitClass()
            Me.columnRowid = New DataColumn("Rowid", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRowid)
            Me.columnItemCode = New DataColumn("ItemCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemCode)
            Me.columnPrinCode = New DataColumn("PrinCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrinCode)
            Me.columnPrinName = New DataColumn("PrinName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrinName)
            Me.columnStart_Date = New DataColumn("Start_Date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStart_Date)
            Me.columnEnd_Date = New DataColumn("End_Date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEnd_Date)
            Me.columnCreateDate = New DataColumn("CreateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreateDate)
            Me.columnUpdateDate = New DataColumn("UpdateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUpdateDate)
            Me.columnLastUser = New DataColumn("LastUser", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLastUser)
        End Sub
        
        Public Function NewItemPrincipal_ShowRow() As ItemPrincipal_ShowRow
            Return CType(Me.NewRow,ItemPrincipal_ShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ItemPrincipal_ShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ItemPrincipal_ShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ItemPrincipal_ShowRowChangedEvent) Is Nothing) Then
                RaiseEvent ItemPrincipal_ShowRowChanged(Me, New ItemPrincipal_ShowRowChangeEvent(CType(e.Row,ItemPrincipal_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ItemPrincipal_ShowRowChangingEvent) Is Nothing) Then
                RaiseEvent ItemPrincipal_ShowRowChanging(Me, New ItemPrincipal_ShowRowChangeEvent(CType(e.Row,ItemPrincipal_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ItemPrincipal_ShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent ItemPrincipal_ShowRowDeleted(Me, New ItemPrincipal_ShowRowChangeEvent(CType(e.Row,ItemPrincipal_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ItemPrincipal_ShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent ItemPrincipal_ShowRowDeleting(Me, New ItemPrincipal_ShowRowChangeEvent(CType(e.Row,ItemPrincipal_ShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveItemPrincipal_ShowRow(ByVal row As ItemPrincipal_ShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ItemPrincipal_ShowRow
        Inherits DataRow
        
        Private tableItemPrincipal_Show As ItemPrincipal_ShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableItemPrincipal_Show = CType(Me.Table,ItemPrincipal_ShowDataTable)
        End Sub
        
        Public Property Rowid As Integer
            Get
                Try 
                    Return CType(Me(Me.tableItemPrincipal_Show.RowidColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemPrincipal_Show.RowidColumn) = value
            End Set
        End Property
        
        Public Property ItemCode As String
            Get
                Try 
                    Return CType(Me(Me.tableItemPrincipal_Show.ItemCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemPrincipal_Show.ItemCodeColumn) = value
            End Set
        End Property
        
        Public Property PrinCode As String
            Get
                Try 
                    Return CType(Me(Me.tableItemPrincipal_Show.PrinCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemPrincipal_Show.PrinCodeColumn) = value
            End Set
        End Property
        
        Public Property PrinName As String
            Get
                Try 
                    Return CType(Me(Me.tableItemPrincipal_Show.PrinNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemPrincipal_Show.PrinNameColumn) = value
            End Set
        End Property
        
        Public Property Start_Date As Date
            Get
                Try 
                    Return CType(Me(Me.tableItemPrincipal_Show.Start_DateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemPrincipal_Show.Start_DateColumn) = value
            End Set
        End Property
        
        Public Property End_Date As Date
            Get
                Try 
                    Return CType(Me(Me.tableItemPrincipal_Show.End_DateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemPrincipal_Show.End_DateColumn) = value
            End Set
        End Property
        
        Public Property CreateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableItemPrincipal_Show.CreateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemPrincipal_Show.CreateDateColumn) = value
            End Set
        End Property
        
        Public Property UpdateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableItemPrincipal_Show.UpdateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemPrincipal_Show.UpdateDateColumn) = value
            End Set
        End Property
        
        Public Property LastUser As String
            Get
                Try 
                    Return CType(Me(Me.tableItemPrincipal_Show.LastUserColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemPrincipal_Show.LastUserColumn) = value
            End Set
        End Property
        
        Public Function IsRowidNull() As Boolean
            Return Me.IsNull(Me.tableItemPrincipal_Show.RowidColumn)
        End Function
        
        Public Sub SetRowidNull()
            Me(Me.tableItemPrincipal_Show.RowidColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItemCodeNull() As Boolean
            Return Me.IsNull(Me.tableItemPrincipal_Show.ItemCodeColumn)
        End Function
        
        Public Sub SetItemCodeNull()
            Me(Me.tableItemPrincipal_Show.ItemCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPrinCodeNull() As Boolean
            Return Me.IsNull(Me.tableItemPrincipal_Show.PrinCodeColumn)
        End Function
        
        Public Sub SetPrinCodeNull()
            Me(Me.tableItemPrincipal_Show.PrinCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPrinNameNull() As Boolean
            Return Me.IsNull(Me.tableItemPrincipal_Show.PrinNameColumn)
        End Function
        
        Public Sub SetPrinNameNull()
            Me(Me.tableItemPrincipal_Show.PrinNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStart_DateNull() As Boolean
            Return Me.IsNull(Me.tableItemPrincipal_Show.Start_DateColumn)
        End Function
        
        Public Sub SetStart_DateNull()
            Me(Me.tableItemPrincipal_Show.Start_DateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEnd_DateNull() As Boolean
            Return Me.IsNull(Me.tableItemPrincipal_Show.End_DateColumn)
        End Function
        
        Public Sub SetEnd_DateNull()
            Me(Me.tableItemPrincipal_Show.End_DateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreateDateNull() As Boolean
            Return Me.IsNull(Me.tableItemPrincipal_Show.CreateDateColumn)
        End Function
        
        Public Sub SetCreateDateNull()
            Me(Me.tableItemPrincipal_Show.CreateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUpdateDateNull() As Boolean
            Return Me.IsNull(Me.tableItemPrincipal_Show.UpdateDateColumn)
        End Function
        
        Public Sub SetUpdateDateNull()
            Me(Me.tableItemPrincipal_Show.UpdateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLastUserNull() As Boolean
            Return Me.IsNull(Me.tableItemPrincipal_Show.LastUserColumn)
        End Function
        
        Public Sub SetLastUserNull()
            Me(Me.tableItemPrincipal_Show.LastUserColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ItemPrincipal_ShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ItemPrincipal_ShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ItemPrincipal_ShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ItemPrincipal_ShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ItemNSM_ShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnRowid As DataColumn
        
        Private columnItemCode As DataColumn
        
        Private columnNSMCode As DataColumn
        
        Private columnNSMName As DataColumn
        
        Private columnStart_Date As DataColumn
        
        Private columnEnd_Date As DataColumn
        
        Private columnCreateDate As DataColumn
        
        Private columnUpdateDate As DataColumn
        
        Private columnLastUser As DataColumn
        
        Friend Sub New()
            MyBase.New("ItemNSM_Show")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property RowidColumn As DataColumn
            Get
                Return Me.columnRowid
            End Get
        End Property
        
        Friend ReadOnly Property ItemCodeColumn As DataColumn
            Get
                Return Me.columnItemCode
            End Get
        End Property
        
        Friend ReadOnly Property NSMCodeColumn As DataColumn
            Get
                Return Me.columnNSMCode
            End Get
        End Property
        
        Friend ReadOnly Property NSMNameColumn As DataColumn
            Get
                Return Me.columnNSMName
            End Get
        End Property
        
        Friend ReadOnly Property Start_DateColumn As DataColumn
            Get
                Return Me.columnStart_Date
            End Get
        End Property
        
        Friend ReadOnly Property End_DateColumn As DataColumn
            Get
                Return Me.columnEnd_Date
            End Get
        End Property
        
        Friend ReadOnly Property CreateDateColumn As DataColumn
            Get
                Return Me.columnCreateDate
            End Get
        End Property
        
        Friend ReadOnly Property UpdateDateColumn As DataColumn
            Get
                Return Me.columnUpdateDate
            End Get
        End Property
        
        Friend ReadOnly Property LastUserColumn As DataColumn
            Get
                Return Me.columnLastUser
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ItemNSM_ShowRow
            Get
                Return CType(Me.Rows(index),ItemNSM_ShowRow)
            End Get
        End Property
        
        Public Event ItemNSM_ShowRowChanged As ItemNSM_ShowRowChangeEventHandler
        
        Public Event ItemNSM_ShowRowChanging As ItemNSM_ShowRowChangeEventHandler
        
        Public Event ItemNSM_ShowRowDeleted As ItemNSM_ShowRowChangeEventHandler
        
        Public Event ItemNSM_ShowRowDeleting As ItemNSM_ShowRowChangeEventHandler
        
        Public Overloads Sub AddItemNSM_ShowRow(ByVal row As ItemNSM_ShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddItemNSM_ShowRow(ByVal Rowid As Integer, ByVal ItemCode As String, ByVal NSMCode As String, ByVal NSMName As String, ByVal Start_Date As Date, ByVal End_Date As Date, ByVal CreateDate As Date, ByVal UpdateDate As Date, ByVal LastUser As String) As ItemNSM_ShowRow
            Dim rowItemNSM_ShowRow As ItemNSM_ShowRow = CType(Me.NewRow,ItemNSM_ShowRow)
            rowItemNSM_ShowRow.ItemArray = New Object() {Rowid, ItemCode, NSMCode, NSMName, Start_Date, End_Date, CreateDate, UpdateDate, LastUser}
            Me.Rows.Add(rowItemNSM_ShowRow)
            Return rowItemNSM_ShowRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ItemNSM_ShowDataTable = CType(MyBase.Clone,ItemNSM_ShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ItemNSM_ShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnRowid = Me.Columns("Rowid")
            Me.columnItemCode = Me.Columns("ItemCode")
            Me.columnNSMCode = Me.Columns("NSMCode")
            Me.columnNSMName = Me.Columns("NSMName")
            Me.columnStart_Date = Me.Columns("Start_Date")
            Me.columnEnd_Date = Me.Columns("End_Date")
            Me.columnCreateDate = Me.Columns("CreateDate")
            Me.columnUpdateDate = Me.Columns("UpdateDate")
            Me.columnLastUser = Me.Columns("LastUser")
        End Sub
        
        Private Sub InitClass()
            Me.columnRowid = New DataColumn("Rowid", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRowid)
            Me.columnItemCode = New DataColumn("ItemCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemCode)
            Me.columnNSMCode = New DataColumn("NSMCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNSMCode)
            Me.columnNSMName = New DataColumn("NSMName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNSMName)
            Me.columnStart_Date = New DataColumn("Start_Date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStart_Date)
            Me.columnEnd_Date = New DataColumn("End_Date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEnd_Date)
            Me.columnCreateDate = New DataColumn("CreateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreateDate)
            Me.columnUpdateDate = New DataColumn("UpdateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUpdateDate)
            Me.columnLastUser = New DataColumn("LastUser", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLastUser)
        End Sub
        
        Public Function NewItemNSM_ShowRow() As ItemNSM_ShowRow
            Return CType(Me.NewRow,ItemNSM_ShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ItemNSM_ShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ItemNSM_ShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ItemNSM_ShowRowChangedEvent) Is Nothing) Then
                RaiseEvent ItemNSM_ShowRowChanged(Me, New ItemNSM_ShowRowChangeEvent(CType(e.Row,ItemNSM_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ItemNSM_ShowRowChangingEvent) Is Nothing) Then
                RaiseEvent ItemNSM_ShowRowChanging(Me, New ItemNSM_ShowRowChangeEvent(CType(e.Row,ItemNSM_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ItemNSM_ShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent ItemNSM_ShowRowDeleted(Me, New ItemNSM_ShowRowChangeEvent(CType(e.Row,ItemNSM_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ItemNSM_ShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent ItemNSM_ShowRowDeleting(Me, New ItemNSM_ShowRowChangeEvent(CType(e.Row,ItemNSM_ShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveItemNSM_ShowRow(ByVal row As ItemNSM_ShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ItemNSM_ShowRow
        Inherits DataRow
        
        Private tableItemNSM_Show As ItemNSM_ShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableItemNSM_Show = CType(Me.Table,ItemNSM_ShowDataTable)
        End Sub
        
        Public Property Rowid As Integer
            Get
                Try 
                    Return CType(Me(Me.tableItemNSM_Show.RowidColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemNSM_Show.RowidColumn) = value
            End Set
        End Property
        
        Public Property ItemCode As String
            Get
                Try 
                    Return CType(Me(Me.tableItemNSM_Show.ItemCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemNSM_Show.ItemCodeColumn) = value
            End Set
        End Property
        
        Public Property NSMCode As String
            Get
                Try 
                    Return CType(Me(Me.tableItemNSM_Show.NSMCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemNSM_Show.NSMCodeColumn) = value
            End Set
        End Property
        
        Public Property NSMName As String
            Get
                Try 
                    Return CType(Me(Me.tableItemNSM_Show.NSMNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemNSM_Show.NSMNameColumn) = value
            End Set
        End Property
        
        Public Property Start_Date As Date
            Get
                Try 
                    Return CType(Me(Me.tableItemNSM_Show.Start_DateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemNSM_Show.Start_DateColumn) = value
            End Set
        End Property
        
        Public Property End_Date As Date
            Get
                Try 
                    Return CType(Me(Me.tableItemNSM_Show.End_DateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemNSM_Show.End_DateColumn) = value
            End Set
        End Property
        
        Public Property CreateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableItemNSM_Show.CreateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemNSM_Show.CreateDateColumn) = value
            End Set
        End Property
        
        Public Property UpdateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableItemNSM_Show.UpdateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemNSM_Show.UpdateDateColumn) = value
            End Set
        End Property
        
        Public Property LastUser As String
            Get
                Try 
                    Return CType(Me(Me.tableItemNSM_Show.LastUserColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemNSM_Show.LastUserColumn) = value
            End Set
        End Property
        
        Public Function IsRowidNull() As Boolean
            Return Me.IsNull(Me.tableItemNSM_Show.RowidColumn)
        End Function
        
        Public Sub SetRowidNull()
            Me(Me.tableItemNSM_Show.RowidColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItemCodeNull() As Boolean
            Return Me.IsNull(Me.tableItemNSM_Show.ItemCodeColumn)
        End Function
        
        Public Sub SetItemCodeNull()
            Me(Me.tableItemNSM_Show.ItemCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNSMCodeNull() As Boolean
            Return Me.IsNull(Me.tableItemNSM_Show.NSMCodeColumn)
        End Function
        
        Public Sub SetNSMCodeNull()
            Me(Me.tableItemNSM_Show.NSMCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNSMNameNull() As Boolean
            Return Me.IsNull(Me.tableItemNSM_Show.NSMNameColumn)
        End Function
        
        Public Sub SetNSMNameNull()
            Me(Me.tableItemNSM_Show.NSMNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStart_DateNull() As Boolean
            Return Me.IsNull(Me.tableItemNSM_Show.Start_DateColumn)
        End Function
        
        Public Sub SetStart_DateNull()
            Me(Me.tableItemNSM_Show.Start_DateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEnd_DateNull() As Boolean
            Return Me.IsNull(Me.tableItemNSM_Show.End_DateColumn)
        End Function
        
        Public Sub SetEnd_DateNull()
            Me(Me.tableItemNSM_Show.End_DateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreateDateNull() As Boolean
            Return Me.IsNull(Me.tableItemNSM_Show.CreateDateColumn)
        End Function
        
        Public Sub SetCreateDateNull()
            Me(Me.tableItemNSM_Show.CreateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUpdateDateNull() As Boolean
            Return Me.IsNull(Me.tableItemNSM_Show.UpdateDateColumn)
        End Function
        
        Public Sub SetUpdateDateNull()
            Me(Me.tableItemNSM_Show.UpdateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLastUserNull() As Boolean
            Return Me.IsNull(Me.tableItemNSM_Show.LastUserColumn)
        End Function
        
        Public Sub SetLastUserNull()
            Me(Me.tableItemNSM_Show.LastUserColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ItemNSM_ShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ItemNSM_ShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ItemNSM_ShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ItemNSM_ShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ItemProdMan_ShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnRowid As DataColumn
        
        Private columnItemCode As DataColumn
        
        Private columnPMCode As DataColumn
        
        Private columnPMName As DataColumn
        
        Private columnStart_Date As DataColumn
        
        Private columnEnd_Date As DataColumn
        
        Private columnCreateDate As DataColumn
        
        Private columnUpdateDate As DataColumn
        
        Private columnLastUser As DataColumn
        
        Friend Sub New()
            MyBase.New("ItemProdMan_Show")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property RowidColumn As DataColumn
            Get
                Return Me.columnRowid
            End Get
        End Property
        
        Friend ReadOnly Property ItemCodeColumn As DataColumn
            Get
                Return Me.columnItemCode
            End Get
        End Property
        
        Friend ReadOnly Property PMCodeColumn As DataColumn
            Get
                Return Me.columnPMCode
            End Get
        End Property
        
        Friend ReadOnly Property PMNameColumn As DataColumn
            Get
                Return Me.columnPMName
            End Get
        End Property
        
        Friend ReadOnly Property Start_DateColumn As DataColumn
            Get
                Return Me.columnStart_Date
            End Get
        End Property
        
        Friend ReadOnly Property End_DateColumn As DataColumn
            Get
                Return Me.columnEnd_Date
            End Get
        End Property
        
        Friend ReadOnly Property CreateDateColumn As DataColumn
            Get
                Return Me.columnCreateDate
            End Get
        End Property
        
        Friend ReadOnly Property UpdateDateColumn As DataColumn
            Get
                Return Me.columnUpdateDate
            End Get
        End Property
        
        Friend ReadOnly Property LastUserColumn As DataColumn
            Get
                Return Me.columnLastUser
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ItemProdMan_ShowRow
            Get
                Return CType(Me.Rows(index),ItemProdMan_ShowRow)
            End Get
        End Property
        
        Public Event ItemProdMan_ShowRowChanged As ItemProdMan_ShowRowChangeEventHandler
        
        Public Event ItemProdMan_ShowRowChanging As ItemProdMan_ShowRowChangeEventHandler
        
        Public Event ItemProdMan_ShowRowDeleted As ItemProdMan_ShowRowChangeEventHandler
        
        Public Event ItemProdMan_ShowRowDeleting As ItemProdMan_ShowRowChangeEventHandler
        
        Public Overloads Sub AddItemProdMan_ShowRow(ByVal row As ItemProdMan_ShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddItemProdMan_ShowRow(ByVal Rowid As Integer, ByVal ItemCode As String, ByVal PMCode As String, ByVal PMName As String, ByVal Start_Date As Date, ByVal End_Date As Date, ByVal CreateDate As Date, ByVal UpdateDate As Date, ByVal LastUser As String) As ItemProdMan_ShowRow
            Dim rowItemProdMan_ShowRow As ItemProdMan_ShowRow = CType(Me.NewRow,ItemProdMan_ShowRow)
            rowItemProdMan_ShowRow.ItemArray = New Object() {Rowid, ItemCode, PMCode, PMName, Start_Date, End_Date, CreateDate, UpdateDate, LastUser}
            Me.Rows.Add(rowItemProdMan_ShowRow)
            Return rowItemProdMan_ShowRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ItemProdMan_ShowDataTable = CType(MyBase.Clone,ItemProdMan_ShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ItemProdMan_ShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnRowid = Me.Columns("Rowid")
            Me.columnItemCode = Me.Columns("ItemCode")
            Me.columnPMCode = Me.Columns("PMCode")
            Me.columnPMName = Me.Columns("PMName")
            Me.columnStart_Date = Me.Columns("Start_Date")
            Me.columnEnd_Date = Me.Columns("End_Date")
            Me.columnCreateDate = Me.Columns("CreateDate")
            Me.columnUpdateDate = Me.Columns("UpdateDate")
            Me.columnLastUser = Me.Columns("LastUser")
        End Sub
        
        Private Sub InitClass()
            Me.columnRowid = New DataColumn("Rowid", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRowid)
            Me.columnItemCode = New DataColumn("ItemCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemCode)
            Me.columnPMCode = New DataColumn("PMCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPMCode)
            Me.columnPMName = New DataColumn("PMName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPMName)
            Me.columnStart_Date = New DataColumn("Start_Date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStart_Date)
            Me.columnEnd_Date = New DataColumn("End_Date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEnd_Date)
            Me.columnCreateDate = New DataColumn("CreateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreateDate)
            Me.columnUpdateDate = New DataColumn("UpdateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUpdateDate)
            Me.columnLastUser = New DataColumn("LastUser", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLastUser)
        End Sub
        
        Public Function NewItemProdMan_ShowRow() As ItemProdMan_ShowRow
            Return CType(Me.NewRow,ItemProdMan_ShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ItemProdMan_ShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ItemProdMan_ShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ItemProdMan_ShowRowChangedEvent) Is Nothing) Then
                RaiseEvent ItemProdMan_ShowRowChanged(Me, New ItemProdMan_ShowRowChangeEvent(CType(e.Row,ItemProdMan_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ItemProdMan_ShowRowChangingEvent) Is Nothing) Then
                RaiseEvent ItemProdMan_ShowRowChanging(Me, New ItemProdMan_ShowRowChangeEvent(CType(e.Row,ItemProdMan_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ItemProdMan_ShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent ItemProdMan_ShowRowDeleted(Me, New ItemProdMan_ShowRowChangeEvent(CType(e.Row,ItemProdMan_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ItemProdMan_ShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent ItemProdMan_ShowRowDeleting(Me, New ItemProdMan_ShowRowChangeEvent(CType(e.Row,ItemProdMan_ShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveItemProdMan_ShowRow(ByVal row As ItemProdMan_ShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ItemProdMan_ShowRow
        Inherits DataRow
        
        Private tableItemProdMan_Show As ItemProdMan_ShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableItemProdMan_Show = CType(Me.Table,ItemProdMan_ShowDataTable)
        End Sub
        
        Public Property Rowid As Integer
            Get
                Try 
                    Return CType(Me(Me.tableItemProdMan_Show.RowidColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemProdMan_Show.RowidColumn) = value
            End Set
        End Property
        
        Public Property ItemCode As String
            Get
                Try 
                    Return CType(Me(Me.tableItemProdMan_Show.ItemCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemProdMan_Show.ItemCodeColumn) = value
            End Set
        End Property
        
        Public Property PMCode As String
            Get
                Try 
                    Return CType(Me(Me.tableItemProdMan_Show.PMCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemProdMan_Show.PMCodeColumn) = value
            End Set
        End Property
        
        Public Property PMName As String
            Get
                Try 
                    Return CType(Me(Me.tableItemProdMan_Show.PMNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemProdMan_Show.PMNameColumn) = value
            End Set
        End Property
        
        Public Property Start_Date As Date
            Get
                Try 
                    Return CType(Me(Me.tableItemProdMan_Show.Start_DateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemProdMan_Show.Start_DateColumn) = value
            End Set
        End Property
        
        Public Property End_Date As Date
            Get
                Try 
                    Return CType(Me(Me.tableItemProdMan_Show.End_DateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemProdMan_Show.End_DateColumn) = value
            End Set
        End Property
        
        Public Property CreateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableItemProdMan_Show.CreateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemProdMan_Show.CreateDateColumn) = value
            End Set
        End Property
        
        Public Property UpdateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableItemProdMan_Show.UpdateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemProdMan_Show.UpdateDateColumn) = value
            End Set
        End Property
        
        Public Property LastUser As String
            Get
                Try 
                    Return CType(Me(Me.tableItemProdMan_Show.LastUserColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemProdMan_Show.LastUserColumn) = value
            End Set
        End Property
        
        Public Function IsRowidNull() As Boolean
            Return Me.IsNull(Me.tableItemProdMan_Show.RowidColumn)
        End Function
        
        Public Sub SetRowidNull()
            Me(Me.tableItemProdMan_Show.RowidColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItemCodeNull() As Boolean
            Return Me.IsNull(Me.tableItemProdMan_Show.ItemCodeColumn)
        End Function
        
        Public Sub SetItemCodeNull()
            Me(Me.tableItemProdMan_Show.ItemCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPMCodeNull() As Boolean
            Return Me.IsNull(Me.tableItemProdMan_Show.PMCodeColumn)
        End Function
        
        Public Sub SetPMCodeNull()
            Me(Me.tableItemProdMan_Show.PMCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPMNameNull() As Boolean
            Return Me.IsNull(Me.tableItemProdMan_Show.PMNameColumn)
        End Function
        
        Public Sub SetPMNameNull()
            Me(Me.tableItemProdMan_Show.PMNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStart_DateNull() As Boolean
            Return Me.IsNull(Me.tableItemProdMan_Show.Start_DateColumn)
        End Function
        
        Public Sub SetStart_DateNull()
            Me(Me.tableItemProdMan_Show.Start_DateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEnd_DateNull() As Boolean
            Return Me.IsNull(Me.tableItemProdMan_Show.End_DateColumn)
        End Function
        
        Public Sub SetEnd_DateNull()
            Me(Me.tableItemProdMan_Show.End_DateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreateDateNull() As Boolean
            Return Me.IsNull(Me.tableItemProdMan_Show.CreateDateColumn)
        End Function
        
        Public Sub SetCreateDateNull()
            Me(Me.tableItemProdMan_Show.CreateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUpdateDateNull() As Boolean
            Return Me.IsNull(Me.tableItemProdMan_Show.UpdateDateColumn)
        End Function
        
        Public Sub SetUpdateDateNull()
            Me(Me.tableItemProdMan_Show.UpdateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLastUserNull() As Boolean
            Return Me.IsNull(Me.tableItemProdMan_Show.LastUserColumn)
        End Function
        
        Public Sub SetLastUserNull()
            Me(Me.tableItemProdMan_Show.LastUserColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ItemProdMan_ShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ItemProdMan_ShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ItemProdMan_ShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ItemProdMan_ShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class itmSPDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnItemdesc As DataColumn
        
        Friend Sub New()
            MyBase.New("itmSP")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ItemdescColumn As DataColumn
            Get
                Return Me.columnItemdesc
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As itmSPRow
            Get
                Return CType(Me.Rows(index),itmSPRow)
            End Get
        End Property
        
        Public Event itmSPRowChanged As itmSPRowChangeEventHandler
        
        Public Event itmSPRowChanging As itmSPRowChangeEventHandler
        
        Public Event itmSPRowDeleted As itmSPRowChangeEventHandler
        
        Public Event itmSPRowDeleting As itmSPRowChangeEventHandler
        
        Public Overloads Sub AdditmSPRow(ByVal row As itmSPRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AdditmSPRow(ByVal Itemdesc As String) As itmSPRow
            Dim rowitmSPRow As itmSPRow = CType(Me.NewRow,itmSPRow)
            rowitmSPRow.ItemArray = New Object() {Itemdesc}
            Me.Rows.Add(rowitmSPRow)
            Return rowitmSPRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As itmSPDataTable = CType(MyBase.Clone,itmSPDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New itmSPDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnItemdesc = Me.Columns("Itemdesc")
        End Sub
        
        Private Sub InitClass()
            Me.columnItemdesc = New DataColumn("Itemdesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemdesc)
        End Sub
        
        Public Function NewitmSPRow() As itmSPRow
            Return CType(Me.NewRow,itmSPRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New itmSPRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(itmSPRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.itmSPRowChangedEvent) Is Nothing) Then
                RaiseEvent itmSPRowChanged(Me, New itmSPRowChangeEvent(CType(e.Row,itmSPRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.itmSPRowChangingEvent) Is Nothing) Then
                RaiseEvent itmSPRowChanging(Me, New itmSPRowChangeEvent(CType(e.Row,itmSPRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.itmSPRowDeletedEvent) Is Nothing) Then
                RaiseEvent itmSPRowDeleted(Me, New itmSPRowChangeEvent(CType(e.Row,itmSPRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.itmSPRowDeletingEvent) Is Nothing) Then
                RaiseEvent itmSPRowDeleting(Me, New itmSPRowChangeEvent(CType(e.Row,itmSPRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveitmSPRow(ByVal row As itmSPRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class itmSPRow
        Inherits DataRow
        
        Private tableitmSP As itmSPDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableitmSP = CType(Me.Table,itmSPDataTable)
        End Sub
        
        Public Property Itemdesc As String
            Get
                Try 
                    Return CType(Me(Me.tableitmSP.ItemdescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableitmSP.ItemdescColumn) = value
            End Set
        End Property
        
        Public Function IsItemdescNull() As Boolean
            Return Me.IsNull(Me.tableitmSP.ItemdescColumn)
        End Function
        
        Public Sub SetItemdescNull()
            Me(Me.tableitmSP.ItemdescColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class itmSPRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As itmSPRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As itmSPRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As itmSPRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PM_ComboDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPM As DataColumn
        
        Friend Sub New()
            MyBase.New("PM_Combo")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property PMColumn As DataColumn
            Get
                Return Me.columnPM
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PM_ComboRow
            Get
                Return CType(Me.Rows(index),PM_ComboRow)
            End Get
        End Property
        
        Public Event PM_ComboRowChanged As PM_ComboRowChangeEventHandler
        
        Public Event PM_ComboRowChanging As PM_ComboRowChangeEventHandler
        
        Public Event PM_ComboRowDeleted As PM_ComboRowChangeEventHandler
        
        Public Event PM_ComboRowDeleting As PM_ComboRowChangeEventHandler
        
        Public Overloads Sub AddPM_ComboRow(ByVal row As PM_ComboRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPM_ComboRow(ByVal PM As String) As PM_ComboRow
            Dim rowPM_ComboRow As PM_ComboRow = CType(Me.NewRow,PM_ComboRow)
            rowPM_ComboRow.ItemArray = New Object() {PM}
            Me.Rows.Add(rowPM_ComboRow)
            Return rowPM_ComboRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PM_ComboDataTable = CType(MyBase.Clone,PM_ComboDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PM_ComboDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnPM = Me.Columns("PM")
        End Sub
        
        Private Sub InitClass()
            Me.columnPM = New DataColumn("PM", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPM)
            Me.columnPM.ReadOnly = true
        End Sub
        
        Public Function NewPM_ComboRow() As PM_ComboRow
            Return CType(Me.NewRow,PM_ComboRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PM_ComboRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PM_ComboRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PM_ComboRowChangedEvent) Is Nothing) Then
                RaiseEvent PM_ComboRowChanged(Me, New PM_ComboRowChangeEvent(CType(e.Row,PM_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PM_ComboRowChangingEvent) Is Nothing) Then
                RaiseEvent PM_ComboRowChanging(Me, New PM_ComboRowChangeEvent(CType(e.Row,PM_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PM_ComboRowDeletedEvent) Is Nothing) Then
                RaiseEvent PM_ComboRowDeleted(Me, New PM_ComboRowChangeEvent(CType(e.Row,PM_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PM_ComboRowDeletingEvent) Is Nothing) Then
                RaiseEvent PM_ComboRowDeleting(Me, New PM_ComboRowChangeEvent(CType(e.Row,PM_ComboRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePM_ComboRow(ByVal row As PM_ComboRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PM_ComboRow
        Inherits DataRow
        
        Private tablePM_Combo As PM_ComboDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePM_Combo = CType(Me.Table,PM_ComboDataTable)
        End Sub
        
        Public Property PM As String
            Get
                Try 
                    Return CType(Me(Me.tablePM_Combo.PMColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePM_Combo.PMColumn) = value
            End Set
        End Property
        
        Public Function IsPMNull() As Boolean
            Return Me.IsNull(Me.tablePM_Combo.PMColumn)
        End Function
        
        Public Sub SetPMNull()
            Me(Me.tablePM_Combo.PMColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PM_ComboRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PM_ComboRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PM_ComboRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PM_ComboRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QpiTerritory_ComboDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnTerritoryDesc As DataColumn
        
        Friend Sub New()
            MyBase.New("QpiTerritory_Combo")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property TerritoryDescColumn As DataColumn
            Get
                Return Me.columnTerritoryDesc
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As QpiTerritory_ComboRow
            Get
                Return CType(Me.Rows(index),QpiTerritory_ComboRow)
            End Get
        End Property
        
        Public Event QpiTerritory_ComboRowChanged As QpiTerritory_ComboRowChangeEventHandler
        
        Public Event QpiTerritory_ComboRowChanging As QpiTerritory_ComboRowChangeEventHandler
        
        Public Event QpiTerritory_ComboRowDeleted As QpiTerritory_ComboRowChangeEventHandler
        
        Public Event QpiTerritory_ComboRowDeleting As QpiTerritory_ComboRowChangeEventHandler
        
        Public Overloads Sub AddQpiTerritory_ComboRow(ByVal row As QpiTerritory_ComboRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddQpiTerritory_ComboRow(ByVal TerritoryDesc As String) As QpiTerritory_ComboRow
            Dim rowQpiTerritory_ComboRow As QpiTerritory_ComboRow = CType(Me.NewRow,QpiTerritory_ComboRow)
            rowQpiTerritory_ComboRow.ItemArray = New Object() {TerritoryDesc}
            Me.Rows.Add(rowQpiTerritory_ComboRow)
            Return rowQpiTerritory_ComboRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As QpiTerritory_ComboDataTable = CType(MyBase.Clone,QpiTerritory_ComboDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New QpiTerritory_ComboDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnTerritoryDesc = Me.Columns("TerritoryDesc")
        End Sub
        
        Private Sub InitClass()
            Me.columnTerritoryDesc = New DataColumn("TerritoryDesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTerritoryDesc)
        End Sub
        
        Public Function NewQpiTerritory_ComboRow() As QpiTerritory_ComboRow
            Return CType(Me.NewRow,QpiTerritory_ComboRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New QpiTerritory_ComboRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(QpiTerritory_ComboRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.QpiTerritory_ComboRowChangedEvent) Is Nothing) Then
                RaiseEvent QpiTerritory_ComboRowChanged(Me, New QpiTerritory_ComboRowChangeEvent(CType(e.Row,QpiTerritory_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.QpiTerritory_ComboRowChangingEvent) Is Nothing) Then
                RaiseEvent QpiTerritory_ComboRowChanging(Me, New QpiTerritory_ComboRowChangeEvent(CType(e.Row,QpiTerritory_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.QpiTerritory_ComboRowDeletedEvent) Is Nothing) Then
                RaiseEvent QpiTerritory_ComboRowDeleted(Me, New QpiTerritory_ComboRowChangeEvent(CType(e.Row,QpiTerritory_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.QpiTerritory_ComboRowDeletingEvent) Is Nothing) Then
                RaiseEvent QpiTerritory_ComboRowDeleting(Me, New QpiTerritory_ComboRowChangeEvent(CType(e.Row,QpiTerritory_ComboRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveQpiTerritory_ComboRow(ByVal row As QpiTerritory_ComboRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QpiTerritory_ComboRow
        Inherits DataRow
        
        Private tableQpiTerritory_Combo As QpiTerritory_ComboDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableQpiTerritory_Combo = CType(Me.Table,QpiTerritory_ComboDataTable)
        End Sub
        
        Public Property TerritoryDesc As String
            Get
                Try 
                    Return CType(Me(Me.tableQpiTerritory_Combo.TerritoryDescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQpiTerritory_Combo.TerritoryDescColumn) = value
            End Set
        End Property
        
        Public Function IsTerritoryDescNull() As Boolean
            Return Me.IsNull(Me.tableQpiTerritory_Combo.TerritoryDescColumn)
        End Function
        
        Public Sub SetTerritoryDescNull()
            Me(Me.tableQpiTerritory_Combo.TerritoryDescColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QpiTerritory_ComboRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As QpiTerritory_ComboRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As QpiTerritory_ComboRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As QpiTerritory_ComboRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CustomerCodTab_ShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnrowid As DataColumn
        
        Private columncustcode As DataColumn
        
        Private columncustname As DataColumn
        
        Private columncusttype As DataColumn
        
        Private columnaddress1 As DataColumn
        
        Private columnaddress2 As DataColumn
        
        Private columnaddress3 As DataColumn
        
        Private columnareacode As DataColumn
        
        Private columnterritorydr As DataColumn
        
        Private columnmetro_code As DataColumn
        
        Private columncreatedate As DataColumn
        
        Private columnupdatedate As DataColumn
        
        Private columnmdtype As DataColumn
        
        Private columnqpiareacode As DataColumn
        
        Private columnparentcustcode As DataColumn
        
        Private columnlastuser As DataColumn
        
        Private columnzuecode As DataColumn
        
        Friend Sub New()
            MyBase.New("CustomerCodTab_Show")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property rowidColumn As DataColumn
            Get
                Return Me.columnrowid
            End Get
        End Property
        
        Friend ReadOnly Property custcodeColumn As DataColumn
            Get
                Return Me.columncustcode
            End Get
        End Property
        
        Friend ReadOnly Property custnameColumn As DataColumn
            Get
                Return Me.columncustname
            End Get
        End Property
        
        Friend ReadOnly Property custtypeColumn As DataColumn
            Get
                Return Me.columncusttype
            End Get
        End Property
        
        Friend ReadOnly Property address1Column As DataColumn
            Get
                Return Me.columnaddress1
            End Get
        End Property
        
        Friend ReadOnly Property address2Column As DataColumn
            Get
                Return Me.columnaddress2
            End Get
        End Property
        
        Friend ReadOnly Property address3Column As DataColumn
            Get
                Return Me.columnaddress3
            End Get
        End Property
        
        Friend ReadOnly Property areacodeColumn As DataColumn
            Get
                Return Me.columnareacode
            End Get
        End Property
        
        Friend ReadOnly Property territorydrColumn As DataColumn
            Get
                Return Me.columnterritorydr
            End Get
        End Property
        
        Friend ReadOnly Property metro_codeColumn As DataColumn
            Get
                Return Me.columnmetro_code
            End Get
        End Property
        
        Friend ReadOnly Property createdateColumn As DataColumn
            Get
                Return Me.columncreatedate
            End Get
        End Property
        
        Friend ReadOnly Property updatedateColumn As DataColumn
            Get
                Return Me.columnupdatedate
            End Get
        End Property
        
        Friend ReadOnly Property mdtypeColumn As DataColumn
            Get
                Return Me.columnmdtype
            End Get
        End Property
        
        Friend ReadOnly Property qpiareacodeColumn As DataColumn
            Get
                Return Me.columnqpiareacode
            End Get
        End Property
        
        Friend ReadOnly Property parentcustcodeColumn As DataColumn
            Get
                Return Me.columnparentcustcode
            End Get
        End Property
        
        Friend ReadOnly Property lastuserColumn As DataColumn
            Get
                Return Me.columnlastuser
            End Get
        End Property
        
        Friend ReadOnly Property zuecodeColumn As DataColumn
            Get
                Return Me.columnzuecode
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CustomerCodTab_ShowRow
            Get
                Return CType(Me.Rows(index),CustomerCodTab_ShowRow)
            End Get
        End Property
        
        Public Event CustomerCodTab_ShowRowChanged As CustomerCodTab_ShowRowChangeEventHandler
        
        Public Event CustomerCodTab_ShowRowChanging As CustomerCodTab_ShowRowChangeEventHandler
        
        Public Event CustomerCodTab_ShowRowDeleted As CustomerCodTab_ShowRowChangeEventHandler
        
        Public Event CustomerCodTab_ShowRowDeleting As CustomerCodTab_ShowRowChangeEventHandler
        
        Public Overloads Sub AddCustomerCodTab_ShowRow(ByVal row As CustomerCodTab_ShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCustomerCodTab_ShowRow( _
                    ByVal rowid As Decimal,  _
                    ByVal custcode As String,  _
                    ByVal custname As String,  _
                    ByVal custtype As String,  _
                    ByVal address1 As String,  _
                    ByVal address2 As String,  _
                    ByVal address3 As String,  _
                    ByVal areacode As String,  _
                    ByVal territorydr As String,  _
                    ByVal metro_code As String,  _
                    ByVal createdate As Date,  _
                    ByVal updatedate As Date,  _
                    ByVal mdtype As String,  _
                    ByVal qpiareacode As String,  _
                    ByVal parentcustcode As String,  _
                    ByVal lastuser As String,  _
                    ByVal zuecode As String) As CustomerCodTab_ShowRow
            Dim rowCustomerCodTab_ShowRow As CustomerCodTab_ShowRow = CType(Me.NewRow,CustomerCodTab_ShowRow)
            rowCustomerCodTab_ShowRow.ItemArray = New Object() {rowid, custcode, custname, custtype, address1, address2, address3, areacode, territorydr, metro_code, createdate, updatedate, mdtype, qpiareacode, parentcustcode, lastuser, zuecode}
            Me.Rows.Add(rowCustomerCodTab_ShowRow)
            Return rowCustomerCodTab_ShowRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CustomerCodTab_ShowDataTable = CType(MyBase.Clone,CustomerCodTab_ShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CustomerCodTab_ShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnrowid = Me.Columns("rowid")
            Me.columncustcode = Me.Columns("custcode")
            Me.columncustname = Me.Columns("custname")
            Me.columncusttype = Me.Columns("custtype")
            Me.columnaddress1 = Me.Columns("address1")
            Me.columnaddress2 = Me.Columns("address2")
            Me.columnaddress3 = Me.Columns("address3")
            Me.columnareacode = Me.Columns("areacode")
            Me.columnterritorydr = Me.Columns("territorydr")
            Me.columnmetro_code = Me.Columns("metro_code")
            Me.columncreatedate = Me.Columns("createdate")
            Me.columnupdatedate = Me.Columns("updatedate")
            Me.columnmdtype = Me.Columns("mdtype")
            Me.columnqpiareacode = Me.Columns("qpiareacode")
            Me.columnparentcustcode = Me.Columns("parentcustcode")
            Me.columnlastuser = Me.Columns("lastuser")
            Me.columnzuecode = Me.Columns("zuecode")
        End Sub
        
        Private Sub InitClass()
            Me.columnrowid = New DataColumn("rowid", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrowid)
            Me.columncustcode = New DataColumn("custcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncustcode)
            Me.columncustname = New DataColumn("custname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncustname)
            Me.columncusttype = New DataColumn("custtype", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncusttype)
            Me.columnaddress1 = New DataColumn("address1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaddress1)
            Me.columnaddress2 = New DataColumn("address2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaddress2)
            Me.columnaddress3 = New DataColumn("address3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaddress3)
            Me.columnareacode = New DataColumn("areacode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnareacode)
            Me.columnterritorydr = New DataColumn("territorydr", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnterritorydr)
            Me.columnmetro_code = New DataColumn("metro_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmetro_code)
            Me.columncreatedate = New DataColumn("createdate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncreatedate)
            Me.columnupdatedate = New DataColumn("updatedate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnupdatedate)
            Me.columnmdtype = New DataColumn("mdtype", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmdtype)
            Me.columnqpiareacode = New DataColumn("qpiareacode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnqpiareacode)
            Me.columnparentcustcode = New DataColumn("parentcustcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnparentcustcode)
            Me.columnlastuser = New DataColumn("lastuser", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlastuser)
            Me.columnzuecode = New DataColumn("zuecode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnzuecode)
        End Sub
        
        Public Function NewCustomerCodTab_ShowRow() As CustomerCodTab_ShowRow
            Return CType(Me.NewRow,CustomerCodTab_ShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CustomerCodTab_ShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CustomerCodTab_ShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CustomerCodTab_ShowRowChangedEvent) Is Nothing) Then
                RaiseEvent CustomerCodTab_ShowRowChanged(Me, New CustomerCodTab_ShowRowChangeEvent(CType(e.Row,CustomerCodTab_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CustomerCodTab_ShowRowChangingEvent) Is Nothing) Then
                RaiseEvent CustomerCodTab_ShowRowChanging(Me, New CustomerCodTab_ShowRowChangeEvent(CType(e.Row,CustomerCodTab_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CustomerCodTab_ShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent CustomerCodTab_ShowRowDeleted(Me, New CustomerCodTab_ShowRowChangeEvent(CType(e.Row,CustomerCodTab_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CustomerCodTab_ShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent CustomerCodTab_ShowRowDeleting(Me, New CustomerCodTab_ShowRowChangeEvent(CType(e.Row,CustomerCodTab_ShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCustomerCodTab_ShowRow(ByVal row As CustomerCodTab_ShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CustomerCodTab_ShowRow
        Inherits DataRow
        
        Private tableCustomerCodTab_Show As CustomerCodTab_ShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCustomerCodTab_Show = CType(Me.Table,CustomerCodTab_ShowDataTable)
        End Sub
        
        Public Property rowid As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCustomerCodTab_Show.rowidColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerCodTab_Show.rowidColumn) = value
            End Set
        End Property
        
        Public Property custcode As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerCodTab_Show.custcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerCodTab_Show.custcodeColumn) = value
            End Set
        End Property
        
        Public Property custname As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerCodTab_Show.custnameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerCodTab_Show.custnameColumn) = value
            End Set
        End Property
        
        Public Property custtype As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerCodTab_Show.custtypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerCodTab_Show.custtypeColumn) = value
            End Set
        End Property
        
        Public Property address1 As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerCodTab_Show.address1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerCodTab_Show.address1Column) = value
            End Set
        End Property
        
        Public Property address2 As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerCodTab_Show.address2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerCodTab_Show.address2Column) = value
            End Set
        End Property
        
        Public Property address3 As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerCodTab_Show.address3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerCodTab_Show.address3Column) = value
            End Set
        End Property
        
        Public Property areacode As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerCodTab_Show.areacodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerCodTab_Show.areacodeColumn) = value
            End Set
        End Property
        
        Public Property territorydr As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerCodTab_Show.territorydrColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerCodTab_Show.territorydrColumn) = value
            End Set
        End Property
        
        Public Property metro_code As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerCodTab_Show.metro_codeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerCodTab_Show.metro_codeColumn) = value
            End Set
        End Property
        
        Public Property createdate As Date
            Get
                Try 
                    Return CType(Me(Me.tableCustomerCodTab_Show.createdateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerCodTab_Show.createdateColumn) = value
            End Set
        End Property
        
        Public Property updatedate As Date
            Get
                Try 
                    Return CType(Me(Me.tableCustomerCodTab_Show.updatedateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerCodTab_Show.updatedateColumn) = value
            End Set
        End Property
        
        Public Property mdtype As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerCodTab_Show.mdtypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerCodTab_Show.mdtypeColumn) = value
            End Set
        End Property
        
        Public Property qpiareacode As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerCodTab_Show.qpiareacodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerCodTab_Show.qpiareacodeColumn) = value
            End Set
        End Property
        
        Public Property parentcustcode As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerCodTab_Show.parentcustcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerCodTab_Show.parentcustcodeColumn) = value
            End Set
        End Property
        
        Public Property lastuser As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerCodTab_Show.lastuserColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerCodTab_Show.lastuserColumn) = value
            End Set
        End Property
        
        Public Property zuecode As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerCodTab_Show.zuecodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerCodTab_Show.zuecodeColumn) = value
            End Set
        End Property
        
        Public Function IsrowidNull() As Boolean
            Return Me.IsNull(Me.tableCustomerCodTab_Show.rowidColumn)
        End Function
        
        Public Sub SetrowidNull()
            Me(Me.tableCustomerCodTab_Show.rowidColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscustcodeNull() As Boolean
            Return Me.IsNull(Me.tableCustomerCodTab_Show.custcodeColumn)
        End Function
        
        Public Sub SetcustcodeNull()
            Me(Me.tableCustomerCodTab_Show.custcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscustnameNull() As Boolean
            Return Me.IsNull(Me.tableCustomerCodTab_Show.custnameColumn)
        End Function
        
        Public Sub SetcustnameNull()
            Me(Me.tableCustomerCodTab_Show.custnameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscusttypeNull() As Boolean
            Return Me.IsNull(Me.tableCustomerCodTab_Show.custtypeColumn)
        End Function
        
        Public Sub SetcusttypeNull()
            Me(Me.tableCustomerCodTab_Show.custtypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isaddress1Null() As Boolean
            Return Me.IsNull(Me.tableCustomerCodTab_Show.address1Column)
        End Function
        
        Public Sub Setaddress1Null()
            Me(Me.tableCustomerCodTab_Show.address1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isaddress2Null() As Boolean
            Return Me.IsNull(Me.tableCustomerCodTab_Show.address2Column)
        End Function
        
        Public Sub Setaddress2Null()
            Me(Me.tableCustomerCodTab_Show.address2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isaddress3Null() As Boolean
            Return Me.IsNull(Me.tableCustomerCodTab_Show.address3Column)
        End Function
        
        Public Sub Setaddress3Null()
            Me(Me.tableCustomerCodTab_Show.address3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsareacodeNull() As Boolean
            Return Me.IsNull(Me.tableCustomerCodTab_Show.areacodeColumn)
        End Function
        
        Public Sub SetareacodeNull()
            Me(Me.tableCustomerCodTab_Show.areacodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsterritorydrNull() As Boolean
            Return Me.IsNull(Me.tableCustomerCodTab_Show.territorydrColumn)
        End Function
        
        Public Sub SetterritorydrNull()
            Me(Me.tableCustomerCodTab_Show.territorydrColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ismetro_codeNull() As Boolean
            Return Me.IsNull(Me.tableCustomerCodTab_Show.metro_codeColumn)
        End Function
        
        Public Sub Setmetro_codeNull()
            Me(Me.tableCustomerCodTab_Show.metro_codeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscreatedateNull() As Boolean
            Return Me.IsNull(Me.tableCustomerCodTab_Show.createdateColumn)
        End Function
        
        Public Sub SetcreatedateNull()
            Me(Me.tableCustomerCodTab_Show.createdateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsupdatedateNull() As Boolean
            Return Me.IsNull(Me.tableCustomerCodTab_Show.updatedateColumn)
        End Function
        
        Public Sub SetupdatedateNull()
            Me(Me.tableCustomerCodTab_Show.updatedateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmdtypeNull() As Boolean
            Return Me.IsNull(Me.tableCustomerCodTab_Show.mdtypeColumn)
        End Function
        
        Public Sub SetmdtypeNull()
            Me(Me.tableCustomerCodTab_Show.mdtypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsqpiareacodeNull() As Boolean
            Return Me.IsNull(Me.tableCustomerCodTab_Show.qpiareacodeColumn)
        End Function
        
        Public Sub SetqpiareacodeNull()
            Me(Me.tableCustomerCodTab_Show.qpiareacodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsparentcustcodeNull() As Boolean
            Return Me.IsNull(Me.tableCustomerCodTab_Show.parentcustcodeColumn)
        End Function
        
        Public Sub SetparentcustcodeNull()
            Me(Me.tableCustomerCodTab_Show.parentcustcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslastuserNull() As Boolean
            Return Me.IsNull(Me.tableCustomerCodTab_Show.lastuserColumn)
        End Function
        
        Public Sub SetlastuserNull()
            Me(Me.tableCustomerCodTab_Show.lastuserColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IszuecodeNull() As Boolean
            Return Me.IsNull(Me.tableCustomerCodTab_Show.zuecodeColumn)
        End Function
        
        Public Sub SetzuecodeNull()
            Me(Me.tableCustomerCodTab_Show.zuecodeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CustomerCodTab_ShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CustomerCodTab_ShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CustomerCodTab_ShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CustomerCodTab_ShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QPIareaCode_ComboDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnQareaCode As DataColumn
        
        Private columnareaname As DataColumn
        
        Friend Sub New()
            MyBase.New("QPIareaCode_Combo")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property QareaCodeColumn As DataColumn
            Get
                Return Me.columnQareaCode
            End Get
        End Property
        
        Friend ReadOnly Property areanameColumn As DataColumn
            Get
                Return Me.columnareaname
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As QPIareaCode_ComboRow
            Get
                Return CType(Me.Rows(index),QPIareaCode_ComboRow)
            End Get
        End Property
        
        Public Event QPIareaCode_ComboRowChanged As QPIareaCode_ComboRowChangeEventHandler
        
        Public Event QPIareaCode_ComboRowChanging As QPIareaCode_ComboRowChangeEventHandler
        
        Public Event QPIareaCode_ComboRowDeleted As QPIareaCode_ComboRowChangeEventHandler
        
        Public Event QPIareaCode_ComboRowDeleting As QPIareaCode_ComboRowChangeEventHandler
        
        Public Overloads Sub AddQPIareaCode_ComboRow(ByVal row As QPIareaCode_ComboRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddQPIareaCode_ComboRow(ByVal QareaCode As String, ByVal areaname As String) As QPIareaCode_ComboRow
            Dim rowQPIareaCode_ComboRow As QPIareaCode_ComboRow = CType(Me.NewRow,QPIareaCode_ComboRow)
            rowQPIareaCode_ComboRow.ItemArray = New Object() {QareaCode, areaname}
            Me.Rows.Add(rowQPIareaCode_ComboRow)
            Return rowQPIareaCode_ComboRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As QPIareaCode_ComboDataTable = CType(MyBase.Clone,QPIareaCode_ComboDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New QPIareaCode_ComboDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnQareaCode = Me.Columns("QareaCode")
            Me.columnareaname = Me.Columns("areaname")
        End Sub
        
        Private Sub InitClass()
            Me.columnQareaCode = New DataColumn("QareaCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQareaCode)
            Me.columnareaname = New DataColumn("areaname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnareaname)
        End Sub
        
        Public Function NewQPIareaCode_ComboRow() As QPIareaCode_ComboRow
            Return CType(Me.NewRow,QPIareaCode_ComboRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New QPIareaCode_ComboRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(QPIareaCode_ComboRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.QPIareaCode_ComboRowChangedEvent) Is Nothing) Then
                RaiseEvent QPIareaCode_ComboRowChanged(Me, New QPIareaCode_ComboRowChangeEvent(CType(e.Row,QPIareaCode_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.QPIareaCode_ComboRowChangingEvent) Is Nothing) Then
                RaiseEvent QPIareaCode_ComboRowChanging(Me, New QPIareaCode_ComboRowChangeEvent(CType(e.Row,QPIareaCode_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.QPIareaCode_ComboRowDeletedEvent) Is Nothing) Then
                RaiseEvent QPIareaCode_ComboRowDeleted(Me, New QPIareaCode_ComboRowChangeEvent(CType(e.Row,QPIareaCode_ComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.QPIareaCode_ComboRowDeletingEvent) Is Nothing) Then
                RaiseEvent QPIareaCode_ComboRowDeleting(Me, New QPIareaCode_ComboRowChangeEvent(CType(e.Row,QPIareaCode_ComboRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveQPIareaCode_ComboRow(ByVal row As QPIareaCode_ComboRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QPIareaCode_ComboRow
        Inherits DataRow
        
        Private tableQPIareaCode_Combo As QPIareaCode_ComboDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableQPIareaCode_Combo = CType(Me.Table,QPIareaCode_ComboDataTable)
        End Sub
        
        Public Property QareaCode As String
            Get
                Try 
                    Return CType(Me(Me.tableQPIareaCode_Combo.QareaCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQPIareaCode_Combo.QareaCodeColumn) = value
            End Set
        End Property
        
        Public Property areaname As String
            Get
                Try 
                    Return CType(Me(Me.tableQPIareaCode_Combo.areanameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQPIareaCode_Combo.areanameColumn) = value
            End Set
        End Property
        
        Public Function IsQareaCodeNull() As Boolean
            Return Me.IsNull(Me.tableQPIareaCode_Combo.QareaCodeColumn)
        End Function
        
        Public Sub SetQareaCodeNull()
            Me(Me.tableQPIareaCode_Combo.QareaCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsareanameNull() As Boolean
            Return Me.IsNull(Me.tableQPIareaCode_Combo.areanameColumn)
        End Function
        
        Public Sub SetareanameNull()
            Me(Me.tableQPIareaCode_Combo.areanameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QPIareaCode_ComboRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As QPIareaCode_ComboRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As QPIareaCode_ComboRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As QPIareaCode_ComboRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ExcludeCustomerListCT_ShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnRowid As DataColumn
        
        Private columnCustomerCode As DataColumn
        
        Private columnCustomerName As DataColumn
        
        Private columnSalesClass As DataColumn
        
        Private columnSubSubSaleType As DataColumn
        
        Private columnStart_Date As DataColumn
        
        Private columnEnd_Date As DataColumn
        
        Private columnCreateDate As DataColumn
        
        Private columnUpdateDate As DataColumn
        
        Private columnLastUser As DataColumn
        
        Friend Sub New()
            MyBase.New("ExcludeCustomerListCT_Show")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property RowidColumn As DataColumn
            Get
                Return Me.columnRowid
            End Get
        End Property
        
        Friend ReadOnly Property CustomerCodeColumn As DataColumn
            Get
                Return Me.columnCustomerCode
            End Get
        End Property
        
        Friend ReadOnly Property CustomerNameColumn As DataColumn
            Get
                Return Me.columnCustomerName
            End Get
        End Property
        
        Friend ReadOnly Property SalesClassColumn As DataColumn
            Get
                Return Me.columnSalesClass
            End Get
        End Property
        
        Friend ReadOnly Property SubSubSaleTypeColumn As DataColumn
            Get
                Return Me.columnSubSubSaleType
            End Get
        End Property
        
        Friend ReadOnly Property Start_DateColumn As DataColumn
            Get
                Return Me.columnStart_Date
            End Get
        End Property
        
        Friend ReadOnly Property End_DateColumn As DataColumn
            Get
                Return Me.columnEnd_Date
            End Get
        End Property
        
        Friend ReadOnly Property CreateDateColumn As DataColumn
            Get
                Return Me.columnCreateDate
            End Get
        End Property
        
        Friend ReadOnly Property UpdateDateColumn As DataColumn
            Get
                Return Me.columnUpdateDate
            End Get
        End Property
        
        Friend ReadOnly Property LastUserColumn As DataColumn
            Get
                Return Me.columnLastUser
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ExcludeCustomerListCT_ShowRow
            Get
                Return CType(Me.Rows(index),ExcludeCustomerListCT_ShowRow)
            End Get
        End Property
        
        Public Event ExcludeCustomerListCT_ShowRowChanged As ExcludeCustomerListCT_ShowRowChangeEventHandler
        
        Public Event ExcludeCustomerListCT_ShowRowChanging As ExcludeCustomerListCT_ShowRowChangeEventHandler
        
        Public Event ExcludeCustomerListCT_ShowRowDeleted As ExcludeCustomerListCT_ShowRowChangeEventHandler
        
        Public Event ExcludeCustomerListCT_ShowRowDeleting As ExcludeCustomerListCT_ShowRowChangeEventHandler
        
        Public Overloads Sub AddExcludeCustomerListCT_ShowRow(ByVal row As ExcludeCustomerListCT_ShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddExcludeCustomerListCT_ShowRow(ByVal Rowid As Integer, ByVal CustomerCode As String, ByVal CustomerName As String, ByVal SalesClass As String, ByVal SubSubSaleType As String, ByVal Start_Date As Date, ByVal End_Date As Date, ByVal CreateDate As Date, ByVal UpdateDate As Date, ByVal LastUser As String) As ExcludeCustomerListCT_ShowRow
            Dim rowExcludeCustomerListCT_ShowRow As ExcludeCustomerListCT_ShowRow = CType(Me.NewRow,ExcludeCustomerListCT_ShowRow)
            rowExcludeCustomerListCT_ShowRow.ItemArray = New Object() {Rowid, CustomerCode, CustomerName, SalesClass, SubSubSaleType, Start_Date, End_Date, CreateDate, UpdateDate, LastUser}
            Me.Rows.Add(rowExcludeCustomerListCT_ShowRow)
            Return rowExcludeCustomerListCT_ShowRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ExcludeCustomerListCT_ShowDataTable = CType(MyBase.Clone,ExcludeCustomerListCT_ShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ExcludeCustomerListCT_ShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnRowid = Me.Columns("Rowid")
            Me.columnCustomerCode = Me.Columns("CustomerCode")
            Me.columnCustomerName = Me.Columns("CustomerName")
            Me.columnSalesClass = Me.Columns("SalesClass")
            Me.columnSubSubSaleType = Me.Columns("SubSubSaleType")
            Me.columnStart_Date = Me.Columns("Start_Date")
            Me.columnEnd_Date = Me.Columns("End_Date")
            Me.columnCreateDate = Me.Columns("CreateDate")
            Me.columnUpdateDate = Me.Columns("UpdateDate")
            Me.columnLastUser = Me.Columns("LastUser")
        End Sub
        
        Private Sub InitClass()
            Me.columnRowid = New DataColumn("Rowid", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRowid)
            Me.columnCustomerCode = New DataColumn("CustomerCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCustomerCode)
            Me.columnCustomerName = New DataColumn("CustomerName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCustomerName)
            Me.columnSalesClass = New DataColumn("SalesClass", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSalesClass)
            Me.columnSubSubSaleType = New DataColumn("SubSubSaleType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSubSubSaleType)
            Me.columnStart_Date = New DataColumn("Start_Date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStart_Date)
            Me.columnEnd_Date = New DataColumn("End_Date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEnd_Date)
            Me.columnCreateDate = New DataColumn("CreateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreateDate)
            Me.columnUpdateDate = New DataColumn("UpdateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUpdateDate)
            Me.columnLastUser = New DataColumn("LastUser", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLastUser)
        End Sub
        
        Public Function NewExcludeCustomerListCT_ShowRow() As ExcludeCustomerListCT_ShowRow
            Return CType(Me.NewRow,ExcludeCustomerListCT_ShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ExcludeCustomerListCT_ShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ExcludeCustomerListCT_ShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ExcludeCustomerListCT_ShowRowChangedEvent) Is Nothing) Then
                RaiseEvent ExcludeCustomerListCT_ShowRowChanged(Me, New ExcludeCustomerListCT_ShowRowChangeEvent(CType(e.Row,ExcludeCustomerListCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ExcludeCustomerListCT_ShowRowChangingEvent) Is Nothing) Then
                RaiseEvent ExcludeCustomerListCT_ShowRowChanging(Me, New ExcludeCustomerListCT_ShowRowChangeEvent(CType(e.Row,ExcludeCustomerListCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ExcludeCustomerListCT_ShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent ExcludeCustomerListCT_ShowRowDeleted(Me, New ExcludeCustomerListCT_ShowRowChangeEvent(CType(e.Row,ExcludeCustomerListCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ExcludeCustomerListCT_ShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent ExcludeCustomerListCT_ShowRowDeleting(Me, New ExcludeCustomerListCT_ShowRowChangeEvent(CType(e.Row,ExcludeCustomerListCT_ShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveExcludeCustomerListCT_ShowRow(ByVal row As ExcludeCustomerListCT_ShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ExcludeCustomerListCT_ShowRow
        Inherits DataRow
        
        Private tableExcludeCustomerListCT_Show As ExcludeCustomerListCT_ShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableExcludeCustomerListCT_Show = CType(Me.Table,ExcludeCustomerListCT_ShowDataTable)
        End Sub
        
        Public Property Rowid As Integer
            Get
                Try 
                    Return CType(Me(Me.tableExcludeCustomerListCT_Show.RowidColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExcludeCustomerListCT_Show.RowidColumn) = value
            End Set
        End Property
        
        Public Property CustomerCode As String
            Get
                Try 
                    Return CType(Me(Me.tableExcludeCustomerListCT_Show.CustomerCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExcludeCustomerListCT_Show.CustomerCodeColumn) = value
            End Set
        End Property
        
        Public Property CustomerName As String
            Get
                Try 
                    Return CType(Me(Me.tableExcludeCustomerListCT_Show.CustomerNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExcludeCustomerListCT_Show.CustomerNameColumn) = value
            End Set
        End Property
        
        Public Property SalesClass As String
            Get
                Try 
                    Return CType(Me(Me.tableExcludeCustomerListCT_Show.SalesClassColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExcludeCustomerListCT_Show.SalesClassColumn) = value
            End Set
        End Property
        
        Public Property SubSubSaleType As String
            Get
                Try 
                    Return CType(Me(Me.tableExcludeCustomerListCT_Show.SubSubSaleTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExcludeCustomerListCT_Show.SubSubSaleTypeColumn) = value
            End Set
        End Property
        
        Public Property Start_Date As Date
            Get
                Try 
                    Return CType(Me(Me.tableExcludeCustomerListCT_Show.Start_DateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExcludeCustomerListCT_Show.Start_DateColumn) = value
            End Set
        End Property
        
        Public Property End_Date As Date
            Get
                Try 
                    Return CType(Me(Me.tableExcludeCustomerListCT_Show.End_DateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExcludeCustomerListCT_Show.End_DateColumn) = value
            End Set
        End Property
        
        Public Property CreateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableExcludeCustomerListCT_Show.CreateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExcludeCustomerListCT_Show.CreateDateColumn) = value
            End Set
        End Property
        
        Public Property UpdateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableExcludeCustomerListCT_Show.UpdateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExcludeCustomerListCT_Show.UpdateDateColumn) = value
            End Set
        End Property
        
        Public Property LastUser As String
            Get
                Try 
                    Return CType(Me(Me.tableExcludeCustomerListCT_Show.LastUserColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExcludeCustomerListCT_Show.LastUserColumn) = value
            End Set
        End Property
        
        Public Function IsRowidNull() As Boolean
            Return Me.IsNull(Me.tableExcludeCustomerListCT_Show.RowidColumn)
        End Function
        
        Public Sub SetRowidNull()
            Me(Me.tableExcludeCustomerListCT_Show.RowidColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCustomerCodeNull() As Boolean
            Return Me.IsNull(Me.tableExcludeCustomerListCT_Show.CustomerCodeColumn)
        End Function
        
        Public Sub SetCustomerCodeNull()
            Me(Me.tableExcludeCustomerListCT_Show.CustomerCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCustomerNameNull() As Boolean
            Return Me.IsNull(Me.tableExcludeCustomerListCT_Show.CustomerNameColumn)
        End Function
        
        Public Sub SetCustomerNameNull()
            Me(Me.tableExcludeCustomerListCT_Show.CustomerNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSalesClassNull() As Boolean
            Return Me.IsNull(Me.tableExcludeCustomerListCT_Show.SalesClassColumn)
        End Function
        
        Public Sub SetSalesClassNull()
            Me(Me.tableExcludeCustomerListCT_Show.SalesClassColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSubSubSaleTypeNull() As Boolean
            Return Me.IsNull(Me.tableExcludeCustomerListCT_Show.SubSubSaleTypeColumn)
        End Function
        
        Public Sub SetSubSubSaleTypeNull()
            Me(Me.tableExcludeCustomerListCT_Show.SubSubSaleTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStart_DateNull() As Boolean
            Return Me.IsNull(Me.tableExcludeCustomerListCT_Show.Start_DateColumn)
        End Function
        
        Public Sub SetStart_DateNull()
            Me(Me.tableExcludeCustomerListCT_Show.Start_DateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEnd_DateNull() As Boolean
            Return Me.IsNull(Me.tableExcludeCustomerListCT_Show.End_DateColumn)
        End Function
        
        Public Sub SetEnd_DateNull()
            Me(Me.tableExcludeCustomerListCT_Show.End_DateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreateDateNull() As Boolean
            Return Me.IsNull(Me.tableExcludeCustomerListCT_Show.CreateDateColumn)
        End Function
        
        Public Sub SetCreateDateNull()
            Me(Me.tableExcludeCustomerListCT_Show.CreateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUpdateDateNull() As Boolean
            Return Me.IsNull(Me.tableExcludeCustomerListCT_Show.UpdateDateColumn)
        End Function
        
        Public Sub SetUpdateDateNull()
            Me(Me.tableExcludeCustomerListCT_Show.UpdateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLastUserNull() As Boolean
            Return Me.IsNull(Me.tableExcludeCustomerListCT_Show.LastUserColumn)
        End Function
        
        Public Sub SetLastUserNull()
            Me(Me.tableExcludeCustomerListCT_Show.LastUserColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ExcludeCustomerListCT_ShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ExcludeCustomerListCT_ShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ExcludeCustomerListCT_ShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ExcludeCustomerListCT_ShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CustLookupDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCustCode As DataColumn
        
        Private columnCustName As DataColumn
        
        Private columnAddress1 As DataColumn
        
        Private columnAddress2 As DataColumn
        
        Friend Sub New()
            MyBase.New("CustLookup")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CustCodeColumn As DataColumn
            Get
                Return Me.columnCustCode
            End Get
        End Property
        
        Friend ReadOnly Property CustNameColumn As DataColumn
            Get
                Return Me.columnCustName
            End Get
        End Property
        
        Friend ReadOnly Property Address1Column As DataColumn
            Get
                Return Me.columnAddress1
            End Get
        End Property
        
        Friend ReadOnly Property Address2Column As DataColumn
            Get
                Return Me.columnAddress2
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CustLookupRow
            Get
                Return CType(Me.Rows(index),CustLookupRow)
            End Get
        End Property
        
        Public Event CustLookupRowChanged As CustLookupRowChangeEventHandler
        
        Public Event CustLookupRowChanging As CustLookupRowChangeEventHandler
        
        Public Event CustLookupRowDeleted As CustLookupRowChangeEventHandler
        
        Public Event CustLookupRowDeleting As CustLookupRowChangeEventHandler
        
        Public Overloads Sub AddCustLookupRow(ByVal row As CustLookupRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCustLookupRow(ByVal CustCode As String, ByVal CustName As String, ByVal Address1 As String, ByVal Address2 As String) As CustLookupRow
            Dim rowCustLookupRow As CustLookupRow = CType(Me.NewRow,CustLookupRow)
            rowCustLookupRow.ItemArray = New Object() {CustCode, CustName, Address1, Address2}
            Me.Rows.Add(rowCustLookupRow)
            Return rowCustLookupRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CustLookupDataTable = CType(MyBase.Clone,CustLookupDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CustLookupDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCustCode = Me.Columns("CustCode")
            Me.columnCustName = Me.Columns("CustName")
            Me.columnAddress1 = Me.Columns("Address1")
            Me.columnAddress2 = Me.Columns("Address2")
        End Sub
        
        Private Sub InitClass()
            Me.columnCustCode = New DataColumn("CustCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCustCode)
            Me.columnCustName = New DataColumn("CustName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCustName)
            Me.columnAddress1 = New DataColumn("Address1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAddress1)
            Me.columnAddress2 = New DataColumn("Address2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAddress2)
        End Sub
        
        Public Function NewCustLookupRow() As CustLookupRow
            Return CType(Me.NewRow,CustLookupRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CustLookupRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CustLookupRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CustLookupRowChangedEvent) Is Nothing) Then
                RaiseEvent CustLookupRowChanged(Me, New CustLookupRowChangeEvent(CType(e.Row,CustLookupRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CustLookupRowChangingEvent) Is Nothing) Then
                RaiseEvent CustLookupRowChanging(Me, New CustLookupRowChangeEvent(CType(e.Row,CustLookupRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CustLookupRowDeletedEvent) Is Nothing) Then
                RaiseEvent CustLookupRowDeleted(Me, New CustLookupRowChangeEvent(CType(e.Row,CustLookupRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CustLookupRowDeletingEvent) Is Nothing) Then
                RaiseEvent CustLookupRowDeleting(Me, New CustLookupRowChangeEvent(CType(e.Row,CustLookupRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCustLookupRow(ByVal row As CustLookupRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CustLookupRow
        Inherits DataRow
        
        Private tableCustLookup As CustLookupDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCustLookup = CType(Me.Table,CustLookupDataTable)
        End Sub
        
        Public Property CustCode As String
            Get
                Try 
                    Return CType(Me(Me.tableCustLookup.CustCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustLookup.CustCodeColumn) = value
            End Set
        End Property
        
        Public Property CustName As String
            Get
                Try 
                    Return CType(Me(Me.tableCustLookup.CustNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustLookup.CustNameColumn) = value
            End Set
        End Property
        
        Public Property Address1 As String
            Get
                Try 
                    Return CType(Me(Me.tableCustLookup.Address1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustLookup.Address1Column) = value
            End Set
        End Property
        
        Public Property Address2 As String
            Get
                Try 
                    Return CType(Me(Me.tableCustLookup.Address2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustLookup.Address2Column) = value
            End Set
        End Property
        
        Public Function IsCustCodeNull() As Boolean
            Return Me.IsNull(Me.tableCustLookup.CustCodeColumn)
        End Function
        
        Public Sub SetCustCodeNull()
            Me(Me.tableCustLookup.CustCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCustNameNull() As Boolean
            Return Me.IsNull(Me.tableCustLookup.CustNameColumn)
        End Function
        
        Public Sub SetCustNameNull()
            Me(Me.tableCustLookup.CustNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAddress1Null() As Boolean
            Return Me.IsNull(Me.tableCustLookup.Address1Column)
        End Function
        
        Public Sub SetAddress1Null()
            Me(Me.tableCustLookup.Address1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsAddress2Null() As Boolean
            Return Me.IsNull(Me.tableCustLookup.Address2Column)
        End Function
        
        Public Sub SetAddress2Null()
            Me(Me.tableCustLookup.Address2Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CustLookupRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CustLookupRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CustLookupRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CustLookupRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QPIAC_ShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnAreaCode As DataColumn
        
        Private columnAreaName As DataColumn
        
        Private columnCreateDate As DataColumn
        
        Private columnUpdateDate As DataColumn
        
        Friend Sub New()
            MyBase.New("QPIAC_Show")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property AreaCodeColumn As DataColumn
            Get
                Return Me.columnAreaCode
            End Get
        End Property
        
        Friend ReadOnly Property AreaNameColumn As DataColumn
            Get
                Return Me.columnAreaName
            End Get
        End Property
        
        Friend ReadOnly Property CreateDateColumn As DataColumn
            Get
                Return Me.columnCreateDate
            End Get
        End Property
        
        Friend ReadOnly Property UpdateDateColumn As DataColumn
            Get
                Return Me.columnUpdateDate
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As QPIAC_ShowRow
            Get
                Return CType(Me.Rows(index),QPIAC_ShowRow)
            End Get
        End Property
        
        Public Event QPIAC_ShowRowChanged As QPIAC_ShowRowChangeEventHandler
        
        Public Event QPIAC_ShowRowChanging As QPIAC_ShowRowChangeEventHandler
        
        Public Event QPIAC_ShowRowDeleted As QPIAC_ShowRowChangeEventHandler
        
        Public Event QPIAC_ShowRowDeleting As QPIAC_ShowRowChangeEventHandler
        
        Public Overloads Sub AddQPIAC_ShowRow(ByVal row As QPIAC_ShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddQPIAC_ShowRow(ByVal AreaCode As String, ByVal AreaName As String, ByVal CreateDate As Date, ByVal UpdateDate As Date) As QPIAC_ShowRow
            Dim rowQPIAC_ShowRow As QPIAC_ShowRow = CType(Me.NewRow,QPIAC_ShowRow)
            rowQPIAC_ShowRow.ItemArray = New Object() {AreaCode, AreaName, CreateDate, UpdateDate}
            Me.Rows.Add(rowQPIAC_ShowRow)
            Return rowQPIAC_ShowRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As QPIAC_ShowDataTable = CType(MyBase.Clone,QPIAC_ShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New QPIAC_ShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnAreaCode = Me.Columns("AreaCode")
            Me.columnAreaName = Me.Columns("AreaName")
            Me.columnCreateDate = Me.Columns("CreateDate")
            Me.columnUpdateDate = Me.Columns("UpdateDate")
        End Sub
        
        Private Sub InitClass()
            Me.columnAreaCode = New DataColumn("AreaCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAreaCode)
            Me.columnAreaName = New DataColumn("AreaName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAreaName)
            Me.columnCreateDate = New DataColumn("CreateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreateDate)
            Me.columnUpdateDate = New DataColumn("UpdateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUpdateDate)
        End Sub
        
        Public Function NewQPIAC_ShowRow() As QPIAC_ShowRow
            Return CType(Me.NewRow,QPIAC_ShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New QPIAC_ShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(QPIAC_ShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.QPIAC_ShowRowChangedEvent) Is Nothing) Then
                RaiseEvent QPIAC_ShowRowChanged(Me, New QPIAC_ShowRowChangeEvent(CType(e.Row,QPIAC_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.QPIAC_ShowRowChangingEvent) Is Nothing) Then
                RaiseEvent QPIAC_ShowRowChanging(Me, New QPIAC_ShowRowChangeEvent(CType(e.Row,QPIAC_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.QPIAC_ShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent QPIAC_ShowRowDeleted(Me, New QPIAC_ShowRowChangeEvent(CType(e.Row,QPIAC_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.QPIAC_ShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent QPIAC_ShowRowDeleting(Me, New QPIAC_ShowRowChangeEvent(CType(e.Row,QPIAC_ShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveQPIAC_ShowRow(ByVal row As QPIAC_ShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QPIAC_ShowRow
        Inherits DataRow
        
        Private tableQPIAC_Show As QPIAC_ShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableQPIAC_Show = CType(Me.Table,QPIAC_ShowDataTable)
        End Sub
        
        Public Property AreaCode As String
            Get
                Try 
                    Return CType(Me(Me.tableQPIAC_Show.AreaCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQPIAC_Show.AreaCodeColumn) = value
            End Set
        End Property
        
        Public Property AreaName As String
            Get
                Try 
                    Return CType(Me(Me.tableQPIAC_Show.AreaNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQPIAC_Show.AreaNameColumn) = value
            End Set
        End Property
        
        Public Property CreateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableQPIAC_Show.CreateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQPIAC_Show.CreateDateColumn) = value
            End Set
        End Property
        
        Public Property UpdateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableQPIAC_Show.UpdateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQPIAC_Show.UpdateDateColumn) = value
            End Set
        End Property
        
        Public Function IsAreaCodeNull() As Boolean
            Return Me.IsNull(Me.tableQPIAC_Show.AreaCodeColumn)
        End Function
        
        Public Sub SetAreaCodeNull()
            Me(Me.tableQPIAC_Show.AreaCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAreaNameNull() As Boolean
            Return Me.IsNull(Me.tableQPIAC_Show.AreaNameColumn)
        End Function
        
        Public Sub SetAreaNameNull()
            Me(Me.tableQPIAC_Show.AreaNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreateDateNull() As Boolean
            Return Me.IsNull(Me.tableQPIAC_Show.CreateDateColumn)
        End Function
        
        Public Sub SetCreateDateNull()
            Me(Me.tableQPIAC_Show.CreateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUpdateDateNull() As Boolean
            Return Me.IsNull(Me.tableQPIAC_Show.UpdateDateColumn)
        End Function
        
        Public Sub SetUpdateDateNull()
            Me(Me.tableQPIAC_Show.UpdateDateColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QPIAC_ShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As QPIAC_ShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As QPIAC_ShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As QPIAC_ShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MedRepCT_ShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnRowid As DataColumn
        
        Private columnMRcode As DataColumn
        
        Private columnMRname As DataColumn
        
        Private columnHire_Date As DataColumn
        
        Private columnResign_Date As DataColumn
        
        Private columnCreateDate As DataColumn
        
        Private columnUpdateDate As DataColumn
        
        Private columnEmail As DataColumn
        
        Private columnCompanyCode As DataColumn
        
        Private columnStatus As DataColumn
        
        Private columnLastUser As DataColumn
        
        Friend Sub New()
            MyBase.New("MedRepCT_Show")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property RowidColumn As DataColumn
            Get
                Return Me.columnRowid
            End Get
        End Property
        
        Friend ReadOnly Property MRcodeColumn As DataColumn
            Get
                Return Me.columnMRcode
            End Get
        End Property
        
        Friend ReadOnly Property MRnameColumn As DataColumn
            Get
                Return Me.columnMRname
            End Get
        End Property
        
        Friend ReadOnly Property Hire_DateColumn As DataColumn
            Get
                Return Me.columnHire_Date
            End Get
        End Property
        
        Friend ReadOnly Property Resign_DateColumn As DataColumn
            Get
                Return Me.columnResign_Date
            End Get
        End Property
        
        Friend ReadOnly Property CreateDateColumn As DataColumn
            Get
                Return Me.columnCreateDate
            End Get
        End Property
        
        Friend ReadOnly Property UpdateDateColumn As DataColumn
            Get
                Return Me.columnUpdateDate
            End Get
        End Property
        
        Friend ReadOnly Property EmailColumn As DataColumn
            Get
                Return Me.columnEmail
            End Get
        End Property
        
        Friend ReadOnly Property CompanyCodeColumn As DataColumn
            Get
                Return Me.columnCompanyCode
            End Get
        End Property
        
        Friend ReadOnly Property StatusColumn As DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        Friend ReadOnly Property LastUserColumn As DataColumn
            Get
                Return Me.columnLastUser
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As MedRepCT_ShowRow
            Get
                Return CType(Me.Rows(index),MedRepCT_ShowRow)
            End Get
        End Property
        
        Public Event MedRepCT_ShowRowChanged As MedRepCT_ShowRowChangeEventHandler
        
        Public Event MedRepCT_ShowRowChanging As MedRepCT_ShowRowChangeEventHandler
        
        Public Event MedRepCT_ShowRowDeleted As MedRepCT_ShowRowChangeEventHandler
        
        Public Event MedRepCT_ShowRowDeleting As MedRepCT_ShowRowChangeEventHandler
        
        Public Overloads Sub AddMedRepCT_ShowRow(ByVal row As MedRepCT_ShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMedRepCT_ShowRow(ByVal Rowid As Integer, ByVal MRcode As String, ByVal MRname As String, ByVal Hire_Date As Date, ByVal Resign_Date As Date, ByVal CreateDate As Date, ByVal UpdateDate As Date, ByVal Email As String, ByVal CompanyCode As String, ByVal Status As String, ByVal LastUser As String) As MedRepCT_ShowRow
            Dim rowMedRepCT_ShowRow As MedRepCT_ShowRow = CType(Me.NewRow,MedRepCT_ShowRow)
            rowMedRepCT_ShowRow.ItemArray = New Object() {Rowid, MRcode, MRname, Hire_Date, Resign_Date, CreateDate, UpdateDate, Email, CompanyCode, Status, LastUser}
            Me.Rows.Add(rowMedRepCT_ShowRow)
            Return rowMedRepCT_ShowRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As MedRepCT_ShowDataTable = CType(MyBase.Clone,MedRepCT_ShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New MedRepCT_ShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnRowid = Me.Columns("Rowid")
            Me.columnMRcode = Me.Columns("MRcode")
            Me.columnMRname = Me.Columns("MRname")
            Me.columnHire_Date = Me.Columns("Hire_Date")
            Me.columnResign_Date = Me.Columns("Resign_Date")
            Me.columnCreateDate = Me.Columns("CreateDate")
            Me.columnUpdateDate = Me.Columns("UpdateDate")
            Me.columnEmail = Me.Columns("Email")
            Me.columnCompanyCode = Me.Columns("CompanyCode")
            Me.columnStatus = Me.Columns("Status")
            Me.columnLastUser = Me.Columns("LastUser")
        End Sub
        
        Private Sub InitClass()
            Me.columnRowid = New DataColumn("Rowid", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRowid)
            Me.columnMRcode = New DataColumn("MRcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMRcode)
            Me.columnMRname = New DataColumn("MRname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMRname)
            Me.columnHire_Date = New DataColumn("Hire_Date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHire_Date)
            Me.columnResign_Date = New DataColumn("Resign_Date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnResign_Date)
            Me.columnCreateDate = New DataColumn("CreateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreateDate)
            Me.columnUpdateDate = New DataColumn("UpdateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUpdateDate)
            Me.columnEmail = New DataColumn("Email", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmail)
            Me.columnCompanyCode = New DataColumn("CompanyCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCompanyCode)
            Me.columnStatus = New DataColumn("Status", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatus)
            Me.columnLastUser = New DataColumn("LastUser", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLastUser)
        End Sub
        
        Public Function NewMedRepCT_ShowRow() As MedRepCT_ShowRow
            Return CType(Me.NewRow,MedRepCT_ShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New MedRepCT_ShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MedRepCT_ShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MedRepCT_ShowRowChangedEvent) Is Nothing) Then
                RaiseEvent MedRepCT_ShowRowChanged(Me, New MedRepCT_ShowRowChangeEvent(CType(e.Row,MedRepCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MedRepCT_ShowRowChangingEvent) Is Nothing) Then
                RaiseEvent MedRepCT_ShowRowChanging(Me, New MedRepCT_ShowRowChangeEvent(CType(e.Row,MedRepCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MedRepCT_ShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent MedRepCT_ShowRowDeleted(Me, New MedRepCT_ShowRowChangeEvent(CType(e.Row,MedRepCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MedRepCT_ShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent MedRepCT_ShowRowDeleting(Me, New MedRepCT_ShowRowChangeEvent(CType(e.Row,MedRepCT_ShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMedRepCT_ShowRow(ByVal row As MedRepCT_ShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MedRepCT_ShowRow
        Inherits DataRow
        
        Private tableMedRepCT_Show As MedRepCT_ShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMedRepCT_Show = CType(Me.Table,MedRepCT_ShowDataTable)
        End Sub
        
        Public Property Rowid As Integer
            Get
                Try 
                    Return CType(Me(Me.tableMedRepCT_Show.RowidColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMedRepCT_Show.RowidColumn) = value
            End Set
        End Property
        
        Public Property MRcode As String
            Get
                Try 
                    Return CType(Me(Me.tableMedRepCT_Show.MRcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMedRepCT_Show.MRcodeColumn) = value
            End Set
        End Property
        
        Public Property MRname As String
            Get
                Try 
                    Return CType(Me(Me.tableMedRepCT_Show.MRnameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMedRepCT_Show.MRnameColumn) = value
            End Set
        End Property
        
        Public Property Hire_Date As Date
            Get
                Try 
                    Return CType(Me(Me.tableMedRepCT_Show.Hire_DateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMedRepCT_Show.Hire_DateColumn) = value
            End Set
        End Property
        
        Public Property Resign_Date As Date
            Get
                Try 
                    Return CType(Me(Me.tableMedRepCT_Show.Resign_DateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMedRepCT_Show.Resign_DateColumn) = value
            End Set
        End Property
        
        Public Property CreateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableMedRepCT_Show.CreateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMedRepCT_Show.CreateDateColumn) = value
            End Set
        End Property
        
        Public Property UpdateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableMedRepCT_Show.UpdateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMedRepCT_Show.UpdateDateColumn) = value
            End Set
        End Property
        
        Public Property Email As String
            Get
                Try 
                    Return CType(Me(Me.tableMedRepCT_Show.EmailColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMedRepCT_Show.EmailColumn) = value
            End Set
        End Property
        
        Public Property CompanyCode As String
            Get
                Try 
                    Return CType(Me(Me.tableMedRepCT_Show.CompanyCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMedRepCT_Show.CompanyCodeColumn) = value
            End Set
        End Property
        
        Public Property Status As String
            Get
                Try 
                    Return CType(Me(Me.tableMedRepCT_Show.StatusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMedRepCT_Show.StatusColumn) = value
            End Set
        End Property
        
        Public Property LastUser As String
            Get
                Try 
                    Return CType(Me(Me.tableMedRepCT_Show.LastUserColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMedRepCT_Show.LastUserColumn) = value
            End Set
        End Property
        
        Public Function IsRowidNull() As Boolean
            Return Me.IsNull(Me.tableMedRepCT_Show.RowidColumn)
        End Function
        
        Public Sub SetRowidNull()
            Me(Me.tableMedRepCT_Show.RowidColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMRcodeNull() As Boolean
            Return Me.IsNull(Me.tableMedRepCT_Show.MRcodeColumn)
        End Function
        
        Public Sub SetMRcodeNull()
            Me(Me.tableMedRepCT_Show.MRcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMRnameNull() As Boolean
            Return Me.IsNull(Me.tableMedRepCT_Show.MRnameColumn)
        End Function
        
        Public Sub SetMRnameNull()
            Me(Me.tableMedRepCT_Show.MRnameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHire_DateNull() As Boolean
            Return Me.IsNull(Me.tableMedRepCT_Show.Hire_DateColumn)
        End Function
        
        Public Sub SetHire_DateNull()
            Me(Me.tableMedRepCT_Show.Hire_DateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsResign_DateNull() As Boolean
            Return Me.IsNull(Me.tableMedRepCT_Show.Resign_DateColumn)
        End Function
        
        Public Sub SetResign_DateNull()
            Me(Me.tableMedRepCT_Show.Resign_DateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreateDateNull() As Boolean
            Return Me.IsNull(Me.tableMedRepCT_Show.CreateDateColumn)
        End Function
        
        Public Sub SetCreateDateNull()
            Me(Me.tableMedRepCT_Show.CreateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUpdateDateNull() As Boolean
            Return Me.IsNull(Me.tableMedRepCT_Show.UpdateDateColumn)
        End Function
        
        Public Sub SetUpdateDateNull()
            Me(Me.tableMedRepCT_Show.UpdateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEmailNull() As Boolean
            Return Me.IsNull(Me.tableMedRepCT_Show.EmailColumn)
        End Function
        
        Public Sub SetEmailNull()
            Me(Me.tableMedRepCT_Show.EmailColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCompanyCodeNull() As Boolean
            Return Me.IsNull(Me.tableMedRepCT_Show.CompanyCodeColumn)
        End Function
        
        Public Sub SetCompanyCodeNull()
            Me(Me.tableMedRepCT_Show.CompanyCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tableMedRepCT_Show.StatusColumn)
        End Function
        
        Public Sub SetStatusNull()
            Me(Me.tableMedRepCT_Show.StatusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLastUserNull() As Boolean
            Return Me.IsNull(Me.tableMedRepCT_Show.LastUserColumn)
        End Function
        
        Public Sub SetLastUserNull()
            Me(Me.tableMedRepCT_Show.LastUserColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MedRepCT_ShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As MedRepCT_ShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As MedRepCT_ShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As MedRepCT_ShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SupervisorCT_ShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnRowid As DataColumn
        
        Private columnSupCode As DataColumn
        
        Private columnSupName As DataColumn
        
        Private columnHire_Date As DataColumn
        
        Private columnResign_Date As DataColumn
        
        Private columnEmail As DataColumn
        
        Private columnMobileno As DataColumn
        
        Private columnCreateDate As DataColumn
        
        Private columnUpdateDate As DataColumn
        
        Private columnStartDate As DataColumn
        
        Private columnEndDate As DataColumn
        
        Private columnLastUser As DataColumn
        
        Friend Sub New()
            MyBase.New("SupervisorCT_Show")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property RowidColumn As DataColumn
            Get
                Return Me.columnRowid
            End Get
        End Property
        
        Friend ReadOnly Property SupCodeColumn As DataColumn
            Get
                Return Me.columnSupCode
            End Get
        End Property
        
        Friend ReadOnly Property SupNameColumn As DataColumn
            Get
                Return Me.columnSupName
            End Get
        End Property
        
        Friend ReadOnly Property Hire_DateColumn As DataColumn
            Get
                Return Me.columnHire_Date
            End Get
        End Property
        
        Friend ReadOnly Property Resign_DateColumn As DataColumn
            Get
                Return Me.columnResign_Date
            End Get
        End Property
        
        Friend ReadOnly Property EmailColumn As DataColumn
            Get
                Return Me.columnEmail
            End Get
        End Property
        
        Friend ReadOnly Property MobilenoColumn As DataColumn
            Get
                Return Me.columnMobileno
            End Get
        End Property
        
        Friend ReadOnly Property CreateDateColumn As DataColumn
            Get
                Return Me.columnCreateDate
            End Get
        End Property
        
        Friend ReadOnly Property UpdateDateColumn As DataColumn
            Get
                Return Me.columnUpdateDate
            End Get
        End Property
        
        Friend ReadOnly Property StartDateColumn As DataColumn
            Get
                Return Me.columnStartDate
            End Get
        End Property
        
        Friend ReadOnly Property EndDateColumn As DataColumn
            Get
                Return Me.columnEndDate
            End Get
        End Property
        
        Friend ReadOnly Property LastUserColumn As DataColumn
            Get
                Return Me.columnLastUser
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SupervisorCT_ShowRow
            Get
                Return CType(Me.Rows(index),SupervisorCT_ShowRow)
            End Get
        End Property
        
        Public Event SupervisorCT_ShowRowChanged As SupervisorCT_ShowRowChangeEventHandler
        
        Public Event SupervisorCT_ShowRowChanging As SupervisorCT_ShowRowChangeEventHandler
        
        Public Event SupervisorCT_ShowRowDeleted As SupervisorCT_ShowRowChangeEventHandler
        
        Public Event SupervisorCT_ShowRowDeleting As SupervisorCT_ShowRowChangeEventHandler
        
        Public Overloads Sub AddSupervisorCT_ShowRow(ByVal row As SupervisorCT_ShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSupervisorCT_ShowRow(ByVal Rowid As Integer, ByVal SupCode As String, ByVal SupName As String, ByVal Hire_Date As Date, ByVal Resign_Date As Date, ByVal Email As String, ByVal Mobileno As String, ByVal CreateDate As Date, ByVal UpdateDate As Date, ByVal StartDate As Date, ByVal EndDate As Date, ByVal LastUser As String) As SupervisorCT_ShowRow
            Dim rowSupervisorCT_ShowRow As SupervisorCT_ShowRow = CType(Me.NewRow,SupervisorCT_ShowRow)
            rowSupervisorCT_ShowRow.ItemArray = New Object() {Rowid, SupCode, SupName, Hire_Date, Resign_Date, Email, Mobileno, CreateDate, UpdateDate, StartDate, EndDate, LastUser}
            Me.Rows.Add(rowSupervisorCT_ShowRow)
            Return rowSupervisorCT_ShowRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SupervisorCT_ShowDataTable = CType(MyBase.Clone,SupervisorCT_ShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SupervisorCT_ShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnRowid = Me.Columns("Rowid")
            Me.columnSupCode = Me.Columns("SupCode")
            Me.columnSupName = Me.Columns("SupName")
            Me.columnHire_Date = Me.Columns("Hire_Date")
            Me.columnResign_Date = Me.Columns("Resign_Date")
            Me.columnEmail = Me.Columns("Email")
            Me.columnMobileno = Me.Columns("Mobileno")
            Me.columnCreateDate = Me.Columns("CreateDate")
            Me.columnUpdateDate = Me.Columns("UpdateDate")
            Me.columnStartDate = Me.Columns("StartDate")
            Me.columnEndDate = Me.Columns("EndDate")
            Me.columnLastUser = Me.Columns("LastUser")
        End Sub
        
        Private Sub InitClass()
            Me.columnRowid = New DataColumn("Rowid", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRowid)
            Me.columnSupCode = New DataColumn("SupCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSupCode)
            Me.columnSupName = New DataColumn("SupName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSupName)
            Me.columnHire_Date = New DataColumn("Hire_Date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHire_Date)
            Me.columnResign_Date = New DataColumn("Resign_Date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnResign_Date)
            Me.columnEmail = New DataColumn("Email", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmail)
            Me.columnMobileno = New DataColumn("Mobileno", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMobileno)
            Me.columnCreateDate = New DataColumn("CreateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreateDate)
            Me.columnUpdateDate = New DataColumn("UpdateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUpdateDate)
            Me.columnStartDate = New DataColumn("StartDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStartDate)
            Me.columnEndDate = New DataColumn("EndDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEndDate)
            Me.columnLastUser = New DataColumn("LastUser", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLastUser)
        End Sub
        
        Public Function NewSupervisorCT_ShowRow() As SupervisorCT_ShowRow
            Return CType(Me.NewRow,SupervisorCT_ShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SupervisorCT_ShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SupervisorCT_ShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SupervisorCT_ShowRowChangedEvent) Is Nothing) Then
                RaiseEvent SupervisorCT_ShowRowChanged(Me, New SupervisorCT_ShowRowChangeEvent(CType(e.Row,SupervisorCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SupervisorCT_ShowRowChangingEvent) Is Nothing) Then
                RaiseEvent SupervisorCT_ShowRowChanging(Me, New SupervisorCT_ShowRowChangeEvent(CType(e.Row,SupervisorCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SupervisorCT_ShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent SupervisorCT_ShowRowDeleted(Me, New SupervisorCT_ShowRowChangeEvent(CType(e.Row,SupervisorCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SupervisorCT_ShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent SupervisorCT_ShowRowDeleting(Me, New SupervisorCT_ShowRowChangeEvent(CType(e.Row,SupervisorCT_ShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSupervisorCT_ShowRow(ByVal row As SupervisorCT_ShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SupervisorCT_ShowRow
        Inherits DataRow
        
        Private tableSupervisorCT_Show As SupervisorCT_ShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSupervisorCT_Show = CType(Me.Table,SupervisorCT_ShowDataTable)
        End Sub
        
        Public Property Rowid As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSupervisorCT_Show.RowidColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSupervisorCT_Show.RowidColumn) = value
            End Set
        End Property
        
        Public Property SupCode As String
            Get
                Try 
                    Return CType(Me(Me.tableSupervisorCT_Show.SupCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSupervisorCT_Show.SupCodeColumn) = value
            End Set
        End Property
        
        Public Property SupName As String
            Get
                Try 
                    Return CType(Me(Me.tableSupervisorCT_Show.SupNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSupervisorCT_Show.SupNameColumn) = value
            End Set
        End Property
        
        Public Property Hire_Date As Date
            Get
                Try 
                    Return CType(Me(Me.tableSupervisorCT_Show.Hire_DateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSupervisorCT_Show.Hire_DateColumn) = value
            End Set
        End Property
        
        Public Property Resign_Date As Date
            Get
                Try 
                    Return CType(Me(Me.tableSupervisorCT_Show.Resign_DateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSupervisorCT_Show.Resign_DateColumn) = value
            End Set
        End Property
        
        Public Property Email As String
            Get
                Try 
                    Return CType(Me(Me.tableSupervisorCT_Show.EmailColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSupervisorCT_Show.EmailColumn) = value
            End Set
        End Property
        
        Public Property Mobileno As String
            Get
                Try 
                    Return CType(Me(Me.tableSupervisorCT_Show.MobilenoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSupervisorCT_Show.MobilenoColumn) = value
            End Set
        End Property
        
        Public Property CreateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableSupervisorCT_Show.CreateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSupervisorCT_Show.CreateDateColumn) = value
            End Set
        End Property
        
        Public Property UpdateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableSupervisorCT_Show.UpdateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSupervisorCT_Show.UpdateDateColumn) = value
            End Set
        End Property
        
        Public Property StartDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableSupervisorCT_Show.StartDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSupervisorCT_Show.StartDateColumn) = value
            End Set
        End Property
        
        Public Property EndDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableSupervisorCT_Show.EndDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSupervisorCT_Show.EndDateColumn) = value
            End Set
        End Property
        
        Public Property LastUser As String
            Get
                Try 
                    Return CType(Me(Me.tableSupervisorCT_Show.LastUserColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSupervisorCT_Show.LastUserColumn) = value
            End Set
        End Property
        
        Public Function IsRowidNull() As Boolean
            Return Me.IsNull(Me.tableSupervisorCT_Show.RowidColumn)
        End Function
        
        Public Sub SetRowidNull()
            Me(Me.tableSupervisorCT_Show.RowidColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSupCodeNull() As Boolean
            Return Me.IsNull(Me.tableSupervisorCT_Show.SupCodeColumn)
        End Function
        
        Public Sub SetSupCodeNull()
            Me(Me.tableSupervisorCT_Show.SupCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSupNameNull() As Boolean
            Return Me.IsNull(Me.tableSupervisorCT_Show.SupNameColumn)
        End Function
        
        Public Sub SetSupNameNull()
            Me(Me.tableSupervisorCT_Show.SupNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHire_DateNull() As Boolean
            Return Me.IsNull(Me.tableSupervisorCT_Show.Hire_DateColumn)
        End Function
        
        Public Sub SetHire_DateNull()
            Me(Me.tableSupervisorCT_Show.Hire_DateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsResign_DateNull() As Boolean
            Return Me.IsNull(Me.tableSupervisorCT_Show.Resign_DateColumn)
        End Function
        
        Public Sub SetResign_DateNull()
            Me(Me.tableSupervisorCT_Show.Resign_DateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEmailNull() As Boolean
            Return Me.IsNull(Me.tableSupervisorCT_Show.EmailColumn)
        End Function
        
        Public Sub SetEmailNull()
            Me(Me.tableSupervisorCT_Show.EmailColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMobilenoNull() As Boolean
            Return Me.IsNull(Me.tableSupervisorCT_Show.MobilenoColumn)
        End Function
        
        Public Sub SetMobilenoNull()
            Me(Me.tableSupervisorCT_Show.MobilenoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreateDateNull() As Boolean
            Return Me.IsNull(Me.tableSupervisorCT_Show.CreateDateColumn)
        End Function
        
        Public Sub SetCreateDateNull()
            Me(Me.tableSupervisorCT_Show.CreateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUpdateDateNull() As Boolean
            Return Me.IsNull(Me.tableSupervisorCT_Show.UpdateDateColumn)
        End Function
        
        Public Sub SetUpdateDateNull()
            Me(Me.tableSupervisorCT_Show.UpdateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStartDateNull() As Boolean
            Return Me.IsNull(Me.tableSupervisorCT_Show.StartDateColumn)
        End Function
        
        Public Sub SetStartDateNull()
            Me(Me.tableSupervisorCT_Show.StartDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEndDateNull() As Boolean
            Return Me.IsNull(Me.tableSupervisorCT_Show.EndDateColumn)
        End Function
        
        Public Sub SetEndDateNull()
            Me(Me.tableSupervisorCT_Show.EndDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLastUserNull() As Boolean
            Return Me.IsNull(Me.tableSupervisorCT_Show.LastUserColumn)
        End Function
        
        Public Sub SetLastUserNull()
            Me(Me.tableSupervisorCT_Show.LastUserColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SupervisorCT_ShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SupervisorCT_ShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SupervisorCT_ShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SupervisorCT_ShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ItemDivSubGrp_ShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnRowid As DataColumn
        
        Private columnItemCode As DataColumn
        
        Private columnDivCode As DataColumn
        
        Private columnStartDate As DataColumn
        
        Private columnEndDate As DataColumn
        
        Private columnSubCode As DataColumn
        
        Private columnDivSubGrp As DataColumn
        
        Private columnCreateDate As DataColumn
        
        Private columnUpdateDate As DataColumn
        
        Private columnLastUser As DataColumn
        
        Friend Sub New()
            MyBase.New("ItemDivSubGrp_Show")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property RowidColumn As DataColumn
            Get
                Return Me.columnRowid
            End Get
        End Property
        
        Friend ReadOnly Property ItemCodeColumn As DataColumn
            Get
                Return Me.columnItemCode
            End Get
        End Property
        
        Friend ReadOnly Property DivCodeColumn As DataColumn
            Get
                Return Me.columnDivCode
            End Get
        End Property
        
        Friend ReadOnly Property StartDateColumn As DataColumn
            Get
                Return Me.columnStartDate
            End Get
        End Property
        
        Friend ReadOnly Property EndDateColumn As DataColumn
            Get
                Return Me.columnEndDate
            End Get
        End Property
        
        Friend ReadOnly Property SubCodeColumn As DataColumn
            Get
                Return Me.columnSubCode
            End Get
        End Property
        
        Friend ReadOnly Property DivSubGrpColumn As DataColumn
            Get
                Return Me.columnDivSubGrp
            End Get
        End Property
        
        Friend ReadOnly Property CreateDateColumn As DataColumn
            Get
                Return Me.columnCreateDate
            End Get
        End Property
        
        Friend ReadOnly Property UpdateDateColumn As DataColumn
            Get
                Return Me.columnUpdateDate
            End Get
        End Property
        
        Friend ReadOnly Property LastUserColumn As DataColumn
            Get
                Return Me.columnLastUser
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ItemDivSubGrp_ShowRow
            Get
                Return CType(Me.Rows(index),ItemDivSubGrp_ShowRow)
            End Get
        End Property
        
        Public Event ItemDivSubGrp_ShowRowChanged As ItemDivSubGrp_ShowRowChangeEventHandler
        
        Public Event ItemDivSubGrp_ShowRowChanging As ItemDivSubGrp_ShowRowChangeEventHandler
        
        Public Event ItemDivSubGrp_ShowRowDeleted As ItemDivSubGrp_ShowRowChangeEventHandler
        
        Public Event ItemDivSubGrp_ShowRowDeleting As ItemDivSubGrp_ShowRowChangeEventHandler
        
        Public Overloads Sub AddItemDivSubGrp_ShowRow(ByVal row As ItemDivSubGrp_ShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddItemDivSubGrp_ShowRow(ByVal Rowid As Integer, ByVal ItemCode As String, ByVal DivCode As String, ByVal StartDate As Date, ByVal EndDate As Date, ByVal SubCode As String, ByVal DivSubGrp As String, ByVal CreateDate As Date, ByVal UpdateDate As Date, ByVal LastUser As String) As ItemDivSubGrp_ShowRow
            Dim rowItemDivSubGrp_ShowRow As ItemDivSubGrp_ShowRow = CType(Me.NewRow,ItemDivSubGrp_ShowRow)
            rowItemDivSubGrp_ShowRow.ItemArray = New Object() {Rowid, ItemCode, DivCode, StartDate, EndDate, SubCode, DivSubGrp, CreateDate, UpdateDate, LastUser}
            Me.Rows.Add(rowItemDivSubGrp_ShowRow)
            Return rowItemDivSubGrp_ShowRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ItemDivSubGrp_ShowDataTable = CType(MyBase.Clone,ItemDivSubGrp_ShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ItemDivSubGrp_ShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnRowid = Me.Columns("Rowid")
            Me.columnItemCode = Me.Columns("ItemCode")
            Me.columnDivCode = Me.Columns("DivCode")
            Me.columnStartDate = Me.Columns("StartDate")
            Me.columnEndDate = Me.Columns("EndDate")
            Me.columnSubCode = Me.Columns("SubCode")
            Me.columnDivSubGrp = Me.Columns("DivSubGrp")
            Me.columnCreateDate = Me.Columns("CreateDate")
            Me.columnUpdateDate = Me.Columns("UpdateDate")
            Me.columnLastUser = Me.Columns("LastUser")
        End Sub
        
        Private Sub InitClass()
            Me.columnRowid = New DataColumn("Rowid", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRowid)
            Me.columnItemCode = New DataColumn("ItemCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemCode)
            Me.columnDivCode = New DataColumn("DivCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDivCode)
            Me.columnStartDate = New DataColumn("StartDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStartDate)
            Me.columnEndDate = New DataColumn("EndDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEndDate)
            Me.columnSubCode = New DataColumn("SubCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSubCode)
            Me.columnDivSubGrp = New DataColumn("DivSubGrp", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDivSubGrp)
            Me.columnCreateDate = New DataColumn("CreateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreateDate)
            Me.columnUpdateDate = New DataColumn("UpdateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUpdateDate)
            Me.columnLastUser = New DataColumn("LastUser", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLastUser)
        End Sub
        
        Public Function NewItemDivSubGrp_ShowRow() As ItemDivSubGrp_ShowRow
            Return CType(Me.NewRow,ItemDivSubGrp_ShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ItemDivSubGrp_ShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ItemDivSubGrp_ShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ItemDivSubGrp_ShowRowChangedEvent) Is Nothing) Then
                RaiseEvent ItemDivSubGrp_ShowRowChanged(Me, New ItemDivSubGrp_ShowRowChangeEvent(CType(e.Row,ItemDivSubGrp_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ItemDivSubGrp_ShowRowChangingEvent) Is Nothing) Then
                RaiseEvent ItemDivSubGrp_ShowRowChanging(Me, New ItemDivSubGrp_ShowRowChangeEvent(CType(e.Row,ItemDivSubGrp_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ItemDivSubGrp_ShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent ItemDivSubGrp_ShowRowDeleted(Me, New ItemDivSubGrp_ShowRowChangeEvent(CType(e.Row,ItemDivSubGrp_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ItemDivSubGrp_ShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent ItemDivSubGrp_ShowRowDeleting(Me, New ItemDivSubGrp_ShowRowChangeEvent(CType(e.Row,ItemDivSubGrp_ShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveItemDivSubGrp_ShowRow(ByVal row As ItemDivSubGrp_ShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ItemDivSubGrp_ShowRow
        Inherits DataRow
        
        Private tableItemDivSubGrp_Show As ItemDivSubGrp_ShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableItemDivSubGrp_Show = CType(Me.Table,ItemDivSubGrp_ShowDataTable)
        End Sub
        
        Public Property Rowid As Integer
            Get
                Try 
                    Return CType(Me(Me.tableItemDivSubGrp_Show.RowidColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemDivSubGrp_Show.RowidColumn) = value
            End Set
        End Property
        
        Public Property ItemCode As String
            Get
                Try 
                    Return CType(Me(Me.tableItemDivSubGrp_Show.ItemCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemDivSubGrp_Show.ItemCodeColumn) = value
            End Set
        End Property
        
        Public Property DivCode As String
            Get
                Try 
                    Return CType(Me(Me.tableItemDivSubGrp_Show.DivCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemDivSubGrp_Show.DivCodeColumn) = value
            End Set
        End Property
        
        Public Property StartDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableItemDivSubGrp_Show.StartDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemDivSubGrp_Show.StartDateColumn) = value
            End Set
        End Property
        
        Public Property EndDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableItemDivSubGrp_Show.EndDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemDivSubGrp_Show.EndDateColumn) = value
            End Set
        End Property
        
        Public Property SubCode As String
            Get
                Try 
                    Return CType(Me(Me.tableItemDivSubGrp_Show.SubCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemDivSubGrp_Show.SubCodeColumn) = value
            End Set
        End Property
        
        Public Property DivSubGrp As String
            Get
                Try 
                    Return CType(Me(Me.tableItemDivSubGrp_Show.DivSubGrpColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemDivSubGrp_Show.DivSubGrpColumn) = value
            End Set
        End Property
        
        Public Property CreateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableItemDivSubGrp_Show.CreateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemDivSubGrp_Show.CreateDateColumn) = value
            End Set
        End Property
        
        Public Property UpdateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableItemDivSubGrp_Show.UpdateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemDivSubGrp_Show.UpdateDateColumn) = value
            End Set
        End Property
        
        Public Property LastUser As String
            Get
                Try 
                    Return CType(Me(Me.tableItemDivSubGrp_Show.LastUserColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemDivSubGrp_Show.LastUserColumn) = value
            End Set
        End Property
        
        Public Function IsRowidNull() As Boolean
            Return Me.IsNull(Me.tableItemDivSubGrp_Show.RowidColumn)
        End Function
        
        Public Sub SetRowidNull()
            Me(Me.tableItemDivSubGrp_Show.RowidColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItemCodeNull() As Boolean
            Return Me.IsNull(Me.tableItemDivSubGrp_Show.ItemCodeColumn)
        End Function
        
        Public Sub SetItemCodeNull()
            Me(Me.tableItemDivSubGrp_Show.ItemCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDivCodeNull() As Boolean
            Return Me.IsNull(Me.tableItemDivSubGrp_Show.DivCodeColumn)
        End Function
        
        Public Sub SetDivCodeNull()
            Me(Me.tableItemDivSubGrp_Show.DivCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStartDateNull() As Boolean
            Return Me.IsNull(Me.tableItemDivSubGrp_Show.StartDateColumn)
        End Function
        
        Public Sub SetStartDateNull()
            Me(Me.tableItemDivSubGrp_Show.StartDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEndDateNull() As Boolean
            Return Me.IsNull(Me.tableItemDivSubGrp_Show.EndDateColumn)
        End Function
        
        Public Sub SetEndDateNull()
            Me(Me.tableItemDivSubGrp_Show.EndDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSubCodeNull() As Boolean
            Return Me.IsNull(Me.tableItemDivSubGrp_Show.SubCodeColumn)
        End Function
        
        Public Sub SetSubCodeNull()
            Me(Me.tableItemDivSubGrp_Show.SubCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDivSubGrpNull() As Boolean
            Return Me.IsNull(Me.tableItemDivSubGrp_Show.DivSubGrpColumn)
        End Function
        
        Public Sub SetDivSubGrpNull()
            Me(Me.tableItemDivSubGrp_Show.DivSubGrpColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreateDateNull() As Boolean
            Return Me.IsNull(Me.tableItemDivSubGrp_Show.CreateDateColumn)
        End Function
        
        Public Sub SetCreateDateNull()
            Me(Me.tableItemDivSubGrp_Show.CreateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUpdateDateNull() As Boolean
            Return Me.IsNull(Me.tableItemDivSubGrp_Show.UpdateDateColumn)
        End Function
        
        Public Sub SetUpdateDateNull()
            Me(Me.tableItemDivSubGrp_Show.UpdateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLastUserNull() As Boolean
            Return Me.IsNull(Me.tableItemDivSubGrp_Show.LastUserColumn)
        End Function
        
        Public Sub SetLastUserNull()
            Me(Me.tableItemDivSubGrp_Show.LastUserColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ItemDivSubGrp_ShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ItemDivSubGrp_ShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ItemDivSubGrp_ShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ItemDivSubGrp_ShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
