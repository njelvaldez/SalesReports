'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2407
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class CustomerType
    Inherits DataSet
    
    Private tableCustomerTypeCT_Show As CustomerTypeCT_ShowDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("CustomerTypeCT_Show")) Is Nothing) Then
                Me.Tables.Add(New CustomerTypeCT_ShowDataTable(ds.Tables("CustomerTypeCT_Show")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CustomerTypeCT_Show As CustomerTypeCT_ShowDataTable
        Get
            Return Me.tableCustomerTypeCT_Show
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As CustomerType = CType(MyBase.Clone,CustomerType)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("CustomerTypeCT_Show")) Is Nothing) Then
            Me.Tables.Add(New CustomerTypeCT_ShowDataTable(ds.Tables("CustomerTypeCT_Show")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableCustomerTypeCT_Show = CType(Me.Tables("CustomerTypeCT_Show"),CustomerTypeCT_ShowDataTable)
        If (Not (Me.tableCustomerTypeCT_Show) Is Nothing) Then
            Me.tableCustomerTypeCT_Show.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "CustomerType"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/CustomerType.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableCustomerTypeCT_Show = New CustomerTypeCT_ShowDataTable
        Me.Tables.Add(Me.tableCustomerTypeCT_Show)
    End Sub
    
    Private Function ShouldSerializeCustomerTypeCT_Show() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub CustomerTypeCT_ShowRowChangeEventHandler(ByVal sender As Object, ByVal e As CustomerTypeCT_ShowRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CustomerTypeCT_ShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnRowid As DataColumn
        
        Private columnTypeCode As DataColumn
        
        Private columnTypeDesc As DataColumn
        
        Private columnIMSclass As DataColumn
        
        Private columnCreateDate As DataColumn
        
        Private columnUpdateDate As DataColumn
        
        Private columnLastUser As DataColumn
        
        Friend Sub New()
            MyBase.New("CustomerTypeCT_Show")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property RowidColumn As DataColumn
            Get
                Return Me.columnRowid
            End Get
        End Property
        
        Friend ReadOnly Property TypeCodeColumn As DataColumn
            Get
                Return Me.columnTypeCode
            End Get
        End Property
        
        Friend ReadOnly Property TypeDescColumn As DataColumn
            Get
                Return Me.columnTypeDesc
            End Get
        End Property
        
        Friend ReadOnly Property IMSclassColumn As DataColumn
            Get
                Return Me.columnIMSclass
            End Get
        End Property
        
        Friend ReadOnly Property CreateDateColumn As DataColumn
            Get
                Return Me.columnCreateDate
            End Get
        End Property
        
        Friend ReadOnly Property UpdateDateColumn As DataColumn
            Get
                Return Me.columnUpdateDate
            End Get
        End Property
        
        Friend ReadOnly Property LastUserColumn As DataColumn
            Get
                Return Me.columnLastUser
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CustomerTypeCT_ShowRow
            Get
                Return CType(Me.Rows(index),CustomerTypeCT_ShowRow)
            End Get
        End Property
        
        Public Event CustomerTypeCT_ShowRowChanged As CustomerTypeCT_ShowRowChangeEventHandler
        
        Public Event CustomerTypeCT_ShowRowChanging As CustomerTypeCT_ShowRowChangeEventHandler
        
        Public Event CustomerTypeCT_ShowRowDeleted As CustomerTypeCT_ShowRowChangeEventHandler
        
        Public Event CustomerTypeCT_ShowRowDeleting As CustomerTypeCT_ShowRowChangeEventHandler
        
        Public Overloads Sub AddCustomerTypeCT_ShowRow(ByVal row As CustomerTypeCT_ShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCustomerTypeCT_ShowRow(ByVal TypeCode As String, ByVal TypeDesc As String, ByVal IMSclass As String, ByVal CreateDate As Date, ByVal UpdateDate As Date, ByVal LastUser As String) As CustomerTypeCT_ShowRow
            Dim rowCustomerTypeCT_ShowRow As CustomerTypeCT_ShowRow = CType(Me.NewRow,CustomerTypeCT_ShowRow)
            rowCustomerTypeCT_ShowRow.ItemArray = New Object() {Nothing, TypeCode, TypeDesc, IMSclass, CreateDate, UpdateDate, LastUser}
            Me.Rows.Add(rowCustomerTypeCT_ShowRow)
            Return rowCustomerTypeCT_ShowRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CustomerTypeCT_ShowDataTable = CType(MyBase.Clone,CustomerTypeCT_ShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CustomerTypeCT_ShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnRowid = Me.Columns("Rowid")
            Me.columnTypeCode = Me.Columns("TypeCode")
            Me.columnTypeDesc = Me.Columns("TypeDesc")
            Me.columnIMSclass = Me.Columns("IMSclass")
            Me.columnCreateDate = Me.Columns("CreateDate")
            Me.columnUpdateDate = Me.Columns("UpdateDate")
            Me.columnLastUser = Me.Columns("LastUser")
        End Sub
        
        Private Sub InitClass()
            Me.columnRowid = New DataColumn("Rowid", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRowid)
            Me.columnTypeCode = New DataColumn("TypeCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTypeCode)
            Me.columnTypeDesc = New DataColumn("TypeDesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTypeDesc)
            Me.columnIMSclass = New DataColumn("IMSclass", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIMSclass)
            Me.columnCreateDate = New DataColumn("CreateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreateDate)
            Me.columnUpdateDate = New DataColumn("UpdateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUpdateDate)
            Me.columnLastUser = New DataColumn("LastUser", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLastUser)
            Me.columnRowid.AutoIncrement = true
            Me.columnRowid.AllowDBNull = false
            Me.columnRowid.ReadOnly = true
            Me.columnTypeCode.AllowDBNull = false
            Me.columnTypeDesc.AllowDBNull = false
            Me.columnCreateDate.AllowDBNull = false
            Me.columnUpdateDate.AllowDBNull = false
        End Sub
        
        Public Function NewCustomerTypeCT_ShowRow() As CustomerTypeCT_ShowRow
            Return CType(Me.NewRow,CustomerTypeCT_ShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CustomerTypeCT_ShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CustomerTypeCT_ShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CustomerTypeCT_ShowRowChangedEvent) Is Nothing) Then
                RaiseEvent CustomerTypeCT_ShowRowChanged(Me, New CustomerTypeCT_ShowRowChangeEvent(CType(e.Row,CustomerTypeCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CustomerTypeCT_ShowRowChangingEvent) Is Nothing) Then
                RaiseEvent CustomerTypeCT_ShowRowChanging(Me, New CustomerTypeCT_ShowRowChangeEvent(CType(e.Row,CustomerTypeCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CustomerTypeCT_ShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent CustomerTypeCT_ShowRowDeleted(Me, New CustomerTypeCT_ShowRowChangeEvent(CType(e.Row,CustomerTypeCT_ShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CustomerTypeCT_ShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent CustomerTypeCT_ShowRowDeleting(Me, New CustomerTypeCT_ShowRowChangeEvent(CType(e.Row,CustomerTypeCT_ShowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCustomerTypeCT_ShowRow(ByVal row As CustomerTypeCT_ShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CustomerTypeCT_ShowRow
        Inherits DataRow
        
        Private tableCustomerTypeCT_Show As CustomerTypeCT_ShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCustomerTypeCT_Show = CType(Me.Table,CustomerTypeCT_ShowDataTable)
        End Sub
        
        Public Property Rowid As Integer
            Get
                Return CType(Me(Me.tableCustomerTypeCT_Show.RowidColumn),Integer)
            End Get
            Set
                Me(Me.tableCustomerTypeCT_Show.RowidColumn) = value
            End Set
        End Property
        
        Public Property TypeCode As String
            Get
                Return CType(Me(Me.tableCustomerTypeCT_Show.TypeCodeColumn),String)
            End Get
            Set
                Me(Me.tableCustomerTypeCT_Show.TypeCodeColumn) = value
            End Set
        End Property
        
        Public Property TypeDesc As String
            Get
                Return CType(Me(Me.tableCustomerTypeCT_Show.TypeDescColumn),String)
            End Get
            Set
                Me(Me.tableCustomerTypeCT_Show.TypeDescColumn) = value
            End Set
        End Property
        
        Public Property IMSclass As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerTypeCT_Show.IMSclassColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerTypeCT_Show.IMSclassColumn) = value
            End Set
        End Property
        
        Public Property CreateDate As Date
            Get
                Return CType(Me(Me.tableCustomerTypeCT_Show.CreateDateColumn),Date)
            End Get
            Set
                Me(Me.tableCustomerTypeCT_Show.CreateDateColumn) = value
            End Set
        End Property
        
        Public Property UpdateDate As Date
            Get
                Return CType(Me(Me.tableCustomerTypeCT_Show.UpdateDateColumn),Date)
            End Get
            Set
                Me(Me.tableCustomerTypeCT_Show.UpdateDateColumn) = value
            End Set
        End Property
        
        Public Property LastUser As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerTypeCT_Show.LastUserColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerTypeCT_Show.LastUserColumn) = value
            End Set
        End Property
        
        Public Function IsIMSclassNull() As Boolean
            Return Me.IsNull(Me.tableCustomerTypeCT_Show.IMSclassColumn)
        End Function
        
        Public Sub SetIMSclassNull()
            Me(Me.tableCustomerTypeCT_Show.IMSclassColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLastUserNull() As Boolean
            Return Me.IsNull(Me.tableCustomerTypeCT_Show.LastUserColumn)
        End Function
        
        Public Sub SetLastUserNull()
            Me(Me.tableCustomerTypeCT_Show.LastUserColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CustomerTypeCT_ShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CustomerTypeCT_ShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CustomerTypeCT_ShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CustomerTypeCT_ShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
